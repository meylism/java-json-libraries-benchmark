# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
# Warmup Iteration   1: 439.167 ops/s
# Warmup Iteration   2: 437.866 ops/s
# Warmup Iteration   3: 447.653 ops/s
# Warmup Iteration   4: 453.065 ops/s
# Warmup Iteration   5: 445.728 ops/s
Iteration   1: 425.529 ops/s
Iteration   2: 424.937 ops/s
Iteration   3: 439.590 ops/s
Iteration   4: 450.785 ops/s
Iteration   5: 456.778 ops/s
Iteration   6: 439.450 ops/s
Iteration   7: 445.484 ops/s
Iteration   8: 450.327 ops/s
Iteration   9: 450.739 ops/s
Iteration  10: 454.762 ops/s

# Run progress: 10.00% complete, ETA 00:08:26
# Fork: 2 of 2
# Warmup Iteration   1: 504.397 ops/s
# Warmup Iteration   2: 537.906 ops/s
# Warmup Iteration   3: 542.093 ops/s
# Warmup Iteration   4: 544.347 ops/s
# Warmup Iteration   5: 548.614 ops/s
Iteration   1: 545.488 ops/s
Iteration   2: 544.539 ops/s
Iteration   3: 546.457 ops/s
Iteration   4: 541.347 ops/s
Iteration   5: 542.674 ops/s
Iteration   6: 550.515 ops/s
Iteration   7: 536.171 ops/s
Iteration   8: 542.123 ops/s
Iteration   9: 547.806 ops/s
Iteration  10: 541.439 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  493.847 ?(99.9%) 45.130 ops/s [Average]
  (min, avg, max) = (424.937, 493.847, 550.515), stdev = 51.972
  CI (99.9%): [448.717, 538.977] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:30
# Fork: 1 of 2
# Warmup Iteration   1: 527.203 ops/s
# Warmup Iteration   2: 545.624 ops/s
# Warmup Iteration   3: 542.636 ops/s
# Warmup Iteration   4: 548.453 ops/s
# Warmup Iteration   5: 548.160 ops/s
Iteration   1: 541.968 ops/s
Iteration   2: 541.285 ops/s
Iteration   3: 549.286 ops/s
Iteration   4: 540.808 ops/s
Iteration   5: 536.607 ops/s
Iteration   6: 525.818 ops/s
Iteration   7: 538.557 ops/s
Iteration   8: 545.961 ops/s
Iteration   9: 544.330 ops/s
Iteration  10: 549.585 ops/s

# Run progress: 30.00% complete, ETA 00:06:33
# Fork: 2 of 2
# Warmup Iteration   1: 425.699 ops/s
# Warmup Iteration   2: 449.820 ops/s
# Warmup Iteration   3: 435.292 ops/s
# Warmup Iteration   4: 447.053 ops/s
# Warmup Iteration   5: 440.467 ops/s
Iteration   1: 448.157 ops/s
Iteration   2: 438.649 ops/s
Iteration   3: 447.562 ops/s
Iteration   4: 448.407 ops/s
Iteration   5: 440.521 ops/s
Iteration   6: 442.260 ops/s
Iteration   7: 443.698 ops/s
Iteration   8: 443.828 ops/s
Iteration   9: 450.579 ops/s
Iteration  10: 442.439 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  493.015 ?(99.9%) 43.386 ops/s [Average]
  (min, avg, max) = (438.649, 493.015, 549.585), stdev = 49.963
  CI (99.9%): [449.630, 536.401] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:37
# Fork: 1 of 2
# Warmup Iteration   1: 88.000 ops/s
# Warmup Iteration   2: 91.256 ops/s
# Warmup Iteration   3: 92.441 ops/s
# Warmup Iteration   4: 91.610 ops/s
# Warmup Iteration   5: 88.886 ops/s
Iteration   1: 92.792 ops/s
Iteration   2: 88.704 ops/s
Iteration   3: 89.852 ops/s
Iteration   4: 91.924 ops/s
Iteration   5: 90.372 ops/s
Iteration   6: 92.810 ops/s
Iteration   7: 92.648 ops/s
Iteration   8: 91.931 ops/s
Iteration   9: 91.222 ops/s
Iteration  10: 92.495 ops/s

# Run progress: 50.00% complete, ETA 00:04:41
# Fork: 2 of 2
# Warmup Iteration   1: 85.368 ops/s
# Warmup Iteration   2: 86.709 ops/s
# Warmup Iteration   3: 89.792 ops/s
# Warmup Iteration   4: 90.580 ops/s
# Warmup Iteration   5: 90.402 ops/s
Iteration   1: 88.826 ops/s
Iteration   2: 86.690 ops/s
Iteration   3: 90.583 ops/s
Iteration   4: 92.378 ops/s
Iteration   5: 92.410 ops/s
Iteration   6: 90.425 ops/s
Iteration   7: 92.402 ops/s
Iteration   8: 89.582 ops/s
Iteration   9: 90.563 ops/s
Iteration  10: 90.946 ops/s


Result "com.meylism.databind.Deserialization.gson":
  90.978 ?(99.9%) 1.437 ops/s [Average]
  (min, avg, max) = (86.690, 90.978, 92.810), stdev = 1.655
  CI (99.9%): [89.541, 92.415] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:45
# Fork: 1 of 2
# Warmup Iteration   1: 92.381 ops/s
# Warmup Iteration   2: 93.523 ops/s
# Warmup Iteration   3: 92.762 ops/s
# Warmup Iteration   4: 96.379 ops/s
# Warmup Iteration   5: 97.546 ops/s
Iteration   1: 97.451 ops/s
Iteration   2: 96.758 ops/s
Iteration   3: 96.798 ops/s
Iteration   4: 95.113 ops/s
Iteration   5: 92.660 ops/s
Iteration   6: 95.354 ops/s
Iteration   7: 97.060 ops/s
Iteration   8: 96.277 ops/s
Iteration   9: 92.421 ops/s
Iteration  10: 94.237 ops/s

# Run progress: 70.00% complete, ETA 00:02:49
# Fork: 2 of 2
# Warmup Iteration   1: 90.770 ops/s
# Warmup Iteration   2: 95.960 ops/s
# Warmup Iteration   3: 95.311 ops/s
# Warmup Iteration   4: 96.480 ops/s
# Warmup Iteration   5: 98.448 ops/s
Iteration   1: 96.411 ops/s
Iteration   2: 97.212 ops/s
Iteration   3: 99.442 ops/s
Iteration   4: 98.975 ops/s
Iteration   5: 98.926 ops/s
Iteration   6: 98.966 ops/s
Iteration   7: 98.075 ops/s
Iteration   8: 97.585 ops/s
Iteration   9: 97.095 ops/s
Iteration  10: 96.152 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  96.648 ?(99.9%) 1.692 ops/s [Average]
  (min, avg, max) = (92.421, 96.648, 99.442), stdev = 1.948
  CI (99.9%): [94.957, 98.340] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:53
# Fork: 1 of 2
# Warmup Iteration   1: 93.916 ops/s
# Warmup Iteration   2: 98.214 ops/s
# Warmup Iteration   3: 97.966 ops/s
# Warmup Iteration   4: 97.225 ops/s
# Warmup Iteration   5: 99.325 ops/s
Iteration   1: 99.173 ops/s
Iteration   2: 100.239 ops/s
Iteration   3: 99.999 ops/s
Iteration   4: 100.513 ops/s
Iteration   5: 98.475 ops/s
Iteration   6: 98.991 ops/s
Iteration   7: 100.604 ops/s
Iteration   8: 99.598 ops/s
Iteration   9: 97.248 ops/s
Iteration  10: 97.777 ops/s

# Run progress: 90.00% complete, ETA 00:00:56
# Fork: 2 of 2
# Warmup Iteration   1: 88.482 ops/s
# Warmup Iteration   2: 93.599 ops/s
# Warmup Iteration   3: 93.765 ops/s
# Warmup Iteration   4: 94.302 ops/s
# Warmup Iteration   5: 93.532 ops/s
Iteration   1: 94.823 ops/s
Iteration   2: 95.809 ops/s
Iteration   3: 94.528 ops/s
Iteration   4: 94.485 ops/s
Iteration   5: 94.974 ops/s
Iteration   6: 95.974 ops/s
Iteration   7: 95.115 ops/s
Iteration   8: 94.813 ops/s
Iteration   9: 95.060 ops/s
Iteration  10: 94.676 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  97.144 ?(99.9%) 2.031 ops/s [Average]
  (min, avg, max) = (94.485, 97.144, 100.604), stdev = 2.339
  CI (99.9%): [95.113, 99.175] (assumes normal distribution)


# Run complete. Total time: 00:09:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt    Score    Error  Units
Deserialization.dsljson              thrpt   20  493.847 ? 45.130  ops/s
Deserialization.dsljson_reflection   thrpt   20  493.015 ? 43.386  ops/s
Deserialization.gson                 thrpt   20   90.978 ?  1.437  ops/s
Deserialization.jackson              thrpt   20   96.648 ?  1.692  ops/s
Deserialization.jackson_afterburner  thrpt   20   97.144 ?  2.031  ops/s
