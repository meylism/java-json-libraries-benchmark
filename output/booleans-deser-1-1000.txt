# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 331.842 ops/s
# Warmup Iteration   2: 415.295 ops/s
# Warmup Iteration   3: 414.713 ops/s
# Warmup Iteration   4: 429.433 ops/s
# Warmup Iteration   5: 377.047 ops/s
Iteration   1: 416.439 ops/s
Iteration   2: 393.068 ops/s
Iteration   3: 338.958 ops/s
Iteration   4: 384.742 ops/s
Iteration   5: 382.091 ops/s
Iteration   6: 352.279 ops/s
Iteration   7: 340.633 ops/s
Iteration   8: 373.275 ops/s
Iteration   9: 401.611 ops/s
Iteration  10: 400.782 ops/s

# Run progress: 10.00% complete, ETA 00:12:28
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 87.349 ops/s
# Warmup Iteration   2: 342.898 ops/s
# Warmup Iteration   3: 346.059 ops/s
# Warmup Iteration   4: 400.225 ops/s
# Warmup Iteration   5: 403.880 ops/s
Iteration   1: 375.997 ops/s
Iteration   2: 409.962 ops/s
Iteration   3: 436.649 ops/s
Iteration   4: 374.025 ops/s
Iteration   5: 370.575 ops/s
Iteration   6: 362.499 ops/s
Iteration   7: 334.015 ops/s
Iteration   8: 388.799 ops/s
Iteration   9: 353.582 ops/s
Iteration  10: 417.608 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  380.379 ?(99.9%) 24.664 ops/s [Average]
  (min, avg, max) = (334.015, 380.379, 436.649), stdev = 28.403
  CI (99.9%): [355.716, 405.043] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:07
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 92.671 ops/s
# Warmup Iteration   2: 319.262 ops/s
# Warmup Iteration   3: 405.501 ops/s
# Warmup Iteration   4: 360.764 ops/s
# Warmup Iteration   5: 366.544 ops/s
Iteration   1: 380.802 ops/s
Iteration   2: 375.997 ops/s
Iteration   3: 392.471 ops/s
Iteration   4: 360.451 ops/s
Iteration   5: 415.852 ops/s
Iteration   6: 376.083 ops/s
Iteration   7: 382.725 ops/s
Iteration   8: 374.239 ops/s
Iteration   9: 351.829 ops/s
Iteration  10: 345.881 ops/s

# Run progress: 30.00% complete, ETA 00:09:44
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 86.606 ops/s
# Warmup Iteration   2: 293.180 ops/s
# Warmup Iteration   3: 378.036 ops/s
# Warmup Iteration   4: 375.950 ops/s
# Warmup Iteration   5: 348.969 ops/s
Iteration   1: 344.597 ops/s
Iteration   2: 345.797 ops/s
Iteration   3: 360.303 ops/s
Iteration   4: 363.823 ops/s
Iteration   5: 352.385 ops/s
Iteration   6: 373.776 ops/s
Iteration   7: 384.698 ops/s
Iteration   8: 380.439 ops/s
Iteration   9: 420.074 ops/s
Iteration  10: 375.106 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  372.866 ?(99.9%) 18.217 ops/s [Average]
  (min, avg, max) = (344.597, 372.866, 420.074), stdev = 20.979
  CI (99.9%): [354.649, 391.083] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:21
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 77.840 ops/s
# Warmup Iteration   2: 138.717 ops/s
# Warmup Iteration   3: 223.687 ops/s
# Warmup Iteration   4: 218.111 ops/s
# Warmup Iteration   5: 219.833 ops/s
Iteration   1: 216.976 ops/s
Iteration   2: 226.263 ops/s
Iteration   3: 236.771 ops/s
Iteration   4: 217.125 ops/s
Iteration   5: 218.435 ops/s
Iteration   6: 215.359 ops/s
Iteration   7: 198.929 ops/s
Iteration   8: 215.077 ops/s
Iteration   9: 213.304 ops/s
Iteration  10: 213.206 ops/s

# Run progress: 50.00% complete, ETA 00:06:57
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 88.660 ops/s
# Warmup Iteration   2: 232.299 ops/s
# Warmup Iteration   3: 231.965 ops/s
# Warmup Iteration   4: 238.631 ops/s
# Warmup Iteration   5: 230.238 ops/s
Iteration   1: 228.915 ops/s
Iteration   2: 230.723 ops/s
Iteration   3: 234.050 ops/s
Iteration   4: 225.258 ops/s
Iteration   5: 235.471 ops/s
Iteration   6: 222.587 ops/s
Iteration   7: 232.808 ops/s
Iteration   8: 229.745 ops/s
Iteration   9: 227.900 ops/s
Iteration  10: 233.053 ops/s


Result "com.meylism.databind.Deserialization.gson":
  223.598 ?(99.9%) 8.498 ops/s [Average]
  (min, avg, max) = (198.929, 223.598, 236.771), stdev = 9.786
  CI (99.9%): [215.100, 232.096] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:34
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 81.244 ops/s
# Warmup Iteration   2: 328.374 ops/s
# Warmup Iteration   3: 341.725 ops/s
# Warmup Iteration   4: 355.997 ops/s
# Warmup Iteration   5: 342.581 ops/s
Iteration   1: 393.331 ops/s
Iteration   2: 324.569 ops/s
Iteration   3: 324.299 ops/s
Iteration   4: 326.973 ops/s
Iteration   5: 383.289 ops/s
Iteration   6: 336.787 ops/s
Iteration   7: 350.763 ops/s
Iteration   8: 368.192 ops/s
Iteration   9: 326.269 ops/s
Iteration  10: 343.311 ops/s

# Run progress: 70.00% complete, ETA 00:04:10
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 285.123 ops/s
# Warmup Iteration   2: 384.583 ops/s
# Warmup Iteration   3: 351.005 ops/s
# Warmup Iteration   4: 352.305 ops/s
# Warmup Iteration   5: 349.266 ops/s
Iteration   1: 333.958 ops/s
Iteration   2: 361.170 ops/s
Iteration   3: 317.389 ops/s
Iteration   4: 361.865 ops/s
Iteration   5: 360.098 ops/s
Iteration   6: 327.780 ops/s
Iteration   7: 361.292 ops/s
Iteration   8: 335.271 ops/s
Iteration   9: 372.567 ops/s
Iteration  10: 367.280 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  348.823 ?(99.9%) 19.154 ops/s [Average]
  (min, avg, max) = (317.389, 348.823, 393.331), stdev = 22.057
  CI (99.9%): [329.669, 367.976] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:47
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
85.616 ops/s
# Warmup Iteration   2: 295.415 ops/s
# Warmup Iteration   3: 343.473 ops/s
# Warmup Iteration   4: 344.399 ops/s
# Warmup Iteration   5: 358.520 ops/s
Iteration   1: 380.528 ops/s
Iteration   2: 392.890 ops/s
Iteration   3: 341.234 ops/s
Iteration   4: 372.312 ops/s
Iteration   5: 343.640 ops/s
Iteration   6: 354.478 ops/s
Iteration   7: 361.402 ops/s
Iteration   8: 389.484 ops/s
Iteration   9: 361.068 ops/s
Iteration  10: 349.071 ops/s

# Run progress: 90.00% complete, ETA 00:01:23
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
183.138 ops/s
# Warmup Iteration   2: 358.234 ops/s
# Warmup Iteration   3: 368.726 ops/s
# Warmup Iteration   4: 328.569 ops/s
# Warmup Iteration   5: 353.084 ops/s
Iteration   1: 349.677 ops/s
Iteration   2: 395.348 ops/s
Iteration   3: 357.863 ops/s
Iteration   4: 363.834 ops/s
Iteration   5: 363.078 ops/s
Iteration   6: 344.789 ops/s
Iteration   7: 335.651 ops/s
Iteration   8: 358.610 ops/s
Iteration   9: 361.925 ops/s
Iteration  10: 369.583 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  362.323 ?(99.9%) 14.768 ops/s [Average]
  (min, avg, max) = (335.651, 362.323, 395.348), stdev = 17.007
  CI (99.9%): [347.555, 377.091] (assumes normal distribution)


# Run complete. Total time: 00:13:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score    Error  Units
Deserialization.dsljson              thrpt   20  380.379 ? 24.664  ops/s
Deserialization.dsljson_reflection   thrpt   20  372.866 ? 18.217  ops/s
Deserialization.gson                 thrpt   20  223.598 ?  8.498  ops/s
Deserialization.jackson              thrpt   20  348.823 ? 19.154  ops/s
Deserialization.jackson_afterburner  thrpt   20  362.323 ? 14.768  ops/s
