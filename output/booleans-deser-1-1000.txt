# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 93.571 ops/s
# Warmup Iteration   2: 88.805 ops/s
# Warmup Iteration   3: 112.032 ops/s
# Warmup Iteration   4: 54.376 ops/s
# Warmup Iteration   5: 295.001 ops/s
Iteration   1: 419.027 ops/s
Iteration   2: 405.310 ops/s
Iteration   3: 404.107 ops/s
Iteration   4: 402.129 ops/s
Iteration   5: 410.381 ops/s
Iteration   6: 402.457 ops/s
Iteration   7: 407.300 ops/s
Iteration   8: 419.348 ops/s
Iteration   9: 417.908 ops/s
Iteration  10: 418.590 ops/s

# Run progress: 10.00% complete, ETA 00:08:36
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 97.609 ops/s
# Warmup Iteration   2: 86.914 ops/s
# Warmup Iteration   3: 89.123 ops/s
# Warmup Iteration   4: 107.887 ops/s
# Warmup Iteration   5: 511.575 ops/s
Iteration   1: 504.364 ops/s
Iteration   2: 499.960 ops/s
Iteration   3: 502.325 ops/s
Iteration   4: 537.135 ops/s
Iteration   5: 533.530 ops/s
Iteration   6: 542.022 ops/s
Iteration   7: 536.464 ops/s
Iteration   8: 542.728 ops/s
Iteration   9: 528.435 ops/s
Iteration  10: 534.321 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  468.392 ?(99.9%) 52.618 ops/s [Average]
  (min, avg, max) = (402.129, 468.392, 542.728), stdev = 60.594
  CI (99.9%): [415.775, 521.010] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 97.934 ops/s
# Warmup Iteration   2: 86.476 ops/s
# Warmup Iteration   3: 88.099 ops/s
# Warmup Iteration   4: 111.383 ops/s
# Warmup Iteration   5: 520.881 ops/s
Iteration   1: 513.268 ops/s
Iteration   2: 538.686 ops/s
Iteration   3: 525.652 ops/s
Iteration   4: 533.369 ops/s
Iteration   5: 517.863 ops/s
Iteration   6: 528.781 ops/s
Iteration   7: 521.772 ops/s
Iteration   8: 530.331 ops/s
Iteration   9: 526.687 ops/s
Iteration  10: 534.925 ops/s

# Run progress: 30.00% complete, ETA 00:06:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 99.793 ops/s
# Warmup Iteration   2: 85.448 ops/s
# Warmup Iteration   3: 92.441 ops/s
# Warmup Iteration   4: 111.141 ops/s
# Warmup Iteration   5: 535.633 ops/s
Iteration   1: 503.049 ops/s
Iteration   2: 533.405 ops/s
Iteration   3: 515.724 ops/s
Iteration   4: 524.562 ops/s
Iteration   5: 515.556 ops/s
Iteration   6: 525.445 ops/s
Iteration   7: 521.290 ops/s
Iteration   8: 530.217 ops/s
Iteration   9: 518.159 ops/s
Iteration  10: 532.848 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  524.579 ?(99.9%) 7.650 ops/s [Average]
  (min, avg, max) = (503.049, 524.579, 538.686), stdev = 8.810
  CI (99.9%): [516.929, 532.230] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:49
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 63.943 ops/s
# Warmup Iteration   2: 54.582 ops/s
# Warmup Iteration   3: 47.218 ops/s
# Warmup Iteration   4: 74.411 ops/s
# Warmup Iteration   5: 41.652 ops/s
Iteration   1: 38.324 ops/s
Iteration   2: 30.022 ops/s
Iteration   3: 199.310 ops/s
Iteration   4: 198.159 ops/s
Iteration   5: 199.952 ops/s
Iteration   6: 195.809 ops/s
Iteration   7: 197.472 ops/s
Iteration   8: 196.169 ops/s
Iteration   9: 191.591 ops/s
Iteration  10: 195.665 ops/s

# Run progress: 50.00% complete, ETA 00:04:51
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 65.631 ops/s
# Warmup Iteration   2: 55.602 ops/s
# Warmup Iteration   3: 47.843 ops/s
# Warmup Iteration   4: 80.148 ops/s
# Warmup Iteration   5: 43.063 ops/s
Iteration   1: 41.633 ops/s
Iteration   2: 36.787 ops/s
Iteration   3: 207.298 ops/s
Iteration   4: 204.386 ops/s
Iteration   5: 206.924 ops/s
Iteration   6: 203.121 ops/s
Iteration   7: 204.912 ops/s
Iteration   8: 199.098 ops/s
Iteration   9: 200.686 ops/s
Iteration  10: 203.501 ops/s


Result "com.meylism.databind.Deserialization.gson":
  167.541 ?(99.9%) 58.414 ops/s [Average]
  (min, avg, max) = (30.022, 167.541, 207.298), stdev = 67.269
  CI (99.9%): [109.127, 225.955] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 91.674 ops/s
# Warmup Iteration   2: 94.174 ops/s
# Warmup Iteration   3: 79.382 ops/s
# Warmup Iteration   4: 46.772 ops/s
# Warmup Iteration   5: 419.300 ops/s
Iteration   1: 432.617 ops/s
Iteration   2: 424.552 ops/s
Iteration   3: 435.733 ops/s
Iteration   4: 447.026 ops/s
Iteration   5: 443.319 ops/s
Iteration   6: 445.282 ops/s
Iteration   7: 451.295 ops/s
Iteration   8: 436.853 ops/s
Iteration   9: 448.302 ops/s
Iteration  10: 445.795 ops/s

# Run progress: 70.00% complete, ETA 00:02:54
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 91.992 ops/s
# Warmup Iteration   2: 95.279 ops/s
# Warmup Iteration   3: 78.410 ops/s
# Warmup Iteration   4: 45.784 ops/s
# Warmup Iteration   5: 415.916 ops/s
Iteration   1: 437.565 ops/s
Iteration   2: 421.568 ops/s
Iteration   3: 424.679 ops/s
Iteration   4: 432.687 ops/s
Iteration   5: 427.634 ops/s
Iteration   6: 440.966 ops/s
Iteration   7: 440.720 ops/s
Iteration   8: 431.126 ops/s
Iteration   9: 424.876 ops/s
Iteration  10: 451.890 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  437.224 ?(99.9%) 8.268 ops/s [Average]
  (min, avg, max) = (421.568, 437.224, 451.890), stdev = 9.522
  CI (99.9%): [428.956, 445.493] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:56
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
89.478 ops/s
# Warmup Iteration   2: 91.603 ops/s
# Warmup Iteration   3: 78.682 ops/s
# Warmup Iteration   4: 46.349 ops/s
# Warmup Iteration   5: 396.417 ops/s
Iteration   1: 425.749 ops/s
Iteration   2: 408.115 ops/s
Iteration   3: 423.677 ops/s
Iteration   4: 428.392 ops/s
Iteration   5: 428.923 ops/s
Iteration   6: 421.178 ops/s
Iteration   7: 428.668 ops/s
Iteration   8: 423.504 ops/s
Iteration   9: 425.201 ops/s
Iteration  10: 425.318 ops/s

# Run progress: 90.00% complete, ETA 00:00:58
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
90.442 ops/s
# Warmup Iteration   2: 92.368 ops/s
# Warmup Iteration   3: 79.243 ops/s
# Warmup Iteration   4: 47.245 ops/s
# Warmup Iteration   5: 398.137 ops/s
Iteration   1: 420.861 ops/s
Iteration   2: 421.826 ops/s
Iteration   3: 379.178 ops/s
Iteration   4: 415.559 ops/s
Iteration   5: 419.284 ops/s
Iteration   6: 405.139 ops/s
Iteration   7: 415.834 ops/s
Iteration   8: 424.727 ops/s
Iteration   9: 422.949 ops/s
Iteration  10: 426.151 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  419.512 ?(99.9%) 9.911 ops/s [Average]
  (min, avg, max) = (379.178, 419.512, 428.923), stdev = 11.413
  CI (99.9%): [409.601, 429.423] (assumes normal distribution)


# Run complete. Total time: 00:09:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score    Error  Units
Deserialization.dsljson              thrpt   20  468.392 ? 52.618  ops/s
Deserialization.dsljson_reflection   thrpt   20  524.579 ?  7.650  ops/s
Deserialization.gson                 thrpt   20  167.541 ? 58.414  ops/s
Deserialization.jackson              thrpt   20  437.224 ?  8.268  ops/s
Deserialization.jackson_afterburner  thrpt   20  419.512 ?  9.911  ops/s
