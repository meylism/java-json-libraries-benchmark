# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: 64.153 ops/s
# Warmup Iteration   2: 63.252 ops/s
# Warmup Iteration   3: 64.370 ops/s
# Warmup Iteration   4: 63.761 ops/s
# Warmup Iteration   5: 62.818 ops/s
Iteration   1: 63.865 ops/s
Iteration   2: 62.959 ops/s
Iteration   3: 63.106 ops/s
Iteration   4: 61.985 ops/s
Iteration   5: 61.838 ops/s
Iteration   6: 62.663 ops/s
Iteration   7: 63.728 ops/s
Iteration   8: 63.238 ops/s
Iteration   9: 64.004 ops/s
Iteration  10: 63.277 ops/s

# Run progress: 10.00% complete, ETA 00:13:07
# Fork: 2 of 2
# Warmup Iteration   1: 92.038 ops/s
# Warmup Iteration   2: 95.139 ops/s
# Warmup Iteration   3: 95.704 ops/s
# Warmup Iteration   4: 102.777 ops/s
# Warmup Iteration   5: 99.748 ops/s
Iteration   1: 93.593 ops/s
Iteration   2: 102.080 ops/s
Iteration   3: 94.081 ops/s
Iteration   4: 94.856 ops/s
Iteration   5: 95.008 ops/s
Iteration   6: 96.234 ops/s
Iteration   7: 96.151 ops/s
Iteration   8: 94.964 ops/s
Iteration   9: 95.168 ops/s
Iteration  10: 96.264 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  79.453 ?(99.9%) 14.674 ops/s [Average]
  (min, avg, max) = (61.838, 79.453, 102.080), stdev = 16.899
  CI (99.9%): [64.779, 94.127] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:37
# Fork: 1 of 2
# Warmup Iteration   1: 610.849 ops/s
# Warmup Iteration   2: 623.333 ops/s
# Warmup Iteration   3: 621.221 ops/s
# Warmup Iteration   4: 621.762 ops/s
# Warmup Iteration   5: 620.603 ops/s
Iteration   1: 627.524 ops/s
Iteration   2: 618.579 ops/s
Iteration   3: 615.894 ops/s
Iteration   4: 622.705 ops/s
Iteration   5: 612.117 ops/s
Iteration   6: 622.510 ops/s
Iteration   7: 625.961 ops/s
Iteration   8: 620.944 ops/s
Iteration   9: 612.764 ops/s
Iteration  10: 624.585 ops/s

# Run progress: 30.00% complete, ETA 00:09:57
# Fork: 2 of 2
# Warmup Iteration   1: 76.042 ops/s
# Warmup Iteration   2: 76.081 ops/s
# Warmup Iteration   3: 78.505 ops/s
# Warmup Iteration   4: 77.544 ops/s
# Warmup Iteration   5: 78.683 ops/s
Iteration   1: 78.071 ops/s
Iteration   2: 78.668 ops/s
Iteration   3: 78.550 ops/s
Iteration   4: 77.310 ops/s
Iteration   5: 78.526 ops/s
Iteration   6: 77.700 ops/s
Iteration   7: 78.237 ops/s
Iteration   8: 78.107 ops/s
Iteration   9: 77.334 ops/s
Iteration  10: 77.964 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  349.202 ?(99.9%) 241.598 ops/s [Average]
  (min, avg, max) = (77.310, 349.202, 627.524), stdev = 278.225
  CI (99.9%): [107.604, 590.801] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:39
# Fork: 1 of 2
# Warmup Iteration   1: 112.044 ops/s
# Warmup Iteration   2: 117.924 ops/s
# Warmup Iteration   3: 117.260 ops/s
# Warmup Iteration   4: 117.392 ops/s
# Warmup Iteration   5: 118.378 ops/s
Iteration   1: 117.313 ops/s
Iteration   2: 117.794 ops/s
Iteration   3: 120.554 ops/s
Iteration   4: 120.329 ops/s
Iteration   5: 120.659 ops/s
Iteration   6: 120.210 ops/s
Iteration   7: 120.367 ops/s
Iteration   8: 120.595 ops/s
Iteration   9: 120.500 ops/s
Iteration  10: 119.902 ops/s

# Run progress: 50.00% complete, ETA 00:07:10
# Fork: 2 of 2
# Warmup Iteration   1: 117.728 ops/s
# Warmup Iteration   2: 122.318 ops/s
# Warmup Iteration   3: 121.809 ops/s
# Warmup Iteration   4: 122.748 ops/s
# Warmup Iteration   5: 121.598 ops/s
Iteration   1: 122.110 ops/s
Iteration   2: 120.748 ops/s
Iteration   3: 120.155 ops/s
Iteration   4: 120.048 ops/s
Iteration   5: 123.545 ops/s
Iteration   6: 122.541 ops/s
Iteration   7: 124.013 ops/s
Iteration   8: 119.746 ops/s
Iteration   9: 122.645 ops/s
Iteration  10: 123.377 ops/s


Result "com.meylism.databind.Serialization.gson":
  120.857 ?(99.9%) 1.512 ops/s [Average]
  (min, avg, max) = (117.313, 120.857, 124.013), stdev = 1.742
  CI (99.9%): [119.345, 122.370] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:43
# Fork: 1 of 2
# Warmup Iteration   1: 422.511 ops/s
# Warmup Iteration   2: 423.797 ops/s
# Warmup Iteration   3: 428.973 ops/s
# Warmup Iteration   4: 428.689 ops/s
# Warmup Iteration   5: 424.846 ops/s
Iteration   1: 424.666 ops/s
Iteration   2: 416.923 ops/s
Iteration   3: 428.151 ops/s
Iteration   4: 430.728 ops/s
Iteration   5: 431.402 ops/s
Iteration   6: 430.164 ops/s
Iteration   7: 432.856 ops/s
Iteration   8: 431.437 ops/s
Iteration   9: 431.569 ops/s
Iteration  10: 413.614 ops/s

# Run progress: 70.00% complete, ETA 00:04:16
# Fork: 2 of 2
# Warmup Iteration   1: 443.023 ops/s
# Warmup Iteration   2: 442.016 ops/s
# Warmup Iteration   3: 442.878 ops/s
# Warmup Iteration   4: 440.363 ops/s
# Warmup Iteration   5: 441.875 ops/s
Iteration   1: 428.513 ops/s
Iteration   2: 442.833 ops/s
Iteration   3: 441.913 ops/s
Iteration   4: 443.067 ops/s
Iteration   5: 444.134 ops/s
Iteration   6: 439.858 ops/s
Iteration   7: 446.204 ops/s
Iteration   8: 447.382 ops/s
Iteration   9: 444.432 ops/s
Iteration  10: 446.128 ops/s


Result "com.meylism.databind.Serialization.jackson":
  434.799 ?(99.9%) 8.535 ops/s [Average]
  (min, avg, max) = (413.614, 434.799, 447.382), stdev = 9.829
  CI (99.9%): [426.264, 443.334] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:49
# Fork: 1 of 2
# Warmup Iteration   1: 427.644 ops/s
# Warmup Iteration   2: 430.284 ops/s
# Warmup Iteration   3: 431.889 ops/s
# Warmup Iteration   4: 431.498 ops/s
# Warmup Iteration   5: 431.430 ops/s
Iteration   1: 430.816 ops/s
Iteration   2: 429.352 ops/s
Iteration   3: 421.041 ops/s
Iteration   4: 431.359 ops/s
Iteration   5: 422.259 ops/s
Iteration   6: 433.815 ops/s
Iteration   7: 428.829 ops/s
Iteration   8: 432.113 ops/s
Iteration   9: 425.030 ops/s
Iteration  10: 430.494 ops/s

# Run progress: 90.00% complete, ETA 00:01:24
# Fork: 2 of 2
# Warmup Iteration   1: 427.536 ops/s
# Warmup Iteration   2: 431.419 ops/s
# Warmup Iteration   3: 433.857 ops/s
# Warmup Iteration   4: 431.117 ops/s
# Warmup Iteration   5: 422.405 ops/s
Iteration   1: 429.909 ops/s
Iteration   2: 432.986 ops/s
Iteration   3: 432.707 ops/s
Iteration   4: 433.767 ops/s
Iteration   5: 422.396 ops/s
Iteration   6: 434.590 ops/s
Iteration   7: 434.177 ops/s
Iteration   8: 426.973 ops/s
Iteration   9: 432.848 ops/s
Iteration  10: 414.613 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  429.004 ?(99.9%) 4.669 ops/s [Average]
  (min, avg, max) = (414.613, 429.004, 434.590), stdev = 5.377
  CI (99.9%): [424.334, 433.673] (assumes normal distribution)


# Run complete. Total time: 00:14:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt    Score     Error  Units
Serialization.dsljson              thrpt   20   79.453 ?  14.674  ops/s
Serialization.dsljson_reflection   thrpt   20  349.202 ? 241.598  ops/s
Serialization.gson                 thrpt   20  120.857 ?   1.512  ops/s
Serialization.jackson              thrpt   20  434.799 ?   8.535  ops/s
Serialization.jackson_afterburner  thrpt   20  429.004 ?   4.669  ops/s
