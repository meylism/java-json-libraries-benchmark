# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
94.466 ops/s
# Warmup Iteration   2: 95.549 ops/s
# Warmup Iteration   3: 95.587 ops/s
# Warmup Iteration   4: 95.699 ops/s
# Warmup Iteration   5: 95.629 ops/s
Iteration   1: 95.576 ops/s
Iteration   2: 95.572 ops/s
Iteration   3: 95.185 ops/s
Iteration   4: 95.517 ops/s
Iteration   5: 95.396 ops/s
Iteration   6: 95.527 ops/s
Iteration   7: 95.749 ops/s
Iteration   8: 95.675 ops/s
Iteration   9: 95.700 ops/s
Iteration  10: 95.634 ops/s

# Run progress: 10.00% complete, ETA 00:12:19
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
95.174 ops/s
# Warmup Iteration   2: 95.753 ops/s
# Warmup Iteration   3: 95.785 ops/s
# Warmup Iteration   4: 95.828 ops/s
# Warmup Iteration   5: 95.748 ops/s
Iteration   1: 95.411 ops/s
Iteration   2: 95.658 ops/s
Iteration   3: 95.032 ops/s
Iteration   4: 95.814 ops/s
Iteration   5: 95.626 ops/s
Iteration   6: 95.615 ops/s
Iteration   7: 95.819 ops/s
Iteration   8: 95.838 ops/s
Iteration   9: 95.839 ops/s
Iteration  10: 95.716 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  95.595 ±(99.9%) 0.184 ops/s [Average]
  (min, avg, max) = (95.032, 95.595, 95.839), stdev = 0.211
  CI (99.9%): [95.411, 95.779] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:56
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
95.281 ops/s
# Warmup Iteration   2: 95.792 ops/s
# Warmup Iteration   3: 95.704 ops/s
# Warmup Iteration   4: 95.787 ops/s
# Warmup Iteration   5: 95.759 ops/s
Iteration   1: 95.689 ops/s
Iteration   2: 95.203 ops/s
Iteration   3: 95.298 ops/s
Iteration   4: 95.687 ops/s
Iteration   5: 95.707 ops/s
Iteration   6: 95.629 ops/s
Iteration   7: 95.769 ops/s
Iteration   8: 95.715 ops/s
Iteration   9: 95.759 ops/s
Iteration  10: 95.679 ops/s

# Run progress: 30.00% complete, ETA 00:09:34
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
95.150 ops/s
# Warmup Iteration   2: 95.735 ops/s
# Warmup Iteration   3: 95.788 ops/s
# Warmup Iteration   4: 95.734 ops/s
# Warmup Iteration   5: 95.764 ops/s
Iteration   1: 95.637 ops/s
Iteration   2: 95.601 ops/s
Iteration   3: 95.057 ops/s
Iteration   4: 95.657 ops/s
Iteration   5: 95.844 ops/s
Iteration   6: 95.245 ops/s
Iteration   7: 95.728 ops/s
Iteration   8: 95.751 ops/s
Iteration   9: 95.728 ops/s
Iteration  10: 95.705 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  95.604 ±(99.9%) 0.189 ops/s [Average]
  (min, avg, max) = (95.057, 95.604, 95.844), stdev = 0.218
  CI (99.9%): [95.415, 95.794] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:12
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
16.623 ops/s
# Warmup Iteration   2: 15.552 ops/s
# Warmup Iteration   3: 16.131 ops/s
# Warmup Iteration   4: 16.706 ops/s
# Warmup Iteration   5: 16.682 ops/s
Iteration   1: 16.603 ops/s
Iteration   2: 16.014 ops/s
Iteration   3: 16.425 ops/s
Iteration   4: 15.844 ops/s
Iteration   5: 16.482 ops/s
Iteration   6: 16.449 ops/s
Iteration   7: 16.617 ops/s
Iteration   8: 16.605 ops/s
Iteration   9: 16.710 ops/s
Iteration  10: 16.633 ops/s

# Run progress: 50.00% complete, ETA 00:06:55
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
17.452 ops/s
# Warmup Iteration   2: 17.305 ops/s
# Warmup Iteration   3: 17.407 ops/s
# Warmup Iteration   4: 17.518 ops/s
# Warmup Iteration   5: 17.514 ops/s
Iteration   1: 17.621 ops/s
Iteration   2: 17.226 ops/s
Iteration   3: 17.757 ops/s
Iteration   4: 16.837 ops/s
Iteration   5: 17.469 ops/s
Iteration   6: 17.386 ops/s
Iteration   7: 17.427 ops/s
Iteration   8: 17.487 ops/s
Iteration   9: 17.266 ops/s
Iteration  10: 17.986 ops/s


Result "com.meylism.databind.Serialization.gson":
  16.942 ±(99.9%) 0.515 ops/s [Average]
  (min, avg, max) = (15.844, 16.942, 17.986), stdev = 0.594
  CI (99.9%): [16.427, 17.458] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:34
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
71.647 ops/s
# Warmup Iteration   2: 71.961 ops/s
# Warmup Iteration   3: 72.758 ops/s
# Warmup Iteration   4: 72.750 ops/s
# Warmup Iteration   5: 72.760 ops/s
Iteration   1: 72.803 ops/s
Iteration   2: 72.744 ops/s
Iteration   3: 72.745 ops/s
Iteration   4: 72.660 ops/s
Iteration   5: 72.690 ops/s
Iteration   6: 72.695 ops/s
Iteration   7: 72.688 ops/s
Iteration   8: 70.634 ops/s
Iteration   9: 72.513 ops/s
Iteration  10: 72.819 ops/s

# Run progress: 70.00% complete, ETA 00:04:10
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
71.938 ops/s
# Warmup Iteration   2: 72.711 ops/s
# Warmup Iteration   3: 72.641 ops/s
# Warmup Iteration   4: 72.655 ops/s
# Warmup Iteration   5: 72.729 ops/s
Iteration   1: 72.723 ops/s
Iteration   2: 72.709 ops/s
Iteration   3: 72.737 ops/s
Iteration   4: 72.560 ops/s
Iteration   5: 72.611 ops/s
Iteration   6: 72.616 ops/s
Iteration   7: 70.912 ops/s
Iteration   8: 72.413 ops/s
Iteration   9: 71.785 ops/s
Iteration  10: 72.745 ops/s


Result "com.meylism.databind.Serialization.jackson":
  72.440 ±(99.9%) 0.532 ops/s [Average]
  (min, avg, max) = (70.634, 72.440, 72.819), stdev = 0.613
  CI (99.9%): [71.908, 72.972] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:46
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
70.009 ops/s
# Warmup Iteration   2: 70.547 ops/s
# Warmup Iteration   3: 70.513 ops/s
# Warmup Iteration   4: 70.524 ops/s
# Warmup Iteration   5: 70.625 ops/s
Iteration   1: 70.684 ops/s
Iteration   2: 70.552 ops/s
Iteration   3: 70.646 ops/s
Iteration   4: 70.554 ops/s
Iteration   5: 70.677 ops/s
Iteration   6: 70.664 ops/s
Iteration   7: 70.656 ops/s
Iteration   8: 70.664 ops/s
Iteration   9: 69.648 ops/s
Iteration  10: 69.906 ops/s

# Run progress: 90.00% complete, ETA 00:01:23
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
70.825 ops/s
# Warmup Iteration   2: 71.311 ops/s
# Warmup Iteration   3: 71.372 ops/s
# Warmup Iteration   4: 71.388 ops/s
# Warmup Iteration   5: 71.391 ops/s
Iteration   1: 71.308 ops/s
Iteration   2: 71.165 ops/s
Iteration   3: 71.345 ops/s
Iteration   4: 71.267 ops/s
Iteration   5: 70.174 ops/s
Iteration   6: 66.406 ops/s
Iteration   7: 64.655 ops/s
Iteration   8: 69.203 ops/s
Iteration   9: 69.326 ops/s
Iteration  10: 70.121 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  69.981 ±(99.9%) 1.443 ops/s [Average]
  (min, avg, max) = (64.655, 69.981, 71.345), stdev = 1.662
  CI (99.9%): [68.538, 71.425] (assumes normal distribution)


# Run complete. Total time: 00:13:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt   Score   Error  Units
Serialization.dsljson              thrpt   20  95.595 ± 0.184  ops/s
Serialization.dsljson_reflection   thrpt   20  95.604 ± 0.189  ops/s
Serialization.gson                 thrpt   20  16.942 ± 0.515  ops/s
Serialization.jackson              thrpt   20  72.440 ± 0.532  ops/s
Serialization.jackson_afterburner  thrpt   20  69.981 ± 1.443  ops/s
