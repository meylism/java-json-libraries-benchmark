# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 567.446 ops/s
# Warmup Iteration   2: 645.674 ops/s
# Warmup Iteration   3: 589.449 ops/s
# Warmup Iteration   4: 599.433 ops/s
# Warmup Iteration   5: 583.021 ops/s
Iteration   1: 570.747 ops/s
Iteration   2: 632.226 ops/s
Iteration   3: 624.032 ops/s
Iteration   4: 644.915 ops/s
Iteration   5: 657.573 ops/s
Iteration   6: 656.465 ops/s
Iteration   7: 653.520 ops/s
Iteration   8: 654.743 ops/s
Iteration   9: 659.421 ops/s
Iteration  10: 658.510 ops/s

# Run progress: 10.00% complete, ETA 00:12:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 662.687 ops/s
# Warmup Iteration   2: 665.440 ops/s
# Warmup Iteration   3: 649.528 ops/s
# Warmup Iteration   4: 639.206 ops/s
# Warmup Iteration   5: 620.600 ops/s
Iteration   1: 674.632 ops/s
Iteration   2: 688.403 ops/s
Iteration   3: 692.987 ops/s
Iteration   4: 682.822 ops/s
Iteration   5: 636.126 ops/s
Iteration   6: 651.773 ops/s
Iteration   7: 668.270 ops/s
Iteration   8: 615.843 ops/s
Iteration   9: 624.346 ops/s
Iteration  10: 635.185 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  649.127 ?(99.9%) 24.526 ops/s [Average]
  (min, avg, max) = (570.747, 649.127, 692.987), stdev = 28.245
  CI (99.9%): [624.601, 673.654] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:58
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 597.486 ops/s
# Warmup Iteration   2: 634.712 ops/s
# Warmup Iteration   3: 663.716 ops/s
# Warmup Iteration   4: 644.500 ops/s
# Warmup Iteration   5: 616.199 ops/s
Iteration   1: 662.871 ops/s
Iteration   2: 645.878 ops/s
Iteration   3: 634.862 ops/s
Iteration   4: 615.618 ops/s
Iteration   5: 624.549 ops/s
Iteration   6: 650.939 ops/s
Iteration   7: 659.323 ops/s
Iteration   8: 665.439 ops/s
Iteration   9: 665.877 ops/s
Iteration  10: 665.316 ops/s

# Run progress: 30.00% complete, ETA 00:09:35
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 653.330 ops/s
# Warmup Iteration   2: 673.233 ops/s
# Warmup Iteration   3: 657.009 ops/s
# Warmup Iteration   4: 636.749 ops/s
# Warmup Iteration   5: 664.849 ops/s
Iteration   1: 669.860 ops/s
Iteration   2: 673.617 ops/s
Iteration   3: 671.949 ops/s
Iteration   4: 672.940 ops/s
Iteration   5: 672.151 ops/s
Iteration   6: 673.731 ops/s
Iteration   7: 667.194 ops/s
Iteration   8: 672.053 ops/s
Iteration   9: 669.945 ops/s
Iteration  10: 649.449 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  659.178 ?(99.9%) 14.860 ops/s [Average]
  (min, avg, max) = (615.618, 659.178, 673.731), stdev = 17.112
  CI (99.9%): [644.318, 674.038] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:13
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 537.130 ops/s
# Warmup Iteration   2: 565.062 ops/s
# Warmup Iteration   3: 557.403 ops/s
# Warmup Iteration   4: 579.416 ops/s
# Warmup Iteration   5: 561.926 ops/s
Iteration   1: 556.254 ops/s
Iteration   2: 546.644 ops/s
Iteration   3: 555.774 ops/s
Iteration   4: 535.735 ops/s
Iteration   5: 553.429 ops/s
Iteration   6: 558.208 ops/s
Iteration   7: 590.727 ops/s
Iteration   8: 594.642 ops/s
Iteration   9: 599.392 ops/s
Iteration  10: 598.311 ops/s

# Run progress: 50.00% complete, ETA 00:06:51
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 556.622 ops/s
# Warmup Iteration   2: 591.786 ops/s
# Warmup Iteration   3: 571.541 ops/s
# Warmup Iteration   4: 554.801 ops/s
# Warmup Iteration   5: 520.134 ops/s
Iteration   1: 540.950 ops/s
Iteration   2: 529.798 ops/s
Iteration   3: 518.368 ops/s
Iteration   4: 522.460 ops/s
Iteration   5: 558.384 ops/s
Iteration   6: 540.011 ops/s
Iteration   7: 568.129 ops/s
Iteration   8: 539.167 ops/s
Iteration   9: 521.849 ops/s
Iteration  10: 545.879 ops/s


Result "com.meylism.databind.Serialization.gson":
  553.705 ?(99.9%) 21.996 ops/s [Average]
  (min, avg, max) = (518.368, 553.705, 599.392), stdev = 25.331
  CI (99.9%): [531.709, 575.702] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:29
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 566.835 ops/s
# Warmup Iteration   2: 648.695 ops/s
# Warmup Iteration   3: 597.293 ops/s
# Warmup Iteration   4: 589.411 ops/s
# Warmup Iteration   5: 611.599 ops/s
Iteration   1: 656.801 ops/s
Iteration   2: 654.758 ops/s
Iteration   3: 565.943 ops/s
Iteration   4: 598.288 ops/s
Iteration   5: 620.309 ops/s
Iteration   6: 573.780 ops/s
Iteration   7: 608.189 ops/s
Iteration   8: 625.232 ops/s
Iteration   9: 615.062 ops/s
Iteration  10: 615.617 ops/s

# Run progress: 70.00% complete, ETA 00:04:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 591.731 ops/s
# Warmup Iteration   2: 584.253 ops/s
# Warmup Iteration   3: 584.753 ops/s
# Warmup Iteration   4: 583.980 ops/s
# Warmup Iteration   5: 597.941 ops/s
Iteration   1: 606.247 ops/s
Iteration   2: 580.201 ops/s
Iteration   3: 580.799 ops/s
Iteration   4: 616.661 ops/s
Iteration   5: 640.519 ops/s
Iteration   6: 642.637 ops/s
Iteration   7: 641.475 ops/s
Iteration   8: 638.043 ops/s
Iteration   9: 641.368 ops/s
Iteration  10: 640.723 ops/s


Result "com.meylism.databind.Serialization.jackson":
  618.133 ?(99.9%) 23.706 ops/s [Average]
  (min, avg, max) = (565.943, 618.133, 656.801), stdev = 27.300
  CI (99.9%): [594.427, 641.839] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
600.627 ops/s
# Warmup Iteration   2: 584.015 ops/s
# Warmup Iteration   3: 586.484 ops/s
# Warmup Iteration   4: 612.597 ops/s
# Warmup Iteration   5: 590.225 ops/s
Iteration   1: 593.034 ops/s
Iteration   2: 623.942 ops/s
Iteration   3: 616.609 ops/s
Iteration   4: 621.885 ops/s
Iteration   5: 623.793 ops/s
Iteration   6: 614.246 ops/s
Iteration   7: 583.254 ops/s
Iteration   8: 638.804 ops/s
Iteration   9: 602.635 ops/s
Iteration  10: 613.122 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
557.351 ops/s
# Warmup Iteration   2: 550.876 ops/s
# Warmup Iteration   3: 572.490 ops/s
# Warmup Iteration   4: 566.254 ops/s
# Warmup Iteration   5: 572.182 ops/s
Iteration   1: 565.038 ops/s
Iteration   2: 581.040 ops/s
Iteration   3: 554.353 ops/s
Iteration   4: 589.066 ops/s
Iteration   5: 565.206 ops/s
Iteration   6: 562.042 ops/s
Iteration   7: 562.985 ops/s
Iteration   8: 567.347 ops/s
Iteration   9: 559.995 ops/s
Iteration  10: 592.294 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  591.535 ?(99.9%) 22.897 ops/s [Average]
  (min, avg, max) = (554.353, 591.535, 638.804), stdev = 26.368
  CI (99.9%): [568.638, 614.431] (assumes normal distribution)


# Run complete. Total time: 00:13:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt    Score    Error  Units
Serialization.dsljson              thrpt   20  649.127 ? 24.526  ops/s
Serialization.dsljson_reflection   thrpt   20  659.178 ? 14.860  ops/s
Serialization.gson                 thrpt   20  553.705 ? 21.996  ops/s
Serialization.jackson              thrpt   20  618.133 ? 23.706  ops/s
Serialization.jackson_afterburner  thrpt   20  591.535 ? 22.897  ops/s
