# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1888.752 ops/s
# Warmup Iteration   2: 2078.423 ops/s
# Warmup Iteration   3: 1935.216 ops/s
# Warmup Iteration   4: 1962.923 ops/s
# Warmup Iteration   5: 1962.038 ops/s
Iteration   1: 1984.584 ops/s
Iteration   2: 2084.378 ops/s
Iteration   3: 2103.349 ops/s
Iteration   4: 2100.723 ops/s
Iteration   5: 2101.742 ops/s
Iteration   6: 2100.263 ops/s
Iteration   7: 2092.563 ops/s
Iteration   8: 2001.414 ops/s
Iteration   9: 1878.400 ops/s
Iteration  10: 1875.024 ops/s

# Run progress: 10.00% complete, ETA 00:12:20
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2069.078 ops/s
# Warmup Iteration   2: 2129.640 ops/s
# Warmup Iteration   3: 2038.837 ops/s
# Warmup Iteration   4: 2132.922 ops/s
# Warmup Iteration   5: 2146.806 ops/s
Iteration   1: 2066.609 ops/s
Iteration   2: 1908.767 ops/s
Iteration   3: 1946.944 ops/s
Iteration   4: 1957.991 ops/s
Iteration   5: 1968.612 ops/s
Iteration   6: 2124.550 ops/s
Iteration   7: 2146.003 ops/s
Iteration   8: 2157.707 ops/s
Iteration   9: 2153.876 ops/s
Iteration  10: 2037.270 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  2039.538 ?(99.9%) 80.031 ops/s [Average]
  (min, avg, max) = (1875.024, 2039.538, 2157.707), stdev = 92.164
  CI (99.9%): [1959.507, 2119.570] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:57
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1768.960 ops/s
# Warmup Iteration   2: 1963.581 ops/s
# Warmup Iteration   3: 2046.255 ops/s
# Warmup Iteration   4: 1947.329 ops/s
# Warmup Iteration   5: 1970.743 ops/s
Iteration   1: 2044.576 ops/s
Iteration   2: 2052.557 ops/s
Iteration   3: 1950.759 ops/s
Iteration   4: 1918.671 ops/s
Iteration   5: 1915.811 ops/s
Iteration   6: 1995.806 ops/s
Iteration   7: 1971.114 ops/s
Iteration   8: 1981.281 ops/s
Iteration   9: 1907.147 ops/s
Iteration  10: 1836.894 ops/s

# Run progress: 30.00% complete, ETA 00:09:35
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1969.932 ops/s
# Warmup Iteration   2: 2098.227 ops/s
# Warmup Iteration   3: 2098.081 ops/s
# Warmup Iteration   4: 2103.322 ops/s
# Warmup Iteration   5: 2023.035 ops/s
Iteration   1: 1966.638 ops/s
Iteration   2: 1907.132 ops/s
Iteration   3: 1912.923 ops/s
Iteration   4: 1864.477 ops/s
Iteration   5: 1885.054 ops/s
Iteration   6: 1860.108 ops/s
Iteration   7: 1872.008 ops/s
Iteration   8: 1893.067 ops/s
Iteration   9: 1872.433 ops/s
Iteration  10: 1905.032 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  1925.674 ?(99.9%) 52.100 ops/s [Average]
  (min, avg, max) = (1836.894, 1925.674, 2052.557), stdev = 59.998
  CI (99.9%): [1873.575, 1977.774] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:13
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 985.390 ops/s
# Warmup Iteration   2: 1057.605 ops/s
# Warmup Iteration   3: 1157.515 ops/s
# Warmup Iteration   4: 1051.547 ops/s
# Warmup Iteration   5: 1078.666 ops/s
Iteration   1: 1012.575 ops/s
Iteration   2: 1052.887 ops/s
Iteration   3: 1053.259 ops/s
Iteration   4: 1085.090 ops/s
Iteration   5: 1035.852 ops/s
Iteration   6: 1034.001 ops/s
Iteration   7: 1016.093 ops/s
Iteration   8: 1082.645 ops/s
Iteration   9: 1051.843 ops/s
Iteration  10: 1070.579 ops/s

# Run progress: 50.00% complete, ETA 00:06:50
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 456.720 ops/s
# Warmup Iteration   2: 588.590 ops/s
# Warmup Iteration   3: 596.117 ops/s
# Warmup Iteration   4: 620.579 ops/s
# Warmup Iteration   5: 625.560 ops/s
Iteration   1: 624.275 ops/s
Iteration   2: 588.979 ops/s
Iteration   3: 585.299 ops/s
Iteration   4: 570.826 ops/s
Iteration   5: 619.699 ops/s
Iteration   6: 608.149 ops/s
Iteration   7: 595.393 ops/s
Iteration   8: 609.762 ops/s
Iteration   9: 615.686 ops/s
Iteration  10: 621.528 ops/s


Result "com.meylism.databind.Deserialization.gson":
  826.721 ?(99.9%) 199.324 ops/s [Average]
  (min, avg, max) = (570.826, 826.721, 1085.090), stdev = 229.542
  CI (99.9%): [627.397, 1026.045] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:28
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1668.788 ops/s
# Warmup Iteration   2: 1729.113 ops/s
# Warmup Iteration   3: 1735.245 ops/s
# Warmup Iteration   4: 1687.734 ops/s
# Warmup Iteration   5: 1676.835 ops/s
Iteration   1: 1742.818 ops/s
Iteration   2: 1731.776 ops/s
Iteration   3: 1728.755 ops/s
Iteration   4: 1728.342 ops/s
Iteration   5: 1735.217 ops/s
Iteration   6: 1735.013 ops/s
Iteration   7: 1732.946 ops/s
Iteration   8: 1746.370 ops/s
Iteration   9: 1738.987 ops/s
Iteration  10: 1734.619 ops/s

# Run progress: 70.00% complete, ETA 00:04:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1956.734 ops/s
# Warmup Iteration   2: 1916.587 ops/s
# Warmup Iteration   3: 1926.964 ops/s
# Warmup Iteration   4: 1925.149 ops/s
# Warmup Iteration   5: 2172.016 ops/s
Iteration   1: 2148.333 ops/s
Iteration   2: 2185.433 ops/s
Iteration   3: 2193.478 ops/s
Iteration   4: 2176.069 ops/s
Iteration   5: 2202.258 ops/s
Iteration   6: 2206.061 ops/s
Iteration   7: 2206.029 ops/s
Iteration   8: 1991.302 ops/s
Iteration   9: 2104.236 ops/s
Iteration  10: 2158.421 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  1946.323 ?(99.9%) 192.017 ops/s [Average]
  (min, avg, max) = (1728.342, 1946.323, 2206.061), stdev = 221.127
  CI (99.9%): [1754.307, 2138.340] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1717.691 ops/s
# Warmup Iteration   2: 1923.734 ops/s
# Warmup Iteration   3: 1873.229 ops/s
# Warmup Iteration   4: 1923.604 ops/s
# Warmup Iteration   5: 1976.783 ops/s
Iteration   1: 1900.125 ops/s
Iteration   2: 1911.521 ops/s
Iteration   3: 1844.070 ops/s
Iteration   4: 1959.623 ops/s
Iteration   5: 1953.388 ops/s
Iteration   6: 1976.776 ops/s
Iteration   7: 2014.219 ops/s
Iteration   8: 2013.126 ops/s
Iteration   9: 1970.808 ops/s
Iteration  10: 1996.254 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
2119.660 ops/s
# Warmup Iteration   2: 2213.841 ops/s
# Warmup Iteration   3: 2204.322 ops/s
# Warmup Iteration   4: 2216.915 ops/s
# Warmup Iteration   5: 2227.565 ops/s
Iteration   1: 2218.780 ops/s
Iteration   2: 2189.520 ops/s
Iteration   3: 2126.265 ops/s
Iteration   4: 2122.035 ops/s
Iteration   5: 2140.616 ops/s
Iteration   6: 2137.759 ops/s
Iteration   7: 2182.458 ops/s
Iteration   8: 2201.219 ops/s
Iteration   9: 2219.200 ops/s
Iteration  10: 2202.925 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  2064.034 ?(99.9%) 105.803 ops/s [Average]
  (min, avg, max) = (1844.070, 2064.034, 2219.200), stdev = 121.843
  CI (99.9%): [1958.231, 2169.837] (assumes normal distribution)


# Run complete. Total time: 00:13:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  2039.538 ?  80.031  ops/s
Deserialization.dsljson_reflection   thrpt   20  1925.674 ?  52.100  ops/s
Deserialization.gson                 thrpt   20   826.721 ? 199.324  ops/s
Deserialization.jackson              thrpt   20  1946.323 ? 192.017  ops/s
Deserialization.jackson_afterburner  thrpt   20  2064.034 ? 105.803  ops/s
