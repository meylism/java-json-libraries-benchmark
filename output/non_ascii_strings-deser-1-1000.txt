# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1820.851 ops/s
# Warmup Iteration   2: 1988.984 ops/s
# Warmup Iteration   3: 1886.226 ops/s
# Warmup Iteration   4: 1886.152 ops/s
# Warmup Iteration   5: 1806.106 ops/s
Iteration   1: 1819.475 ops/s
Iteration   2: 1848.433 ops/s
Iteration   3: 1808.625 ops/s
Iteration   4: 1839.009 ops/s
Iteration   5: 1859.629 ops/s
Iteration   6: 1777.441 ops/s
Iteration   7: 1818.050 ops/s
Iteration   8: 1803.831 ops/s
Iteration   9: 1783.724 ops/s
Iteration  10: 1803.007 ops/s

# Run progress: 10.00% complete, ETA 00:08:24
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1564.344 ops/s
# Warmup Iteration   2: 1653.894 ops/s
# Warmup Iteration   3: 1603.568 ops/s
# Warmup Iteration   4: 1671.420 ops/s
# Warmup Iteration   5: 1636.279 ops/s
Iteration   1: 1590.236 ops/s
Iteration   2: 1614.216 ops/s
Iteration   3: 1635.749 ops/s
Iteration   4: 1586.614 ops/s
Iteration   5: 1629.132 ops/s
Iteration   6: 1705.714 ops/s
Iteration   7: 1725.053 ops/s
Iteration   8: 1780.843 ops/s
Iteration   9: 1637.764 ops/s
Iteration  10: 1771.477 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  1741.901 ?(99.9%) 80.607 ops/s [Average]
  (min, avg, max) = (1586.614, 1741.901, 1859.629), stdev = 92.828
  CI (99.9%): [1661.294, 1822.509] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:29
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1875.493 ops/s
# Warmup Iteration   2: 1988.976 ops/s
# Warmup Iteration   3: 1993.314 ops/s
# Warmup Iteration   4: 1883.433 ops/s
# Warmup Iteration   5: 1947.672 ops/s
Iteration   1: 1955.317 ops/s
Iteration   2: 1947.805 ops/s
Iteration   3: 1972.045 ops/s
Iteration   4: 1943.342 ops/s
Iteration   5: 1970.860 ops/s
Iteration   6: 1977.060 ops/s
Iteration   7: 1992.919 ops/s
Iteration   8: 1991.016 ops/s
Iteration   9: 1986.811 ops/s
Iteration  10: 1911.562 ops/s

# Run progress: 30.00% complete, ETA 00:06:32
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1858.112 ops/s
# Warmup Iteration   2: 1973.141 ops/s
# Warmup Iteration   3: 1987.335 ops/s
# Warmup Iteration   4: 1943.371 ops/s
# Warmup Iteration   5: 1988.287 ops/s
Iteration   1: 1986.257 ops/s
Iteration   2: 1985.554 ops/s
Iteration   3: 1989.055 ops/s
Iteration   4: 1992.233 ops/s
Iteration   5: 1991.390 ops/s
Iteration   6: 1981.174 ops/s
Iteration   7: 1994.312 ops/s
Iteration   8: 1988.366 ops/s
Iteration   9: 2003.569 ops/s
Iteration  10: 1994.104 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  1977.738 ?(99.9%) 19.441 ops/s [Average]
  (min, avg, max) = (1911.562, 1977.738, 2003.569), stdev = 22.388
  CI (99.9%): [1958.297, 1997.178] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:36
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 993.481 ops/s
# Warmup Iteration   2: 1192.391 ops/s
# Warmup Iteration   3: 1213.748 ops/s
# Warmup Iteration   4: 1208.252 ops/s
# Warmup Iteration   5: 1212.266 ops/s
Iteration   1: 1209.045 ops/s
Iteration   2: 1209.635 ops/s
Iteration   3: 1211.570 ops/s
Iteration   4: 1203.802 ops/s
Iteration   5: 1213.778 ops/s
Iteration   6: 1213.058 ops/s
Iteration   7: 1218.308 ops/s
Iteration   8: 1218.161 ops/s
Iteration   9: 1210.718 ops/s
Iteration  10: 1214.512 ops/s

# Run progress: 50.00% complete, ETA 00:04:40
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 501.248 ops/s
# Warmup Iteration   2: 560.312 ops/s
# Warmup Iteration   3: 576.291 ops/s
# Warmup Iteration   4: 607.897 ops/s
# Warmup Iteration   5: 607.094 ops/s
Iteration   1: 611.018 ops/s
Iteration   2: 605.302 ops/s
Iteration   3: 607.062 ops/s
Iteration   4: 611.952 ops/s
Iteration   5: 606.864 ops/s
Iteration   6: 606.810 ops/s
Iteration   7: 608.591 ops/s
Iteration   8: 606.625 ops/s
Iteration   9: 606.331 ops/s
Iteration  10: 608.770 ops/s


Result "com.meylism.databind.Deserialization.gson":
  910.096 ?(99.9%) 269.217 ops/s [Average]
  (min, avg, max) = (605.302, 910.096, 1218.308), stdev = 310.031
  CI (99.9%): [640.878, 1179.313] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2058.687 ops/s
# Warmup Iteration   2: 2230.517 ops/s
# Warmup Iteration   3: 2171.567 ops/s
# Warmup Iteration   4: 2249.600 ops/s
# Warmup Iteration   5: 2255.712 ops/s
Iteration   1: 2278.646 ops/s
Iteration   2: 2268.949 ops/s
Iteration   3: 2271.306 ops/s
Iteration   4: 2266.891 ops/s
Iteration   5: 2261.749 ops/s
Iteration   6: 2253.479 ops/s
Iteration   7: 2265.177 ops/s
Iteration   8: 2259.776 ops/s
Iteration   9: 2255.490 ops/s
Iteration  10: 2264.133 ops/s

# Run progress: 70.00% complete, ETA 00:02:48
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2028.125 ops/s
# Warmup Iteration   2: 2246.176 ops/s
# Warmup Iteration   3: 2184.684 ops/s
# Warmup Iteration   4: 2214.323 ops/s
# Warmup Iteration   5: 2238.940 ops/s
Iteration   1: 2234.421 ops/s
Iteration   2: 2199.847 ops/s
Iteration   3: 2194.811 ops/s
Iteration   4: 2198.619 ops/s
Iteration   5: 2187.484 ops/s
Iteration   6: 2239.069 ops/s
Iteration   7: 2236.085 ops/s
Iteration   8: 2208.620 ops/s
Iteration   9: 2185.304 ops/s
Iteration  10: 2232.674 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  2238.126 ?(99.9%) 27.219 ops/s [Average]
  (min, avg, max) = (2185.304, 2238.126, 2278.646), stdev = 31.346
  CI (99.9%): [2210.907, 2265.346] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
2122.804 ops/s
# Warmup Iteration   2: 2279.141 ops/s
# Warmup Iteration   3: 2280.680 ops/s
# Warmup Iteration   4: 2285.247 ops/s
# Warmup Iteration   5: 2266.012 ops/s
Iteration   1: 2288.752 ops/s
Iteration   2: 2288.394 ops/s
Iteration   3: 2293.552 ops/s
Iteration   4: 2305.384 ops/s
Iteration   5: 2297.317 ops/s
Iteration   6: 2280.995 ops/s
Iteration   7: 2290.640 ops/s
Iteration   8: 2290.373 ops/s
Iteration   9: 2287.124 ops/s
Iteration  10: 2284.089 ops/s

# Run progress: 90.00% complete, ETA 00:00:56
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
2134.974 ops/s
# Warmup Iteration   2: 2245.653 ops/s
# Warmup Iteration   3: 2240.421 ops/s
# Warmup Iteration   4: 2245.417 ops/s
# Warmup Iteration   5: 2013.706 ops/s
Iteration   1: 2167.258 ops/s
Iteration   2: 2205.325 ops/s
Iteration   3: 2248.917 ops/s
Iteration   4: 2242.736 ops/s
Iteration   5: 2247.104 ops/s
Iteration   6: 2238.931 ops/s
Iteration   7: 2241.037 ops/s
Iteration   8: 2249.944 ops/s
Iteration   9: 2236.268 ops/s
Iteration  10: 2237.660 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  2261.090 ?(99.9%) 30.830 ops/s [Average]
  (min, avg, max) = (2167.258, 2261.090, 2305.384), stdev = 35.504
  CI (99.9%): [2230.260, 2291.920] (assumes normal distribution)


# Run complete. Total time: 00:09:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  1741.901 ?  80.607  ops/s
Deserialization.dsljson_reflection   thrpt   20  1977.738 ?  19.441  ops/s
Deserialization.gson                 thrpt   20   910.096 ? 269.217  ops/s
Deserialization.jackson              thrpt   20  2238.126 ?  27.219  ops/s
Deserialization.jackson_afterburner  thrpt   20  2261.090 ?  30.830  ops/s
