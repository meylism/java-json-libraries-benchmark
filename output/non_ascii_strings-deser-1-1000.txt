# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1670.344 ops/s
# Warmup Iteration   2: 2011.727 ops/s
# Warmup Iteration   3: 1929.643 ops/s
# Warmup Iteration   4: 1883.469 ops/s
# Warmup Iteration   5: 1830.785 ops/s
Iteration   1: 1845.409 ops/s
Iteration   2: 1876.618 ops/s
Iteration   3: 1836.149 ops/s
Iteration   4: 1801.451 ops/s
Iteration   5: 1759.935 ops/s
Iteration   6: 1874.762 ops/s
Iteration   7: 1861.488 ops/s
Iteration   8: 1840.809 ops/s
Iteration   9: 1811.635 ops/s
Iteration  10: 1827.539 ops/s

# Run progress: 10.00% complete, ETA 00:12:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1807.149 ops/s
# Warmup Iteration   2: 1948.913 ops/s
# Warmup Iteration   3: 1965.107 ops/s
# Warmup Iteration   4: 1845.133 ops/s
# Warmup Iteration   5: 1985.663 ops/s
Iteration   1: 1993.032 ops/s
Iteration   2: 1999.201 ops/s
Iteration   3: 2070.925 ops/s
Iteration   4: 2069.973 ops/s
Iteration   5: 2059.745 ops/s
Iteration   6: 1949.521 ops/s
Iteration   7: 1959.346 ops/s
Iteration   8: 1922.949 ops/s
Iteration   9: 2105.304 ops/s
Iteration  10: 2105.913 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  1928.585 ?(99.9%) 96.047 ops/s [Average]
  (min, avg, max) = (1759.935, 1928.585, 2105.913), stdev = 110.607
  CI (99.9%): [1832.539, 2024.632] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:58
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1990.904 ops/s
# Warmup Iteration   2: 1906.920 ops/s
# Warmup Iteration   3: 2066.582 ops/s
# Warmup Iteration   4: 1993.095 ops/s
# Warmup Iteration   5: 1924.005 ops/s
Iteration   1: 1928.143 ops/s
Iteration   2: 1934.462 ops/s
Iteration   3: 2082.175 ops/s
Iteration   4: 2079.198 ops/s
Iteration   5: 2083.976 ops/s
Iteration   6: 2077.261 ops/s
Iteration   7: 2072.885 ops/s
Iteration   8: 1980.675 ops/s
Iteration   9: 1822.328 ops/s
Iteration  10: 1872.047 ops/s

# Run progress: 30.00% complete, ETA 00:09:36
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1906.270 ops/s
# Warmup Iteration   2: 1955.628 ops/s
# Warmup Iteration   3: 1948.293 ops/s
# Warmup Iteration   4: 1950.586 ops/s
# Warmup Iteration   5: 2069.985 ops/s
Iteration   1: 1980.579 ops/s
Iteration   2: 1843.793 ops/s
Iteration   3: 1879.772 ops/s
Iteration   4: 1901.499 ops/s
Iteration   5: 1847.629 ops/s
Iteration   6: 1843.886 ops/s
Iteration   7: 1891.038 ops/s
Iteration   8: 2025.223 ops/s
Iteration   9: 2073.261 ops/s
Iteration  10: 2089.615 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  1965.472 ?(99.9%) 86.312 ops/s [Average]
  (min, avg, max) = (1822.328, 1965.472, 2089.615), stdev = 99.397
  CI (99.9%): [1879.160, 2051.785] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:13
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 427.102 ops/s
# Warmup Iteration   2: 584.543 ops/s
# Warmup Iteration   3: 562.767 ops/s
# Warmup Iteration   4: 536.373 ops/s
# Warmup Iteration   5: 576.648 ops/s
Iteration   1: 588.045 ops/s
Iteration   2: 580.988 ops/s
Iteration   3: 588.031 ops/s
Iteration   4: 586.191 ops/s
Iteration   5: 586.069 ops/s
Iteration   6: 585.935 ops/s
Iteration   7: 585.210 ops/s
Iteration   8: 586.120 ops/s
Iteration   9: 586.524 ops/s
Iteration  10: 588.542 ops/s

# Run progress: 50.00% complete, ETA 00:06:51
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 492.764 ops/s
# Warmup Iteration   2: 520.067 ops/s
# Warmup Iteration   3: 519.176 ops/s
# Warmup Iteration   4: 578.012 ops/s
# Warmup Iteration   5: 569.979 ops/s
Iteration   1: 583.422 ops/s
Iteration   2: 583.085 ops/s
Iteration   3: 562.835 ops/s
Iteration   4: 562.825 ops/s
Iteration   5: 579.557 ops/s
Iteration   6: 560.749 ops/s
Iteration   7: 535.836 ops/s
Iteration   8: 556.637 ops/s
Iteration   9: 557.326 ops/s
Iteration  10: 528.828 ops/s


Result "com.meylism.databind.Deserialization.gson":
  573.638 ?(99.9%) 15.714 ops/s [Average]
  (min, avg, max) = (528.828, 573.638, 588.542), stdev = 18.096
  CI (99.9%): [557.924, 589.351] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:29
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1961.429 ops/s
# Warmup Iteration   2: 2070.526 ops/s
# Warmup Iteration   3: 2003.325 ops/s
# Warmup Iteration   4: 2049.044 ops/s
# Warmup Iteration   5: 2001.946 ops/s
Iteration   1: 2049.449 ops/s
Iteration   2: 2129.346 ops/s
Iteration   3: 2052.555 ops/s
Iteration   4: 2060.906 ops/s
Iteration   5: 2040.021 ops/s
Iteration   6: 2025.193 ops/s
Iteration   7: 2102.132 ops/s
Iteration   8: 1965.654 ops/s
Iteration   9: 1964.000 ops/s
Iteration  10: 2122.590 ops/s

# Run progress: 70.00% complete, ETA 00:04:07
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1715.588 ops/s
# Warmup Iteration   2: 1909.431 ops/s
# Warmup Iteration   3: 1937.078 ops/s
# Warmup Iteration   4: 1938.490 ops/s
# Warmup Iteration   5: 1803.871 ops/s
Iteration   1: 2020.687 ops/s
Iteration   2: 2005.334 ops/s
Iteration   3: 1947.450 ops/s
Iteration   4: 1904.658 ops/s
Iteration   5: 1917.711 ops/s
Iteration   6: 2044.830 ops/s
Iteration   7: 1928.458 ops/s
Iteration   8: 1877.145 ops/s
Iteration   9: 1890.640 ops/s
Iteration  10: 1941.867 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  1999.531 ?(99.9%) 66.805 ops/s [Average]
  (min, avg, max) = (1877.145, 1999.531, 2129.346), stdev = 76.932
  CI (99.9%): [1932.727, 2066.336] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1693.234 ops/s
# Warmup Iteration   2: 1852.622 ops/s
# Warmup Iteration   3: 1876.063 ops/s
# Warmup Iteration   4: 1850.385 ops/s
# Warmup Iteration   5: 1871.278 ops/s
Iteration   1: 1876.575 ops/s
Iteration   2: 1873.754 ops/s
Iteration   3: 1865.703 ops/s
Iteration   4: 1737.597 ops/s
Iteration   5: 1670.434 ops/s
Iteration   6: 1706.688 ops/s
Iteration   7: 1744.400 ops/s
Iteration   8: 1775.297 ops/s
Iteration   9: 1787.595 ops/s
Iteration  10: 1831.639 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1904.906 ops/s
# Warmup Iteration   2: 2031.452 ops/s
# Warmup Iteration   3: 2043.333 ops/s
# Warmup Iteration   4: 2054.382 ops/s
# Warmup Iteration   5: 1983.609 ops/s
Iteration   1: 2053.388 ops/s
Iteration   2: 2061.413 ops/s
Iteration   3: 2095.073 ops/s
Iteration   4: 2048.740 ops/s
Iteration   5: 2080.095 ops/s
Iteration   6: 2002.751 ops/s
Iteration   7: 1967.688 ops/s
Iteration   8: 1964.245 ops/s
Iteration   9: 2143.044 ops/s
Iteration  10: 2189.968 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  1923.804 ?(99.9%) 136.459 ops/s [Average]
  (min, avg, max) = (1670.434, 1923.804, 2189.968), stdev = 157.147
  CI (99.9%): [1787.345, 2060.264] (assumes normal distribution)


# Run complete. Total time: 00:13:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  1928.585 ?  96.047  ops/s
Deserialization.dsljson_reflection   thrpt   20  1965.472 ?  86.312  ops/s
Deserialization.gson                 thrpt   20   573.638 ?  15.714  ops/s
Deserialization.jackson              thrpt   20  1999.531 ?  66.805  ops/s
Deserialization.jackson_afterburner  thrpt   20  1923.804 ? 136.459  ops/s
