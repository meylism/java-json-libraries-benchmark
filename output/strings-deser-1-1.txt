# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: 6272073.064 ops/s
# Warmup Iteration   2: 6913981.114 ops/s
# Warmup Iteration   3: 6556472.318 ops/s
# Warmup Iteration   4: 6794254.914 ops/s
# Warmup Iteration   5: 7022520.262 ops/s
Iteration   1: 6944658.370 ops/s
Iteration   2: 6902099.595 ops/s
Iteration   3: 7059333.890 ops/s
Iteration   4: 6484250.342 ops/s
Iteration   5: 6705982.525 ops/s
Iteration   6: 6480524.759 ops/s
Iteration   7: 6214676.420 ops/s
Iteration   8: 6747700.533 ops/s
Iteration   9: 6877194.663 ops/s
Iteration  10: 6707684.029 ops/s

# Run progress: 10.00% complete, ETA 00:12:10
# Fork: 2 of 2
# Warmup Iteration   1: 7153493.244 ops/s
# Warmup Iteration   2: 7274143.836 ops/s
# Warmup Iteration   3: 7574375.217 ops/s
# Warmup Iteration   4: 7440131.725 ops/s
# Warmup Iteration   5: 7129739.658 ops/s
Iteration   1: 6965313.601 ops/s
Iteration   2: 7365912.961 ops/s
Iteration   3: 7506512.755 ops/s
Iteration   4: 7438081.363 ops/s
Iteration   5: 7498832.139 ops/s
Iteration   6: 7291864.741 ops/s
Iteration   7: 7265180.807 ops/s
Iteration   8: 7539103.385 ops/s
Iteration   9: 7430298.471 ops/s
Iteration  10: 7594704.258 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  7050995.480 ?(99.9%) 355515.094 ops/s [Average]
  (min, avg, max) = (6214676.420, 7050995.480, 7594704.258), stdev = 409411.710
  CI (99.9%): [6695480.387, 7406510.574] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:48
# Fork: 1 of 2
# Warmup Iteration   1: 4549588.129 ops/s
# Warmup Iteration   2: 4803617.216 ops/s
# Warmup Iteration   3: 4835041.692 ops/s
# Warmup Iteration   4: 4919969.349 ops/s
# Warmup Iteration   5: 4823822.946 ops/s
Iteration   1: 4720283.375 ops/s
Iteration   2: 4597101.038 ops/s
Iteration   3: 4767687.129 ops/s
Iteration   4: 4778001.198 ops/s
Iteration   5: 4699710.111 ops/s
Iteration   6: 4770335.153 ops/s
Iteration   7: 4610516.146 ops/s
Iteration   8: 4600721.212 ops/s
Iteration   9: 4779972.840 ops/s
Iteration  10: 4684880.813 ops/s

# Run progress: 30.00% complete, ETA 00:09:27
# Fork: 2 of 2
# Warmup Iteration   1: 4541444.427 ops/s
# Warmup Iteration   2: 4794509.324 ops/s
# Warmup Iteration   3: 4627220.859 ops/s
# Warmup Iteration   4: 4748739.705 ops/s
# Warmup Iteration   5: 4892340.256 ops/s
Iteration   1: 4877246.742 ops/s
Iteration   2: 4543748.286 ops/s
Iteration   3: 4817206.773 ops/s
Iteration   4: 4804273.097 ops/s
Iteration   5: 4918256.026 ops/s
Iteration   6: 4743114.801 ops/s
Iteration   7: 4859018.728 ops/s
Iteration   8: 4916700.443 ops/s
Iteration   9: 4880056.832 ops/s
Iteration  10: 4890564.373 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  4762969.756 ?(99.9%) 98144.991 ops/s [Average]
  (min, avg, max) = (4543748.286, 4762969.756, 4918256.026), stdev = 113023.918
  CI (99.9%): [4664824.764, 4861114.747] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:06
# Fork: 1 of 2
# Warmup Iteration   1: 2489945.372 ops/s
# Warmup Iteration   2: 2694830.052 ops/s
# Warmup Iteration   3: 2651539.179 ops/s
# Warmup Iteration   4: 2668067.962 ops/s
# Warmup Iteration   5: 2705487.717 ops/s
Iteration   1: 2704702.474 ops/s
Iteration   2: 2777456.510 ops/s
Iteration   3: 2758632.318 ops/s
Iteration   4: 2660264.453 ops/s
Iteration   5: 2747721.721 ops/s
Iteration   6: 2726675.899 ops/s
Iteration   7: 2601450.880 ops/s
Iteration   8: 2707902.032 ops/s
Iteration   9: 2798625.654 ops/s
Iteration  10: 2704529.293 ops/s

# Run progress: 50.00% complete, ETA 00:06:45
# Fork: 2 of 2
# Warmup Iteration   1: 2214109.363 ops/s
# Warmup Iteration   2: 2373199.651 ops/s
# Warmup Iteration   3: 2507952.311 ops/s
# Warmup Iteration   4: 2524916.040 ops/s
# Warmup Iteration   5: 2515787.606 ops/s
Iteration   1: 2526700.825 ops/s
Iteration   2: 2548595.796 ops/s
Iteration   3: 2551384.996 ops/s
Iteration   4: 2499688.970 ops/s
Iteration   5: 2491415.609 ops/s
Iteration   6: 2454691.563 ops/s
Iteration   7: 2396335.838 ops/s
Iteration   8: 2423296.030 ops/s
Iteration   9: 2421331.941 ops/s
Iteration  10: 2416777.962 ops/s


Result "com.meylism.databind.Deserialization.gson":
  2595909.038 ?(99.9%) 119917.981 ops/s [Average]
  (min, avg, max) = (2396335.838, 2595909.038, 2798625.654), stdev = 138097.726
  CI (99.9%): [2475991.057, 2715827.019] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:24
# Fork: 1 of 2
# Warmup Iteration   1: 7103012.027 ops/s
# Warmup Iteration   2: 7607772.020 ops/s
# Warmup Iteration   3: 7788984.920 ops/s
# Warmup Iteration   4: 7786150.088 ops/s
# Warmup Iteration   5: 7731770.286 ops/s
Iteration   1: 7954690.028 ops/s
Iteration   2: 7426693.825 ops/s
Iteration   3: 7679864.599 ops/s
Iteration   4: 7817520.568 ops/s
Iteration   5: 7639691.584 ops/s
Iteration   6: 7566261.314 ops/s
Iteration   7: 7674601.865 ops/s
Iteration   8: 7637274.621 ops/s
Iteration   9: 7196028.253 ops/s
Iteration  10: 7458062.446 ops/s

# Run progress: 70.00% complete, ETA 00:04:03
# Fork: 2 of 2
# Warmup Iteration   1: 6315683.130 ops/s
# Warmup Iteration   2: 6885729.905 ops/s
# Warmup Iteration   3: 7196673.912 ops/s
# Warmup Iteration   4: 7225440.916 ops/s
# Warmup Iteration   5: 6911450.982 ops/s
Iteration   1: 6913962.329 ops/s
Iteration   2: 7119902.409 ops/s
Iteration   3: 6877711.670 ops/s
Iteration   4: 7129031.386 ops/s
Iteration   5: 7246757.617 ops/s
Iteration   6: 7214825.532 ops/s
Iteration   7: 7152478.720 ops/s
Iteration   8: 7233207.693 ops/s
Iteration   9: 7097375.912 ops/s
Iteration  10: 6878648.108 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  7345729.524 ?(99.9%) 277119.947 ops/s [Average]
  (min, avg, max) = (6877711.670, 7345729.524, 7954690.028), stdev = 319131.743
  CI (99.9%): [7068609.577, 7622849.471] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:42
# Fork: 1 of 2
# Warmup Iteration   1: 6900583.409 ops/s
# Warmup Iteration   2: 7418966.591 ops/s
# Warmup Iteration   3: 7762796.583 ops/s
# Warmup Iteration   4: 7668454.276 ops/s
# Warmup Iteration   5: 7580780.286 ops/s
Iteration   1: 7611568.016 ops/s
Iteration   2: 7601320.562 ops/s
Iteration   3: 7673313.850 ops/s
Iteration   4: 7695666.957 ops/s
Iteration   5: 7327988.259 ops/s
Iteration   6: 7821806.795 ops/s
Iteration   7: 7469302.383 ops/s
Iteration   8: 7669665.456 ops/s
Iteration   9: 7430173.479 ops/s
Iteration  10: 7603037.195 ops/s

# Run progress: 90.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 6292887.890 ops/s
# Warmup Iteration   2: 6695921.613 ops/s
# Warmup Iteration   3: 6770299.609 ops/s
# Warmup Iteration   4: 6654570.590 ops/s
# Warmup Iteration   5: 6609471.620 ops/s
Iteration   1: 6439609.102 ops/s
Iteration   2: 6412522.222 ops/s
Iteration   3: 6729824.182 ops/s
Iteration   4: 6395166.017 ops/s
Iteration   5: 6489440.506 ops/s
Iteration   6: 6505245.362 ops/s
Iteration   7: 6364923.689 ops/s
Iteration   8: 6775041.884 ops/s
Iteration   9: 6377409.073 ops/s
Iteration  10: 6446470.524 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  7041974.776 ?(99.9%) 503559.504 ops/s [Average]
  (min, avg, max) = (6364923.689, 7041974.776, 7821806.795), stdev = 579899.873
  CI (99.9%): [6538415.272, 7545534.279] (assumes normal distribution)


# Run complete. Total time: 00:13:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score        Error  Units
Deserialization.dsljson              thrpt   20  7050995.480 ? 355515.094  ops/s
Deserialization.dsljson_reflection   thrpt   20  4762969.756 ?  98144.991  ops/s
Deserialization.gson                 thrpt   20  2595909.038 ? 119917.981  ops/s
Deserialization.jackson              thrpt   20  7345729.524 ? 277119.947  ops/s
Deserialization.jackson_afterburner  thrpt   20  7041974.776 ? 503559.504  ops/s
