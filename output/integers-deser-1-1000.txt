# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 250.205 ops/s
# Warmup Iteration   2: 237.261 ops/s
# Warmup Iteration   3: 265.829 ops/s
# Warmup Iteration   4: 252.011 ops/s
# Warmup Iteration   5: 249.152 ops/s
Iteration   1: 256.161 ops/s
Iteration   2: 263.547 ops/s
Iteration   3: 286.562 ops/s
Iteration   4: 273.448 ops/s
Iteration   5: 277.480 ops/s
Iteration   6: 275.123 ops/s
Iteration   7: 273.308 ops/s
Iteration   8: 259.363 ops/s
Iteration   9: 270.982 ops/s
Iteration  10: 287.343 ops/s

# Run progress: 10.00% complete, ETA 00:12:32
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 259.481 ops/s
# Warmup Iteration   2: 267.595 ops/s
# Warmup Iteration   3: 269.734 ops/s
# Warmup Iteration   4: 258.314 ops/s
# Warmup Iteration   5: 251.754 ops/s
Iteration   1: 251.506 ops/s
Iteration   2: 263.927 ops/s
Iteration   3: 245.802 ops/s
Iteration   4: 247.997 ops/s
Iteration   5: 252.850 ops/s
Iteration   6: 267.571 ops/s
Iteration   7: 250.079 ops/s
Iteration   8: 266.430 ops/s
Iteration   9: 243.639 ops/s
Iteration  10: 239.605 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  262.636 ?(99.9%) 12.150 ops/s [Average]
  (min, avg, max) = (239.605, 262.636, 287.343), stdev = 13.992
  CI (99.9%): [250.486, 274.786] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:09
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 222.039 ops/s
# Warmup Iteration   2: 250.042 ops/s
# Warmup Iteration   3: 248.145 ops/s
# Warmup Iteration   4: 229.124 ops/s
# Warmup Iteration   5: 238.168 ops/s
Iteration   1: 234.240 ops/s
Iteration   2: 251.300 ops/s
Iteration   3: 228.755 ops/s
Iteration   4: 243.926 ops/s
Iteration   5: 230.572 ops/s
Iteration   6: 224.552 ops/s
Iteration   7: 232.565 ops/s
Iteration   8: 237.894 ops/s
Iteration   9: 242.203 ops/s
Iteration  10: 245.610 ops/s

# Run progress: 30.00% complete, ETA 00:09:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 259.179 ops/s
# Warmup Iteration   2: 273.096 ops/s
# Warmup Iteration   3: 287.435 ops/s
# Warmup Iteration   4: 284.802 ops/s
# Warmup Iteration   5: 276.977 ops/s
Iteration   1: 269.322 ops/s
Iteration   2: 269.655 ops/s
Iteration   3: 249.607 ops/s
Iteration   4: 259.481 ops/s
Iteration   5: 266.147 ops/s
Iteration   6: 284.454 ops/s
Iteration   7: 271.899 ops/s
Iteration   8: 273.677 ops/s
Iteration   9: 273.470 ops/s
Iteration  10: 273.104 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  253.122 ?(99.9%) 16.088 ops/s [Average]
  (min, avg, max) = (224.552, 253.122, 284.454), stdev = 18.526
  CI (99.9%): [237.034, 269.209] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:24
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 245.932 ops/s
# Warmup Iteration   2: 253.648 ops/s
# Warmup Iteration   3: 252.215 ops/s
# Warmup Iteration   4: 249.555 ops/s
# Warmup Iteration   5: 238.014 ops/s
Iteration   1: 252.847 ops/s
Iteration   2: 252.880 ops/s
Iteration   3: 253.244 ops/s
Iteration   4: 251.086 ops/s
Iteration   5: 253.193 ops/s
Iteration   6: 252.886 ops/s
Iteration   7: 253.188 ops/s
Iteration   8: 255.356 ops/s
Iteration   9: 253.783 ops/s
Iteration  10: 235.618 ops/s

# Run progress: 50.00% complete, ETA 00:06:59
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 227.241 ops/s
# Warmup Iteration   2: 242.969 ops/s
# Warmup Iteration   3: 244.953 ops/s
# Warmup Iteration   4: 245.922 ops/s
# Warmup Iteration   5: 246.127 ops/s
Iteration   1: 247.441 ops/s
Iteration   2: 247.690 ops/s
Iteration   3: 247.565 ops/s
Iteration   4: 243.899 ops/s
Iteration   5: 242.856 ops/s
Iteration   6: 242.912 ops/s
Iteration   7: 248.146 ops/s
Iteration   8: 240.438 ops/s
Iteration   9: 208.297 ops/s
Iteration  10: 233.583 ops/s


Result "com.meylism.databind.Deserialization.gson":
  245.845 ?(99.9%) 9.389 ops/s [Average]
  (min, avg, max) = (208.297, 245.845, 255.356), stdev = 10.812
  CI (99.9%): [236.456, 255.234] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:35
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 493.190 ops/s
# Warmup Iteration   2: 511.094 ops/s
# Warmup Iteration   3: 514.866 ops/s
# Warmup Iteration   4: 513.317 ops/s
# Warmup Iteration   5: 515.365 ops/s
Iteration   1: 508.385 ops/s
Iteration   2: 495.773 ops/s
Iteration   3: 509.360 ops/s
Iteration   4: 514.439 ops/s
Iteration   5: 514.734 ops/s
Iteration   6: 512.627 ops/s
Iteration   7: 517.680 ops/s
Iteration   8: 520.775 ops/s
Iteration   9: 512.643 ops/s
Iteration  10: 516.546 ops/s

# Run progress: 70.00% complete, ETA 00:04:10
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 495.129 ops/s
# Warmup Iteration   2: 512.557 ops/s
# Warmup Iteration   3: 515.577 ops/s
# Warmup Iteration   4: 511.741 ops/s
# Warmup Iteration   5: 514.343 ops/s
Iteration   1: 518.671 ops/s
Iteration   2: 514.101 ops/s
Iteration   3: 515.105 ops/s
Iteration   4: 513.836 ops/s
Iteration   5: 517.141 ops/s
Iteration   6: 515.714 ops/s
Iteration   7: 519.234 ops/s
Iteration   8: 520.931 ops/s
Iteration   9: 495.945 ops/s
Iteration  10: 506.180 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  512.991 ?(99.9%) 6.088 ops/s [Average]
  (min, avg, max) = (495.773, 512.991, 520.931), stdev = 7.010
  CI (99.9%): [506.903, 519.078] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:46
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
484.539 ops/s
# Warmup Iteration   2: 504.534 ops/s
# Warmup Iteration   3: 510.562 ops/s
# Warmup Iteration   4: 512.012 ops/s
# Warmup Iteration   5: 510.322 ops/s
Iteration   1: 506.689 ops/s
Iteration   2: 511.985 ops/s
Iteration   3: 501.609 ops/s
Iteration   4: 514.345 ops/s
Iteration   5: 505.850 ops/s
Iteration   6: 484.316 ops/s
Iteration   7: 489.850 ops/s
Iteration   8: 491.192 ops/s
Iteration   9: 503.464 ops/s
Iteration  10: 511.404 ops/s

# Run progress: 90.00% complete, ETA 00:01:23
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
512.082 ops/s
# Warmup Iteration   2: 524.352 ops/s
# Warmup Iteration   3: 531.329 ops/s
# Warmup Iteration   4: 524.866 ops/s
# Warmup Iteration   5: 509.749 ops/s
Iteration   1: 508.911 ops/s
Iteration   2: 529.940 ops/s
Iteration   3: 508.110 ops/s
Iteration   4: 502.006 ops/s
Iteration   5: 488.340 ops/s
Iteration   6: 500.351 ops/s
Iteration   7: 527.238 ops/s
Iteration   8: 528.055 ops/s
Iteration   9: 509.508 ops/s
Iteration  10: 510.314 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  506.674 ?(99.9%) 10.941 ops/s [Average]
  (min, avg, max) = (484.316, 506.674, 529.940), stdev = 12.600
  CI (99.9%): [495.733, 517.615] (assumes normal distribution)


# Run complete. Total time: 00:13:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score    Error  Units
Deserialization.dsljson              thrpt   20  262.636 ? 12.150  ops/s
Deserialization.dsljson_reflection   thrpt   20  253.122 ? 16.088  ops/s
Deserialization.gson                 thrpt   20  245.845 ?  9.389  ops/s
Deserialization.jackson              thrpt   20  512.991 ?  6.088  ops/s
Deserialization.jackson_afterburner  thrpt   20  506.674 ? 10.941  ops/s
