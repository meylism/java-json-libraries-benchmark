# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: 9930934.410 ops/s
# Warmup Iteration   2: 10215889.138 ops/s
# Warmup Iteration   3: 10133097.066 ops/s
# Warmup Iteration   4: 9754239.460 ops/s
# Warmup Iteration   5: 10088171.651 ops/s
Iteration   1: 9989929.734 ops/s
Iteration   2: 9459209.364 ops/s
Iteration   3: 9594256.644 ops/s
Iteration   4: 9686141.124 ops/s
Iteration   5: 10299499.548 ops/s
Iteration   6: 9681095.971 ops/s
Iteration   7: 10222468.410 ops/s
Iteration   8: 10338719.530 ops/s
Iteration   9: 10315812.400 ops/s
Iteration  10: 10228352.807 ops/s

# Run progress: 10.00% complete, ETA 00:12:07
# Fork: 2 of 2
# Warmup Iteration   1: 9533684.630 ops/s
# Warmup Iteration   2: 9912291.445 ops/s
# Warmup Iteration   3: 10282402.908 ops/s
# Warmup Iteration   4: 10457511.712 ops/s
# Warmup Iteration   5: 10562633.012 ops/s
Iteration   1: 10566196.114 ops/s
Iteration   2: 10357630.196 ops/s
Iteration   3: 10473462.469 ops/s
Iteration   4: 10548096.473 ops/s
Iteration   5: 10510481.376 ops/s
Iteration   6: 10297587.562 ops/s
Iteration   7: 10288116.967 ops/s
Iteration   8: 10584248.778 ops/s
Iteration   9: 10184743.874 ops/s
Iteration  10: 10494419.394 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  10206023.437 ?(99.9%) 298118.751 ops/s [Average]
  (min, avg, max) = (9459209.364, 10206023.437, 10584248.778), stdev = 343313.997
  CI (99.9%): [9907904.686, 10504142.187] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:46
# Fork: 1 of 2
# Warmup Iteration   1: 10156408.336 ops/s
# Warmup Iteration   2: 10446346.808 ops/s
# Warmup Iteration   3: 10158618.288 ops/s
# Warmup Iteration   4: 10282236.818 ops/s
# Warmup Iteration   5: 10523527.217 ops/s
Iteration   1: 10550859.628 ops/s
Iteration   2: 10655705.582 ops/s
Iteration   3: 10629695.945 ops/s
Iteration   4: 10528163.799 ops/s
Iteration   5: 10586875.801 ops/s
Iteration   6: 10289607.294 ops/s
Iteration   7: 10366175.942 ops/s
Iteration   8: 10405691.271 ops/s
Iteration   9: 10267452.516 ops/s
Iteration  10: 10281005.537 ops/s

# Run progress: 30.00% complete, ETA 00:09:25
# Fork: 2 of 2
# Warmup Iteration   1: 9923840.871 ops/s
# Warmup Iteration   2: 9821232.361 ops/s
# Warmup Iteration   3: 10026014.001 ops/s
# Warmup Iteration   4: 10103977.073 ops/s
# Warmup Iteration   5: 10095356.196 ops/s
Iteration   1: 10124763.406 ops/s
Iteration   2: 10074632.262 ops/s
Iteration   3: 9769167.107 ops/s
Iteration   4: 10064432.491 ops/s
Iteration   5: 10128049.009 ops/s
Iteration   6: 9993432.833 ops/s
Iteration   7: 10000906.233 ops/s
Iteration   8: 10024291.901 ops/s
Iteration   9: 9990470.332 ops/s
Iteration  10: 10041760.391 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  10238656.964 ?(99.9%) 222249.179 ops/s [Average]
  (min, avg, max) = (9769167.107, 10238656.964, 10655705.582), stdev = 255942.485
  CI (99.9%): [10016407.785, 10460906.143] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:04
# Fork: 1 of 2
# Warmup Iteration   1: 453335.635 ops/s
# Warmup Iteration   2: 379508.447 ops/s
# Warmup Iteration   3: 391244.345 ops/s
# Warmup Iteration   4: 379852.180 ops/s
# Warmup Iteration   5: 384145.942 ops/s
Iteration   1: 366496.772 ops/s
Iteration   2: 378634.626 ops/s
Iteration   3: 368274.387 ops/s
Iteration   4: 380327.952 ops/s
Iteration   5: 392846.977 ops/s
Iteration   6: 388707.115 ops/s
Iteration   7: 380557.731 ops/s
Iteration   8: 370334.721 ops/s
Iteration   9: 389622.495 ops/s
Iteration  10: 402917.112 ops/s

# Run progress: 50.00% complete, ETA 00:06:43
# Fork: 2 of 2
# Warmup Iteration   1: 887608.757 ops/s
# Warmup Iteration   2: 947702.496 ops/s
# Warmup Iteration   3: 970213.171 ops/s
# Warmup Iteration   4: 932194.542 ops/s
# Warmup Iteration   5: 950129.300 ops/s
Iteration   1: 918874.839 ops/s
Iteration   2: 919297.482 ops/s
Iteration   3: 886733.702 ops/s
Iteration   4: 875336.327 ops/s
Iteration   5: 914514.179 ops/s
Iteration   6: 967109.326 ops/s
Iteration   7: 977217.222 ops/s
Iteration   8: 961341.050 ops/s
Iteration   9: 965722.407 ops/s
Iteration  10: 979517.736 ops/s


Result "com.meylism.databind.Serialization.gson":
  659219.208 ?(99.9%) 248251.399 ops/s [Average]
  (min, avg, max) = (366496.772, 659219.208, 979517.736), stdev = 285886.681
  CI (99.9%): [410967.809, 907470.607] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:23
# Fork: 1 of 2
# Warmup Iteration   1: 6923174.772 ops/s
# Warmup Iteration   2: 6044455.804 ops/s
# Warmup Iteration   3: 5911819.330 ops/s
# Warmup Iteration   4: 5877159.223 ops/s
# Warmup Iteration   5: 5927687.074 ops/s
Iteration   1: 6033133.188 ops/s
Iteration   2: 6012436.389 ops/s
Iteration   3: 6283144.407 ops/s
Iteration   4: 6226071.628 ops/s
Iteration   5: 6190181.582 ops/s
Iteration   6: 6335731.849 ops/s
Iteration   7: 6210188.600 ops/s
Iteration   8: 5899668.246 ops/s
Iteration   9: 6016297.744 ops/s
Iteration  10: 5990316.126 ops/s

# Run progress: 70.00% complete, ETA 00:04:02
# Fork: 2 of 2
# Warmup Iteration   1: 6495345.586 ops/s
# Warmup Iteration   2: 6166417.681 ops/s
# Warmup Iteration   3: 6092150.119 ops/s
# Warmup Iteration   4: 6067877.272 ops/s
# Warmup Iteration   5: 5939608.635 ops/s
Iteration   1: 5972166.541 ops/s
Iteration   2: 5944195.771 ops/s
Iteration   3: 5912592.946 ops/s
Iteration   4: 6048490.748 ops/s
Iteration   5: 6057133.194 ops/s
Iteration   6: 5823289.587 ops/s
Iteration   7: 5764133.411 ops/s
Iteration   8: 5908403.780 ops/s
Iteration   9: 6102165.464 ops/s
Iteration  10: 5924267.198 ops/s


Result "com.meylism.databind.Serialization.jackson":
  6032700.420 ?(99.9%) 132623.966 ops/s [Average]
  (min, avg, max) = (5764133.411, 6032700.420, 6335731.849), stdev = 152729.957
  CI (99.9%): [5900076.454, 6165324.386] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 1.8.0_262, OpenJDK 64-Bit Server VM, 25.262-b10
# VM invoker: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64/jre/bin/java
# VM options: -Xms2g -Xmx8g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:41
# Fork: 1 of 2
# Warmup Iteration   1: 6617638.069 ops/s
# Warmup Iteration   2: 5984839.100 ops/s
# Warmup Iteration   3: 6016110.510 ops/s
# Warmup Iteration   4: 5923349.497 ops/s
# Warmup Iteration   5: 6113317.796 ops/s
Iteration   1: 5875988.219 ops/s
Iteration   2: 6244483.402 ops/s
Iteration   3: 6046922.042 ops/s
Iteration   4: 5816861.733 ops/s
Iteration   5: 6170552.766 ops/s
Iteration   6: 6120638.280 ops/s
Iteration   7: 6031983.038 ops/s
Iteration   8: 6101520.368 ops/s
Iteration   9: 5869258.725 ops/s
Iteration  10: 5847844.483 ops/s

# Run progress: 90.00% complete, ETA 00:01:20
# Fork: 2 of 2
# Warmup Iteration   1: 7256807.936 ops/s
# Warmup Iteration   2: 6418958.418 ops/s
# Warmup Iteration   3: 6482046.832 ops/s
# Warmup Iteration   4: 6522377.952 ops/s
# Warmup Iteration   5: 6430871.394 ops/s
Iteration   1: 6427935.902 ops/s
Iteration   2: 6489808.782 ops/s
Iteration   3: 6259127.033 ops/s
Iteration   4: 6289140.822 ops/s
Iteration   5: 5998968.402 ops/s
Iteration   6: 6350048.540 ops/s
Iteration   7: 6313377.170 ops/s
Iteration   8: 6469783.960 ops/s
Iteration   9: 6523888.721 ops/s
Iteration  10: 6241306.365 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  6174471.938 ?(99.9%) 193680.711 ops/s [Average]
  (min, avg, max) = (5816861.733, 6174471.938, 6523888.721), stdev = 223042.995
  CI (99.9%): [5980791.227, 6368152.649] (assumes normal distribution)


# Run complete. Total time: 00:13:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt         Score        Error  Units
Serialization.dsljson              thrpt   20  10206023.437 ? 298118.751  ops/s
Serialization.dsljson_reflection   thrpt   20  10238656.964 ? 222249.179  ops/s
Serialization.gson                 thrpt   20    659219.208 ? 248251.399  ops/s
Serialization.jackson              thrpt   20   6032700.420 ? 132623.966  ops/s
Serialization.jackson_afterburner  thrpt   20   6174471.938 ? 193680.711  ops/s
