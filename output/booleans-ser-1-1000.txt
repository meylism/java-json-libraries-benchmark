# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1292.671 ops/s
# Warmup Iteration   2: 1311.450 ops/s
# Warmup Iteration   3: 1302.817 ops/s
# Warmup Iteration   4: 1306.881 ops/s
# Warmup Iteration   5: 1325.473 ops/s
Iteration   1: 1310.985 ops/s
Iteration   2: 1318.533 ops/s
Iteration   3: 1325.501 ops/s
Iteration   4: 1314.429 ops/s
Iteration   5: 1281.797 ops/s
Iteration   6: 1303.893 ops/s
Iteration   7: 1317.811 ops/s
Iteration   8: 1318.652 ops/s
Iteration   9: 1312.254 ops/s
Iteration  10: 1309.180 ops/s

# Run progress: 10.00% complete, ETA 00:08:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 962.342 ops/s
# Warmup Iteration   2: 958.037 ops/s
# Warmup Iteration   3: 974.128 ops/s
# Warmup Iteration   4: 962.571 ops/s
# Warmup Iteration   5: 969.494 ops/s
Iteration   1: 970.165 ops/s
Iteration   2: 972.449 ops/s
Iteration   3: 969.924 ops/s
Iteration   4: 973.629 ops/s
Iteration   5: 969.123 ops/s
Iteration   6: 934.494 ops/s
Iteration   7: 957.949 ops/s
Iteration   8: 971.850 ops/s
Iteration   9: 975.591 ops/s
Iteration  10: 970.008 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  1138.911 ?(99.9%) 153.927 ops/s [Average]
  (min, avg, max) = (934.494, 1138.911, 1325.501), stdev = 177.262
  CI (99.9%): [984.984, 1292.837] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:27
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 955.905 ops/s
# Warmup Iteration   2: 959.728 ops/s
# Warmup Iteration   3: 963.809 ops/s
# Warmup Iteration   4: 963.778 ops/s
# Warmup Iteration   5: 964.453 ops/s
Iteration   1: 961.675 ops/s
Iteration   2: 966.876 ops/s
Iteration   3: 966.635 ops/s
Iteration   4: 969.767 ops/s
Iteration   5: 961.599 ops/s
Iteration   6: 961.376 ops/s
Iteration   7: 967.244 ops/s
Iteration   8: 891.436 ops/s
Iteration   9: 925.493 ops/s
Iteration  10: 927.528 ops/s

# Run progress: 30.00% complete, ETA 00:06:31
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1298.795 ops/s
# Warmup Iteration   2: 1320.999 ops/s
# Warmup Iteration   3: 1315.344 ops/s
# Warmup Iteration   4: 1306.272 ops/s
# Warmup Iteration   5: 1311.774 ops/s
Iteration   1: 1303.018 ops/s
Iteration   2: 1302.620 ops/s
Iteration   3: 1286.481 ops/s
Iteration   4: 1281.335 ops/s
Iteration   5: 1261.000 ops/s
Iteration   6: 1230.286 ops/s
Iteration   7: 1316.871 ops/s
Iteration   8: 1313.978 ops/s
Iteration   9: 1168.179 ops/s
Iteration  10: 1213.183 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  1108.829 ?(99.9%) 145.419 ops/s [Average]
  (min, avg, max) = (891.436, 1108.829, 1316.871), stdev = 167.464
  CI (99.9%): [963.411, 1254.248] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:35
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 234.488 ops/s
# Warmup Iteration   2: 246.665 ops/s
# Warmup Iteration   3: 253.875 ops/s
# Warmup Iteration   4: 253.766 ops/s
# Warmup Iteration   5: 237.754 ops/s
Iteration   1: 248.593 ops/s
Iteration   2: 247.490 ops/s
Iteration   3: 246.447 ops/s
Iteration   4: 247.968 ops/s
Iteration   5: 249.120 ops/s
Iteration   6: 249.510 ops/s
Iteration   7: 249.033 ops/s
Iteration   8: 248.760 ops/s
Iteration   9: 248.136 ops/s
Iteration  10: 249.082 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 261.269 ops/s
# Warmup Iteration   2: 264.701 ops/s
# Warmup Iteration   3: 264.968 ops/s
# Warmup Iteration   4: 264.977 ops/s
# Warmup Iteration   5: 260.369 ops/s
Iteration   1: 263.667 ops/s
Iteration   2: 261.060 ops/s
Iteration   3: 263.127 ops/s
Iteration   4: 263.593 ops/s
Iteration   5: 260.876 ops/s
Iteration   6: 264.256 ops/s
Iteration   7: 263.401 ops/s
Iteration   8: 265.038 ops/s
Iteration   9: 261.463 ops/s
Iteration  10: 263.405 ops/s


Result "com.meylism.databind.Serialization.gson":
  255.701 ?(99.9%) 6.569 ops/s [Average]
  (min, avg, max) = (246.447, 255.701, 265.038), stdev = 7.565
  CI (99.9%): [249.132, 262.270] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 767.403 ops/s
# Warmup Iteration   2: 786.000 ops/s
# Warmup Iteration   3: 804.800 ops/s
# Warmup Iteration   4: 806.569 ops/s
# Warmup Iteration   5: 806.931 ops/s
Iteration   1: 808.928 ops/s
Iteration   2: 802.148 ops/s
Iteration   3: 807.688 ops/s
Iteration   4: 810.713 ops/s
Iteration   5: 806.554 ops/s
Iteration   6: 806.831 ops/s
Iteration   7: 804.552 ops/s
Iteration   8: 808.908 ops/s
Iteration   9: 802.090 ops/s
Iteration  10: 807.235 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 805.287 ops/s
# Warmup Iteration   2: 764.122 ops/s
# Warmup Iteration   3: 768.142 ops/s
# Warmup Iteration   4: 788.347 ops/s
# Warmup Iteration   5: 800.073 ops/s
Iteration   1: 806.253 ops/s
Iteration   2: 792.379 ops/s
Iteration   3: 799.141 ops/s
Iteration   4: 801.588 ops/s
Iteration   5: 792.906 ops/s
Iteration   6: 787.186 ops/s
Iteration   7: 761.246 ops/s
Iteration   8: 767.101 ops/s
Iteration   9: 779.430 ops/s
Iteration  10: 786.244 ops/s


Result "com.meylism.databind.Serialization.jackson":
  796.956 ?(99.9%) 12.330 ops/s [Average]
  (min, avg, max) = (761.246, 796.956, 810.713), stdev = 14.199
  CI (99.9%): [784.626, 809.286] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
758.136 ops/s
# Warmup Iteration   2: 785.475 ops/s
# Warmup Iteration   3: 788.766 ops/s
# Warmup Iteration   4: 809.266 ops/s
# Warmup Iteration   5: 812.187 ops/s
Iteration   1: 798.139 ops/s
Iteration   2: 808.500 ops/s
Iteration   3: 808.782 ops/s
Iteration   4: 807.752 ops/s
Iteration   5: 809.438 ops/s
Iteration   6: 808.739 ops/s
Iteration   7: 807.545 ops/s
Iteration   8: 809.076 ops/s
Iteration   9: 806.368 ops/s
Iteration  10: 801.923 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
800.129 ops/s
# Warmup Iteration   2: 800.347 ops/s
# Warmup Iteration   3: 790.587 ops/s
# Warmup Iteration   4: 758.767 ops/s
# Warmup Iteration   5: 798.056 ops/s
Iteration   1: 793.007 ops/s
Iteration   2: 807.789 ops/s
Iteration   3: 812.191 ops/s
Iteration   4: 810.599 ops/s
Iteration   5: 808.642 ops/s
Iteration   6: 812.808 ops/s
Iteration   7: 812.908 ops/s
Iteration   8: 809.315 ops/s
Iteration   9: 811.440 ops/s
Iteration  10: 809.040 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  807.700 ?(99.9%) 4.232 ops/s [Average]
  (min, avg, max) = (793.007, 807.700, 812.908), stdev = 4.874
  CI (99.9%): [803.468, 811.932] (assumes normal distribution)


# Run complete. Total time: 00:09:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20  1138.911 ? 153.927  ops/s
Serialization.dsljson_reflection   thrpt   20  1108.829 ? 145.419  ops/s
Serialization.gson                 thrpt   20   255.701 ?   6.569  ops/s
Serialization.jackson              thrpt   20   796.956 ?  12.330  ops/s
Serialization.jackson_afterburner  thrpt   20   807.700 ?   4.232  ops/s
