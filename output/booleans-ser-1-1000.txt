# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 556.881 ops/s
# Warmup Iteration   2: 549.018 ops/s
# Warmup Iteration   3: 518.852 ops/s
# Warmup Iteration   4: 518.916 ops/s
# Warmup Iteration   5: 558.589 ops/s
Iteration   1: 524.210 ops/s
Iteration   2: 511.684 ops/s
Iteration   3: 514.469 ops/s
Iteration   4: 515.309 ops/s
Iteration   5: 528.994 ops/s
Iteration   6: 513.931 ops/s
Iteration   7: 531.397 ops/s
Iteration   8: 526.005 ops/s
Iteration   9: 518.794 ops/s
Iteration  10: 563.066 ops/s

# Run progress: 10.00% complete, ETA 00:12:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 896.201 ops/s
# Warmup Iteration   2: 924.333 ops/s
# Warmup Iteration   3: 912.299 ops/s
# Warmup Iteration   4: 911.705 ops/s
# Warmup Iteration   5: 910.841 ops/s
Iteration   1: 973.243 ops/s
Iteration   2: 984.466 ops/s
Iteration   3: 979.609 ops/s
Iteration   4: 985.042 ops/s
Iteration   5: 963.982 ops/s
Iteration   6: 914.628 ops/s
Iteration   7: 914.204 ops/s
Iteration   8: 971.890 ops/s
Iteration   9: 977.402 ops/s
Iteration  10: 986.886 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  744.961 ?(99.9%) 197.056 ops/s [Average]
  (min, avg, max) = (511.684, 744.961, 986.886), stdev = 226.930
  CI (99.9%): [547.904, 942.017] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:57
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 979.772 ops/s
# Warmup Iteration   2: 988.944 ops/s
# Warmup Iteration   3: 988.070 ops/s
# Warmup Iteration   4: 983.687 ops/s
# Warmup Iteration   5: 943.221 ops/s
Iteration   1: 939.963 ops/s
Iteration   2: 881.312 ops/s
Iteration   3: 949.514 ops/s
Iteration   4: 985.947 ops/s
Iteration   5: 960.162 ops/s
Iteration   6: 920.430 ops/s
Iteration   7: 911.496 ops/s
Iteration   8: 940.753 ops/s
Iteration   9: 953.877 ops/s
Iteration  10: 953.417 ops/s

# Run progress: 30.00% complete, ETA 00:09:35
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1299.989 ops/s
# Warmup Iteration   2: 1330.480 ops/s
# Warmup Iteration   3: 1275.006 ops/s
# Warmup Iteration   4: 1192.102 ops/s
# Warmup Iteration   5: 1309.776 ops/s
Iteration   1: 1321.003 ops/s
Iteration   2: 1318.709 ops/s
Iteration   3: 1374.671 ops/s
Iteration   4: 1418.126 ops/s
Iteration   5: 1386.948 ops/s
Iteration   6: 1377.587 ops/s
Iteration   7: 1395.583 ops/s
Iteration   8: 1405.629 ops/s
Iteration   9: 1411.236 ops/s
Iteration  10: 1402.744 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  1160.455 ?(99.9%) 198.570 ops/s [Average]
  (min, avg, max) = (881.312, 1160.455, 1418.126), stdev = 228.674
  CI (99.9%): [961.885, 1359.026] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:12
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 290.143 ops/s
# Warmup Iteration   2: 280.460 ops/s
# Warmup Iteration   3: 270.427 ops/s
# Warmup Iteration   4: 275.186 ops/s
# Warmup Iteration   5: 290.867 ops/s
Iteration   1: 305.042 ops/s
Iteration   2: 309.962 ops/s
Iteration   3: 300.802 ops/s
Iteration   4: 279.495 ops/s
Iteration   5: 279.280 ops/s
Iteration   6: 278.557 ops/s
Iteration   7: 295.063 ops/s
Iteration   8: 284.148 ops/s
Iteration   9: 277.628 ops/s
Iteration  10: 278.369 ops/s

# Run progress: 50.00% complete, ETA 00:06:51
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 286.402 ops/s
# Warmup Iteration   2: 294.463 ops/s
# Warmup Iteration   3: 280.657 ops/s
# Warmup Iteration   4: 282.590 ops/s
# Warmup Iteration   5: 298.727 ops/s
Iteration   1: 300.034 ops/s
Iteration   2: 308.616 ops/s
Iteration   3: 290.872 ops/s
Iteration   4: 288.997 ops/s
Iteration   5: 280.872 ops/s
Iteration   6: 291.854 ops/s
Iteration   7: 268.552 ops/s
Iteration   8: 291.704 ops/s
Iteration   9: 314.641 ops/s
Iteration  10: 313.586 ops/s


Result "com.meylism.databind.Serialization.gson":
  291.904 ?(99.9%) 11.845 ops/s [Average]
  (min, avg, max) = (268.552, 291.904, 314.641), stdev = 13.641
  CI (99.9%): [280.058, 303.749] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:29
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 799.812 ops/s
# Warmup Iteration   2: 814.875 ops/s
# Warmup Iteration   3: 813.101 ops/s
# Warmup Iteration   4: 813.527 ops/s
# Warmup Iteration   5: 791.490 ops/s
Iteration   1: 794.138 ops/s
Iteration   2: 763.103 ops/s
Iteration   3: 724.981 ops/s
Iteration   4: 800.459 ops/s
Iteration   5: 813.174 ops/s
Iteration   6: 812.739 ops/s
Iteration   7: 811.096 ops/s
Iteration   8: 722.419 ops/s
Iteration   9: 759.744 ops/s
Iteration  10: 760.570 ops/s

# Run progress: 70.00% complete, ETA 00:04:07
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 798.568 ops/s
# Warmup Iteration   2: 763.474 ops/s
# Warmup Iteration   3: 838.882 ops/s
# Warmup Iteration   4: 839.950 ops/s
# Warmup Iteration   5: 837.312 ops/s
Iteration   1: 786.894 ops/s
Iteration   2: 726.061 ops/s
Iteration   3: 733.853 ops/s
Iteration   4: 718.359 ops/s
Iteration   5: 735.516 ops/s
Iteration   6: 765.208 ops/s
Iteration   7: 774.782 ops/s
Iteration   8: 737.039 ops/s
Iteration   9: 742.152 ops/s
Iteration  10: 723.821 ops/s


Result "com.meylism.databind.Serialization.jackson":
  760.305 ?(99.9%) 28.842 ops/s [Average]
  (min, avg, max) = (718.359, 760.305, 813.174), stdev = 33.215
  CI (99.9%): [731.463, 789.148] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
679.283 ops/s
# Warmup Iteration   2: 689.039 ops/s
# Warmup Iteration   3: 739.939 ops/s
# Warmup Iteration   4: 711.496 ops/s
# Warmup Iteration   5: 717.362 ops/s
Iteration   1: 698.947 ops/s
Iteration   2: 721.949 ops/s
Iteration   3: 689.932 ops/s
Iteration   4: 714.252 ops/s
Iteration   5: 697.971 ops/s
Iteration   6: 745.668 ops/s
Iteration   7: 711.958 ops/s
Iteration   8: 749.126 ops/s
Iteration   9: 726.471 ops/s
Iteration  10: 757.251 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
723.111 ops/s
# Warmup Iteration   2: 766.346 ops/s
# Warmup Iteration   3: 716.343 ops/s
# Warmup Iteration   4: 716.138 ops/s
# Warmup Iteration   5: 724.066 ops/s
Iteration   1: 709.763 ops/s
Iteration   2: 712.653 ops/s
Iteration   3: 739.908 ops/s
Iteration   4: 718.061 ops/s
Iteration   5: 716.942 ops/s
Iteration   6: 706.432 ops/s
Iteration   7: 704.058 ops/s
Iteration   8: 723.731 ops/s
Iteration   9: 711.411 ops/s
Iteration  10: 692.618 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  717.455 ?(99.9%) 16.166 ops/s [Average]
  (min, avg, max) = (689.932, 717.455, 757.251), stdev = 18.617
  CI (99.9%): [701.289, 733.621] (assumes normal distribution)


# Run complete. Total time: 00:13:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20   744.961 ? 197.056  ops/s
Serialization.dsljson_reflection   thrpt   20  1160.455 ? 198.570  ops/s
Serialization.gson                 thrpt   20   291.904 ?  11.845  ops/s
Serialization.jackson              thrpt   20   760.305 ?  28.842  ops/s
Serialization.jackson_afterburner  thrpt   20   717.455 ?  16.166  ops/s
