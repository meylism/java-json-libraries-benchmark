# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3933.948 ops/s
# Warmup Iteration   2: 4116.341 ops/s
# Warmup Iteration   3: 4082.431 ops/s
# Warmup Iteration   4: 4222.896 ops/s
# Warmup Iteration   5: 4220.242 ops/s
Iteration   1: 4231.223 ops/s
Iteration   2: 4076.653 ops/s
Iteration   3: 3632.369 ops/s
Iteration   4: 4109.427 ops/s
Iteration   5: 4187.849 ops/s
Iteration   6: 4160.873 ops/s
Iteration   7: 3884.305 ops/s
Iteration   8: 4126.154 ops/s
Iteration   9: 4166.655 ops/s
Iteration  10: 4225.558 ops/s

# Run progress: 10.00% complete, ETA 00:12:17
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3889.579 ops/s
# Warmup Iteration   2: 4050.127 ops/s
# Warmup Iteration   3: 4015.270 ops/s
# Warmup Iteration   4: 3854.124 ops/s
# Warmup Iteration   5: 3962.122 ops/s
Iteration   1: 3640.390 ops/s
Iteration   2: 4027.128 ops/s
Iteration   3: 3544.067 ops/s
Iteration   4: 3617.824 ops/s
Iteration   5: 3854.134 ops/s
Iteration   6: 3810.080 ops/s
Iteration   7: 3813.487 ops/s
Iteration   8: 4006.414 ops/s
Iteration   9: 4019.183 ops/s
Iteration  10: 4074.300 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  3960.404 ?(99.9%) 191.731 ops/s [Average]
  (min, avg, max) = (3544.067, 3960.404, 4231.223), stdev = 220.797
  CI (99.9%): [3768.673, 4152.134] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:55
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3678.771 ops/s
# Warmup Iteration   2: 3955.781 ops/s
# Warmup Iteration   3: 3804.633 ops/s
# Warmup Iteration   4: 3888.623 ops/s
# Warmup Iteration   5: 3609.847 ops/s
Iteration   1: 3571.884 ops/s
Iteration   2: 3495.984 ops/s
Iteration   3: 3462.270 ops/s
Iteration   4: 3476.177 ops/s
Iteration   5: 3579.536 ops/s
Iteration   6: 3576.267 ops/s
Iteration   7: 3553.837 ops/s
Iteration   8: 3505.922 ops/s
Iteration   9: 3432.775 ops/s
Iteration  10: 3428.850 ops/s

# Run progress: 30.00% complete, ETA 00:09:33
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3644.350 ops/s
# Warmup Iteration   2: 3885.375 ops/s
# Warmup Iteration   3: 3754.824 ops/s
# Warmup Iteration   4: 4053.599 ops/s
# Warmup Iteration   5: 4058.359 ops/s
Iteration   1: 4081.817 ops/s
Iteration   2: 4088.325 ops/s
Iteration   3: 4096.229 ops/s
Iteration   4: 4064.990 ops/s
Iteration   5: 4090.338 ops/s
Iteration   6: 4085.027 ops/s
Iteration   7: 4068.970 ops/s
Iteration   8: 4089.511 ops/s
Iteration   9: 4089.836 ops/s
Iteration  10: 4101.371 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  3796.996 ?(99.9%) 259.637 ops/s [Average]
  (min, avg, max) = (3428.850, 3796.996, 4101.371), stdev = 298.998
  CI (99.9%): [3537.359, 4056.633] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:11
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7837.758 ops/s
# Warmup Iteration   2: 8086.102 ops/s
# Warmup Iteration   3: 8026.277 ops/s
# Warmup Iteration   4: 7696.309 ops/s
# Warmup Iteration   5: 7519.554 ops/s
Iteration   1: 7467.188 ops/s
Iteration   2: 7456.429 ops/s
Iteration   3: 8160.014 ops/s
Iteration   4: 8334.808 ops/s
Iteration   5: 8171.285 ops/s
Iteration   6: 7646.131 ops/s
Iteration   7: 7918.295 ops/s
Iteration   8: 8283.896 ops/s
Iteration   9: 8295.472 ops/s
Iteration  10: 8295.173 ops/s

# Run progress: 50.00% complete, ETA 00:06:49
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7868.725 ops/s
# Warmup Iteration   2: 8408.802 ops/s
# Warmup Iteration   3: 8392.734 ops/s
# Warmup Iteration   4: 8176.121 ops/s
# Warmup Iteration   5: 8401.342 ops/s
Iteration   1: 8432.999 ops/s
Iteration   2: 8388.718 ops/s
Iteration   3: 8081.276 ops/s
Iteration   4: 8008.130 ops/s
Iteration   5: 8463.462 ops/s
Iteration   6: 8420.716 ops/s
Iteration   7: 8433.384 ops/s
Iteration   8: 8458.709 ops/s
Iteration   9: 8418.378 ops/s
Iteration  10: 8423.800 ops/s


Result "com.meylism.databind.Serialization.gson":
  8177.913 ?(99.9%) 281.041 ops/s [Average]
  (min, avg, max) = (7456.429, 8177.913, 8463.462), stdev = 323.647
  CI (99.9%): [7896.872, 8458.954] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:27
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4132.906 ops/s
# Warmup Iteration   2: 4423.414 ops/s
# Warmup Iteration   3: 4059.067 ops/s
# Warmup Iteration   4: 4111.174 ops/s
# Warmup Iteration   5: 4142.953 ops/s
Iteration   1: 3976.791 ops/s
Iteration   2: 4281.439 ops/s
Iteration   3: 4513.299 ops/s
Iteration   4: 4190.741 ops/s
Iteration   5: 4035.241 ops/s
Iteration   6: 4119.608 ops/s
Iteration   7: 4125.678 ops/s
Iteration   8: 4306.786 ops/s
Iteration   9: 4456.732 ops/s
Iteration  10: 4322.398 ops/s

# Run progress: 70.00% complete, ETA 00:04:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3680.103 ops/s
# Warmup Iteration   2: 3789.016 ops/s
# Warmup Iteration   3: 3634.232 ops/s
# Warmup Iteration   4: 3931.015 ops/s
# Warmup Iteration   5: 3937.286 ops/s
Iteration   1: 3940.399 ops/s
Iteration   2: 3948.670 ops/s
Iteration   3: 3947.365 ops/s
Iteration   4: 3766.911 ops/s
Iteration   5: 3700.362 ops/s
Iteration   6: 3809.386 ops/s
Iteration   7: 3915.556 ops/s
Iteration   8: 3943.883 ops/s
Iteration   9: 3938.094 ops/s
Iteration  10: 3941.850 ops/s


Result "com.meylism.databind.Serialization.jackson":
  4059.059 ?(99.9%) 194.655 ops/s [Average]
  (min, avg, max) = (3700.362, 4059.059, 4513.299), stdev = 224.165
  CI (99.9%): [3864.405, 4253.714] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4212.198 ops/s
# Warmup Iteration   2: 4374.532 ops/s
# Warmup Iteration   3: 4447.052 ops/s
# Warmup Iteration   4: 4297.089 ops/s
# Warmup Iteration   5: 4419.738 ops/s
Iteration   1: 4547.124 ops/s
Iteration   2: 4358.937 ops/s
Iteration   3: 4436.287 ops/s
Iteration   4: 4328.327 ops/s
Iteration   5: 4547.241 ops/s
Iteration   6: 4413.766 ops/s
Iteration   7: 4130.304 ops/s
Iteration   8: 4257.974 ops/s
Iteration   9: 4279.581 ops/s
Iteration  10: 4550.471 ops/s

# Run progress: 90.00% complete, ETA 00:01:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3910.972 ops/s
# Warmup Iteration   2: 4153.974 ops/s
# Warmup Iteration   3: 4143.910 ops/s
# Warmup Iteration   4: 4118.492 ops/s
# Warmup Iteration   5: 3906.025 ops/s
Iteration   1: 4027.200 ops/s
Iteration   2: 4209.994 ops/s
Iteration   3: 4258.263 ops/s
Iteration   4: 4228.508 ops/s
Iteration   5: 3931.083 ops/s
Iteration   6: 4101.820 ops/s
Iteration   7: 4241.309 ops/s
Iteration   8: 4241.777 ops/s
Iteration   9: 4236.885 ops/s
Iteration  10: 4242.794 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  4278.482 ?(99.9%) 143.833 ops/s [Average]
  (min, avg, max) = (3931.083, 4278.482, 4550.471), stdev = 165.638
  CI (99.9%): [4134.649, 4422.315] (assumes normal distribution)


# Run complete. Total time: 00:13:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20  3960.404 ? 191.731  ops/s
Serialization.dsljson_reflection   thrpt   20  3796.996 ? 259.637  ops/s
Serialization.gson                 thrpt   20  8177.913 ? 281.041  ops/s
Serialization.jackson              thrpt   20  4059.059 ? 194.655  ops/s
Serialization.jackson_afterburner  thrpt   20  4278.482 ? 143.833  ops/s
