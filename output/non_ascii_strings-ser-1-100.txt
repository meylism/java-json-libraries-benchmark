# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3714.835 ops/s
# Warmup Iteration   2: 3778.341 ops/s
# Warmup Iteration   3: 3641.781 ops/s
# Warmup Iteration   4: 3669.566 ops/s
# Warmup Iteration   5: 3783.436 ops/s
Iteration   1: 3783.360 ops/s
Iteration   2: 3779.478 ops/s
Iteration   3: 3770.596 ops/s
Iteration   4: 3766.795 ops/s
Iteration   5: 3775.455 ops/s
Iteration   6: 3786.136 ops/s
Iteration   7: 3781.010 ops/s
Iteration   8: 3444.912 ops/s
Iteration   9: 3658.950 ops/s
Iteration  10: 3597.320 ops/s

# Run progress: 10.00% complete, ETA 00:08:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3365.952 ops/s
# Warmup Iteration   2: 3599.433 ops/s
# Warmup Iteration   3: 3594.559 ops/s
# Warmup Iteration   4: 3610.482 ops/s
# Warmup Iteration   5: 3579.873 ops/s
Iteration   1: 3446.417 ops/s
Iteration   2: 3436.582 ops/s
Iteration   3: 3383.742 ops/s
Iteration   4: 3425.518 ops/s
Iteration   5: 3620.243 ops/s
Iteration   6: 3580.425 ops/s
Iteration   7: 3554.683 ops/s
Iteration   8: 3576.639 ops/s
Iteration   9: 3505.187 ops/s
Iteration  10: 3668.304 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  3617.088 ?(99.9%) 123.962 ops/s [Average]
  (min, avg, max) = (3383.742, 3617.088, 3786.136), stdev = 142.755
  CI (99.9%): [3493.126, 3741.049] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3676.753 ops/s
# Warmup Iteration   2: 3845.173 ops/s
# Warmup Iteration   3: 3850.613 ops/s
# Warmup Iteration   4: 3825.028 ops/s
# Warmup Iteration   5: 3846.491 ops/s
Iteration   1: 3851.996 ops/s
Iteration   2: 3845.516 ops/s
Iteration   3: 3852.989 ops/s
Iteration   4: 3851.538 ops/s
Iteration   5: 3854.339 ops/s
Iteration   6: 3852.315 ops/s
Iteration   7: 3859.007 ops/s
Iteration   8: 3853.784 ops/s
Iteration   9: 3850.921 ops/s
Iteration  10: 3847.819 ops/s

# Run progress: 30.00% complete, ETA 00:06:31
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3175.941 ops/s
# Warmup Iteration   2: 3268.986 ops/s
# Warmup Iteration   3: 3275.443 ops/s
# Warmup Iteration   4: 3277.006 ops/s
# Warmup Iteration   5: 3313.254 ops/s
Iteration   1: 3289.701 ops/s
Iteration   2: 3344.158 ops/s
Iteration   3: 3278.337 ops/s
Iteration   4: 3351.869 ops/s
Iteration   5: 3288.159 ops/s
Iteration   6: 3311.803 ops/s
Iteration   7: 3367.010 ops/s
Iteration   8: 3691.435 ops/s
Iteration   9: 3782.772 ops/s
Iteration  10: 3723.922 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  3647.469 ?(99.9%) 219.017 ops/s [Average]
  (min, avg, max) = (3278.337, 3647.469, 3859.007), stdev = 252.221
  CI (99.9%): [3428.452, 3866.487] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:35
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5792.902 ops/s
# Warmup Iteration   2: 6109.545 ops/s
# Warmup Iteration   3: 6432.030 ops/s
# Warmup Iteration   4: 6467.777 ops/s
# Warmup Iteration   5: 6496.588 ops/s
Iteration   1: 6460.517 ops/s
Iteration   2: 6404.913 ops/s
Iteration   3: 6451.435 ops/s
Iteration   4: 6462.520 ops/s
Iteration   5: 6457.986 ops/s
Iteration   6: 6453.939 ops/s
Iteration   7: 6425.019 ops/s
Iteration   8: 6446.023 ops/s
Iteration   9: 6461.259 ops/s
Iteration  10: 6470.693 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5807.014 ops/s
# Warmup Iteration   2: 6116.593 ops/s
# Warmup Iteration   3: 5977.842 ops/s
# Warmup Iteration   4: 6008.600 ops/s
# Warmup Iteration   5: 6291.248 ops/s
Iteration   1: 6325.065 ops/s
Iteration   2: 6339.564 ops/s
Iteration   3: 6251.230 ops/s
Iteration   4: 6198.962 ops/s
Iteration   5: 5716.559 ops/s
Iteration   6: 5803.787 ops/s
Iteration   7: 5679.868 ops/s
Iteration   8: 5577.819 ops/s
Iteration   9: 6042.645 ops/s
Iteration  10: 5988.469 ops/s


Result "com.meylism.databind.Serialization.gson":
  6220.914 ?(99.9%) 265.231 ops/s [Average]
  (min, avg, max) = (5577.819, 6220.914, 6470.693), stdev = 305.440
  CI (99.9%): [5955.683, 6486.144] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3637.242 ops/s
# Warmup Iteration   2: 3949.569 ops/s
# Warmup Iteration   3: 3968.212 ops/s
# Warmup Iteration   4: 4126.650 ops/s
# Warmup Iteration   5: 3978.683 ops/s
Iteration   1: 4026.709 ops/s
Iteration   2: 4062.852 ops/s
Iteration   3: 4079.114 ops/s
Iteration   4: 4114.268 ops/s
Iteration   5: 4185.294 ops/s
Iteration   6: 4156.016 ops/s
Iteration   7: 4164.495 ops/s
Iteration   8: 4209.944 ops/s
Iteration   9: 4201.057 ops/s
Iteration  10: 4216.718 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3622.784 ops/s
# Warmup Iteration   2: 3764.970 ops/s
# Warmup Iteration   3: 3767.199 ops/s
# Warmup Iteration   4: 3603.331 ops/s
# Warmup Iteration   5: 3629.013 ops/s
Iteration   1: 3371.924 ops/s
Iteration   2: 3560.702 ops/s
Iteration   3: 3530.728 ops/s
Iteration   4: 3613.612 ops/s
Iteration   5: 3665.222 ops/s
Iteration   6: 3447.253 ops/s
Iteration   7: 3436.114 ops/s
Iteration   8: 3433.001 ops/s
Iteration   9: 3388.446 ops/s
Iteration  10: 3599.536 ops/s


Result "com.meylism.databind.Serialization.jackson":
  3823.150 ?(99.9%) 293.060 ops/s [Average]
  (min, avg, max) = (3371.924, 3823.150, 4216.718), stdev = 337.488
  CI (99.9%): [3530.090, 4116.210] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3469.874 ops/s
# Warmup Iteration   2: 3707.842 ops/s
# Warmup Iteration   3: 3555.933 ops/s
# Warmup Iteration   4: 3646.317 ops/s
# Warmup Iteration   5: 3476.678 ops/s
Iteration   1: 3650.608 ops/s
Iteration   2: 3499.276 ops/s
Iteration   3: 3640.415 ops/s
Iteration   4: 3542.451 ops/s
Iteration   5: 3434.804 ops/s
Iteration   6: 3491.384 ops/s
Iteration   7: 3435.918 ops/s
Iteration   8: 3513.447 ops/s
Iteration   9: 3551.283 ops/s
Iteration  10: 3557.888 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3571.872 ops/s
# Warmup Iteration   2: 3577.358 ops/s
# Warmup Iteration   3: 3588.399 ops/s
# Warmup Iteration   4: 3698.850 ops/s
# Warmup Iteration   5: 3605.947 ops/s
Iteration   1: 3496.187 ops/s
Iteration   2: 3314.744 ops/s
Iteration   3: 3334.181 ops/s
Iteration   4: 3418.362 ops/s
Iteration   5: 3728.425 ops/s
Iteration   6: 3782.519 ops/s
Iteration   7: 3812.059 ops/s
Iteration   8: 3785.491 ops/s
Iteration   9: 3826.548 ops/s
Iteration  10: 3803.898 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  3580.994 ?(99.9%) 141.703 ops/s [Average]
  (min, avg, max) = (3314.744, 3580.994, 3826.548), stdev = 163.185
  CI (99.9%): [3439.292, 3722.697] (assumes normal distribution)


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20  3617.088 ? 123.962  ops/s
Serialization.dsljson_reflection   thrpt   20  3647.469 ? 219.017  ops/s
Serialization.gson                 thrpt   20  6220.914 ? 265.231  ops/s
Serialization.jackson              thrpt   20  3823.150 ? 293.060  ops/s
Serialization.jackson_afterburner  thrpt   20  3580.994 ? 141.703  ops/s
