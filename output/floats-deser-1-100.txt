# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5313.873 ops/s
# Warmup Iteration   2: 5647.514 ops/s
# Warmup Iteration   3: 5618.136 ops/s
# Warmup Iteration   4: 6006.991 ops/s
# Warmup Iteration   5: 5670.566 ops/s
Iteration   1: 5982.250 ops/s
Iteration   2: 5860.010 ops/s
Iteration   3: 5879.492 ops/s
Iteration   4: 5724.099 ops/s
Iteration   5: 5539.790 ops/s
Iteration   6: 5587.778 ops/s
Iteration   7: 5834.770 ops/s
Iteration   8: 5990.081 ops/s
Iteration   9: 5864.782 ops/s
Iteration  10: 5585.084 ops/s

# Run progress: 10.00% complete, ETA 00:12:17
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5319.495 ops/s
# Warmup Iteration   2: 6285.089 ops/s
# Warmup Iteration   3: 6424.874 ops/s
# Warmup Iteration   4: 5830.129 ops/s
# Warmup Iteration   5: 6087.993 ops/s
Iteration   1: 5732.586 ops/s
Iteration   2: 5657.036 ops/s
Iteration   3: 5759.873 ops/s
Iteration   4: 5919.089 ops/s
Iteration   5: 5711.790 ops/s
Iteration   6: 6150.573 ops/s
Iteration   7: 6466.056 ops/s
Iteration   8: 6451.973 ops/s
Iteration   9: 6455.365 ops/s
Iteration  10: 6458.598 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  5930.554 ?(99.9%) 268.156 ops/s [Average]
  (min, avg, max) = (5539.790, 5930.554, 6466.056), stdev = 308.809
  CI (99.9%): [5662.398, 6198.710] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:55
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5442.168 ops/s
# Warmup Iteration   2: 5233.124 ops/s
# Warmup Iteration   3: 5352.030 ops/s
# Warmup Iteration   4: 5862.453 ops/s
# Warmup Iteration   5: 5952.028 ops/s
Iteration   1: 5957.516 ops/s
Iteration   2: 5980.079 ops/s
Iteration   3: 5920.630 ops/s
Iteration   4: 5949.991 ops/s
Iteration   5: 5942.772 ops/s
Iteration   6: 5670.271 ops/s
Iteration   7: 5391.540 ops/s
Iteration   8: 5410.928 ops/s
Iteration   9: 5200.005 ops/s
Iteration  10: 5366.384 ops/s

# Run progress: 30.00% complete, ETA 00:09:33
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5507.711 ops/s
# Warmup Iteration   2: 5687.417 ops/s
# Warmup Iteration   3: 6345.757 ops/s
# Warmup Iteration   4: 6424.339 ops/s
# Warmup Iteration   5: 6104.233 ops/s
Iteration   1: 5905.946 ops/s
Iteration   2: 5855.449 ops/s
Iteration   3: 5686.662 ops/s
Iteration   4: 5726.076 ops/s
Iteration   5: 5909.372 ops/s
Iteration   6: 6000.446 ops/s
Iteration   7: 5944.692 ops/s
Iteration   8: 5871.883 ops/s
Iteration   9: 5832.310 ops/s
Iteration  10: 5621.930 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  5757.244 ?(99.9%) 209.391 ops/s [Average]
  (min, avg, max) = (5200.005, 5757.244, 6000.446), stdev = 241.136
  CI (99.9%): [5547.853, 5966.635] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:11
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 772.829 ops/s
# Warmup Iteration   2: 860.870 ops/s
# Warmup Iteration   3: 895.065 ops/s
# Warmup Iteration   4: 856.075 ops/s
# Warmup Iteration   5: 910.972 ops/s
Iteration   1: 852.836 ops/s
Iteration   2: 846.119 ops/s
Iteration   3: 882.120 ops/s
Iteration   4: 841.047 ops/s
Iteration   5: 853.750 ops/s
Iteration   6: 944.424 ops/s
Iteration   7: 941.701 ops/s
Iteration   8: 945.565 ops/s
Iteration   9: 835.720 ops/s
Iteration  10: 836.798 ops/s

# Run progress: 50.00% complete, ETA 00:06:50
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 820.581 ops/s
# Warmup Iteration   2: 865.785 ops/s
# Warmup Iteration   3: 874.799 ops/s
# Warmup Iteration   4: 893.672 ops/s
# Warmup Iteration   5: 972.873 ops/s
Iteration   1: 984.916 ops/s
Iteration   2: 899.969 ops/s
Iteration   3: 849.145 ops/s
Iteration   4: 863.047 ops/s
Iteration   5: 886.431 ops/s
Iteration   6: 901.947 ops/s
Iteration   7: 856.596 ops/s
Iteration   8: 923.355 ops/s
Iteration   9: 870.905 ops/s
Iteration  10: 893.750 ops/s


Result "com.meylism.databind.Deserialization.gson":
  885.507 ?(99.9%) 37.504 ops/s [Average]
  (min, avg, max) = (835.720, 885.507, 984.916), stdev = 43.189
  CI (99.9%): [848.003, 923.011] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:28
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 905.337 ops/s
# Warmup Iteration   2: 951.274 ops/s
# Warmup Iteration   3: 995.089 ops/s
# Warmup Iteration   4: 981.705 ops/s
# Warmup Iteration   5: 952.326 ops/s
Iteration   1: 913.935 ops/s
Iteration   2: 932.839 ops/s
Iteration   3: 934.859 ops/s
Iteration   4: 950.493 ops/s
Iteration   5: 961.381 ops/s
Iteration   6: 948.544 ops/s
Iteration   7: 956.767 ops/s
Iteration   8: 925.603 ops/s
Iteration   9: 928.472 ops/s
Iteration  10: 1019.665 ops/s

# Run progress: 70.00% complete, ETA 00:04:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 904.395 ops/s
# Warmup Iteration   2: 977.359 ops/s
# Warmup Iteration   3: 936.069 ops/s
# Warmup Iteration   4: 931.323 ops/s
# Warmup Iteration   5: 962.363 ops/s
Iteration   1: 1046.667 ops/s
Iteration   2: 1018.157 ops/s
Iteration   3: 985.485 ops/s
Iteration   4: 970.293 ops/s
Iteration   5: 1015.464 ops/s
Iteration   6: 1026.344 ops/s
Iteration   7: 1060.339 ops/s
Iteration   8: 1063.166 ops/s
Iteration   9: 1064.067 ops/s
Iteration  10: 1056.199 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  988.937 ?(99.9%) 45.706 ops/s [Average]
  (min, avg, max) = (913.935, 988.937, 1064.067), stdev = 52.635
  CI (99.9%): [943.231, 1034.643] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
932.376 ops/s
# Warmup Iteration   2: 974.393 ops/s
# Warmup Iteration   3: 958.490 ops/s
# Warmup Iteration   4: 963.146 ops/s
# Warmup Iteration   5: 1034.414 ops/s
Iteration   1: 1046.783 ops/s
Iteration   2: 1033.938 ops/s
Iteration   3: 1039.896 ops/s
Iteration   4: 1044.603 ops/s
Iteration   5: 1045.315 ops/s
Iteration   6: 956.007 ops/s
Iteration   7: 908.399 ops/s
Iteration   8: 996.360 ops/s
Iteration   9: 967.941 ops/s
Iteration  10: 912.911 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
904.051 ops/s
# Warmup Iteration   2: 1052.529 ops/s
# Warmup Iteration   3: 1042.637 ops/s
# Warmup Iteration   4: 1032.610 ops/s
# Warmup Iteration   5: 974.900 ops/s
Iteration   1: 999.394 ops/s
Iteration   2: 966.905 ops/s
Iteration   3: 955.644 ops/s
Iteration   4: 991.480 ops/s
Iteration   5: 979.799 ops/s
Iteration   6: 970.842 ops/s
Iteration   7: 922.766 ops/s
Iteration   8: 922.062 ops/s
Iteration   9: 907.514 ops/s
Iteration  10: 917.448 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  974.300 ?(99.9%) 42.967 ops/s [Average]
  (min, avg, max) = (907.514, 974.300, 1046.783), stdev = 49.481
  CI (99.9%): [931.333, 1017.267] (assumes normal distribution)


# Run complete. Total time: 00:13:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  5930.554 ? 268.156  ops/s
Deserialization.dsljson_reflection   thrpt   20  5757.244 ? 209.391  ops/s
Deserialization.gson                 thrpt   20   885.507 ?  37.504  ops/s
Deserialization.jackson              thrpt   20   988.937 ?  45.706  ops/s
Deserialization.jackson_afterburner  thrpt   20   974.300 ?  42.967  ops/s
