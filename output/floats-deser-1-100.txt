# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4785.687 ops/s
# Warmup Iteration   2: 5294.307 ops/s
# Warmup Iteration   3: 5125.517 ops/s
# Warmup Iteration   4: 5385.167 ops/s
# Warmup Iteration   5: 5480.658 ops/s
Iteration   1: 5409.525 ops/s
Iteration   2: 5470.262 ops/s
Iteration   3: 5397.008 ops/s
Iteration   4: 5510.800 ops/s
Iteration   5: 5606.431 ops/s
Iteration   6: 5833.111 ops/s
Iteration   7: 6190.652 ops/s
Iteration   8: 6295.667 ops/s
Iteration   9: 6307.565 ops/s
Iteration  10: 6285.276 ops/s

# Run progress: 10.00% complete, ETA 00:08:23
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5675.083 ops/s
# Warmup Iteration   2: 5509.254 ops/s
# Warmup Iteration   3: 5666.636 ops/s
# Warmup Iteration   4: 5670.378 ops/s
# Warmup Iteration   5: 5614.837 ops/s
Iteration   1: 5588.026 ops/s
Iteration   2: 5659.325 ops/s
Iteration   3: 5489.203 ops/s
Iteration   4: 5892.982 ops/s
Iteration   5: 5909.156 ops/s
Iteration   6: 5931.100 ops/s
Iteration   7: 5609.557 ops/s
Iteration   8: 5770.298 ops/s
Iteration   9: 5740.934 ops/s
Iteration  10: 5959.138 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  5792.801 ?(99.9%) 259.836 ops/s [Average]
  (min, avg, max) = (5397.008, 5792.801, 6307.565), stdev = 299.228
  CI (99.9%): [5532.965, 6052.637] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:27
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5723.681 ops/s
# Warmup Iteration   2: 5541.040 ops/s
# Warmup Iteration   3: 6086.310 ops/s
# Warmup Iteration   4: 6162.359 ops/s
# Warmup Iteration   5: 5872.353 ops/s
Iteration   1: 5429.787 ops/s
Iteration   2: 5732.063 ops/s
Iteration   3: 5500.797 ops/s
Iteration   4: 5578.804 ops/s
Iteration   5: 5379.647 ops/s
Iteration   6: 5481.257 ops/s
Iteration   7: 5539.316 ops/s
Iteration   8: 5402.343 ops/s
Iteration   9: 5523.376 ops/s
Iteration  10: 5469.067 ops/s

# Run progress: 30.00% complete, ETA 00:06:31
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4989.588 ops/s
# Warmup Iteration   2: 6138.772 ops/s
# Warmup Iteration   3: 4718.387 ops/s
# Warmup Iteration   4: 4491.613 ops/s
# Warmup Iteration   5: 4896.648 ops/s
Iteration   1: 5006.368 ops/s
Iteration   2: 4392.054 ops/s
Iteration   3: 4514.112 ops/s
Iteration   4: 4978.630 ops/s
Iteration   5: 4667.815 ops/s
Iteration   6: 4916.236 ops/s
Iteration   7: 4761.023 ops/s
Iteration   8: 4805.072 ops/s
Iteration   9: 4751.642 ops/s
Iteration  10: 4700.465 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  5126.494 ?(99.9%) 360.733 ops/s [Average]
  (min, avg, max) = (4392.054, 5126.494, 5732.063), stdev = 415.421
  CI (99.9%): [4765.761, 5487.227] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:35
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 748.695 ops/s
# Warmup Iteration   2: 836.750 ops/s
# Warmup Iteration   3: 862.310 ops/s
# Warmup Iteration   4: 842.387 ops/s
# Warmup Iteration   5: 860.398 ops/s
Iteration   1: 850.563 ops/s
Iteration   2: 886.653 ops/s
Iteration   3: 862.109 ops/s
Iteration   4: 938.214 ops/s
Iteration   5: 944.464 ops/s
Iteration   6: 945.494 ops/s
Iteration   7: 944.794 ops/s
Iteration   8: 934.274 ops/s
Iteration   9: 944.447 ops/s
Iteration  10: 943.322 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 832.018 ops/s
# Warmup Iteration   2: 951.314 ops/s
# Warmup Iteration   3: 976.503 ops/s
# Warmup Iteration   4: 979.359 ops/s
# Warmup Iteration   5: 976.882 ops/s
Iteration   1: 948.121 ops/s
Iteration   2: 903.234 ops/s
Iteration   3: 964.848 ops/s
Iteration   4: 965.714 ops/s
Iteration   5: 963.505 ops/s
Iteration   6: 979.330 ops/s
Iteration   7: 972.855 ops/s
Iteration   8: 981.263 ops/s
Iteration   9: 978.361 ops/s
Iteration  10: 919.044 ops/s


Result "com.meylism.databind.Deserialization.gson":
  938.530 ?(99.9%) 32.428 ops/s [Average]
  (min, avg, max) = (850.563, 938.530, 981.263), stdev = 37.344
  CI (99.9%): [906.102, 970.958] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 901.101 ops/s
# Warmup Iteration   2: 945.905 ops/s
# Warmup Iteration   3: 913.279 ops/s
# Warmup Iteration   4: 944.745 ops/s
# Warmup Iteration   5: 946.394 ops/s
Iteration   1: 949.611 ops/s
Iteration   2: 998.586 ops/s
Iteration   3: 987.027 ops/s
Iteration   4: 1047.706 ops/s
Iteration   5: 925.270 ops/s
Iteration   6: 962.012 ops/s
Iteration   7: 1047.481 ops/s
Iteration   8: 1056.893 ops/s
Iteration   9: 1058.026 ops/s
Iteration  10: 1047.448 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 883.837 ops/s
# Warmup Iteration   2: 958.241 ops/s
# Warmup Iteration   3: 977.130 ops/s
# Warmup Iteration   4: 976.382 ops/s
# Warmup Iteration   5: 979.117 ops/s
Iteration   1: 971.406 ops/s
Iteration   2: 971.802 ops/s
Iteration   3: 977.209 ops/s
Iteration   4: 974.631 ops/s
Iteration   5: 971.653 ops/s
Iteration   6: 976.547 ops/s
Iteration   7: 935.238 ops/s
Iteration   8: 896.244 ops/s
Iteration   9: 929.545 ops/s
Iteration  10: 970.601 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  982.747 ?(99.9%) 40.869 ops/s [Average]
  (min, avg, max) = (896.244, 982.747, 1058.026), stdev = 47.064
  CI (99.9%): [941.878, 1023.615] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
942.373 ops/s
# Warmup Iteration   2: 993.244 ops/s
# Warmup Iteration   3: 1040.724 ops/s
# Warmup Iteration   4: 1068.210 ops/s
# Warmup Iteration   5: 1053.018 ops/s
Iteration   1: 1066.365 ops/s
Iteration   2: 1066.879 ops/s
Iteration   3: 1032.994 ops/s
Iteration   4: 983.643 ops/s
Iteration   5: 1065.087 ops/s
Iteration   6: 1072.708 ops/s
Iteration   7: 1011.329 ops/s
Iteration   8: 992.678 ops/s
Iteration   9: 896.863 ops/s
Iteration  10: 962.413 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
899.369 ops/s
# Warmup Iteration   2: 971.677 ops/s
# Warmup Iteration   3: 1052.995 ops/s
# Warmup Iteration   4: 1060.988 ops/s
# Warmup Iteration   5: 1065.627 ops/s
Iteration   1: 1061.878 ops/s
Iteration   2: 1059.266 ops/s
Iteration   3: 1057.120 ops/s
Iteration   4: 1065.053 ops/s
Iteration   5: 1057.265 ops/s
Iteration   6: 1062.428 ops/s
Iteration   7: 1058.405 ops/s
Iteration   8: 1057.552 ops/s
Iteration   9: 1062.087 ops/s
Iteration  10: 1024.818 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  1035.842 ?(99.9%) 39.594 ops/s [Average]
  (min, avg, max) = (896.863, 1035.842, 1072.708), stdev = 45.597
  CI (99.9%): [996.247, 1075.436] (assumes normal distribution)


# Run complete. Total time: 00:09:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  5792.801 ? 259.836  ops/s
Deserialization.dsljson_reflection   thrpt   20  5126.494 ? 360.733  ops/s
Deserialization.gson                 thrpt   20   938.530 ?  32.428  ops/s
Deserialization.jackson              thrpt   20   982.747 ?  40.869  ops/s
Deserialization.jackson_afterburner  thrpt   20  1035.842 ?  39.594  ops/s
