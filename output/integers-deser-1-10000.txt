# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
12.165 ops/s
# Warmup Iteration   2: 12.393 ops/s
# Warmup Iteration   3: 12.271 ops/s
# Warmup Iteration   4: 12.371 ops/s
# Warmup Iteration   5: 12.770 ops/s
Iteration   1: 12.497 ops/s
Iteration   2: 11.299 ops/s
Iteration   3: 11.004 ops/s
Iteration   4: 11.572 ops/s
Iteration   5: 11.436 ops/s
Iteration   6: 11.098 ops/s
Iteration   7: 11.876 ops/s
Iteration   8: 11.225 ops/s
Iteration   9: 11.657 ops/s
Iteration  10: 12.298 ops/s

# Run progress: 10.00% complete, ETA 00:12:58
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
10.713 ops/s
# Warmup Iteration   2: 10.457 ops/s
# Warmup Iteration   3: 10.714 ops/s
# Warmup Iteration   4: 10.921 ops/s
# Warmup Iteration   5: 11.318 ops/s
Iteration   1: 10.220 ops/s
Iteration   2: 10.334 ops/s
Iteration   3: 10.522 ops/s
Iteration   4: 9.926 ops/s
Iteration   5: 9.297 ops/s
Iteration   6: 10.274 ops/s
Iteration   7: 9.525 ops/s
Iteration   8: 10.242 ops/s
Iteration   9: 9.932 ops/s
Iteration  10: 9.269 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  10.775 ±(99.9%) 0.834 ops/s [Average]
  (min, avg, max) = (9.269, 10.775, 12.497), stdev = 0.961
  CI (99.9%): [9.941, 11.609] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:55
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
11.294 ops/s
# Warmup Iteration   2: 10.605 ops/s
# Warmup Iteration   3: 11.028 ops/s
# Warmup Iteration   4: 11.101 ops/s
# Warmup Iteration   5: 11.183 ops/s
Iteration   1: 10.317 ops/s
Iteration   2: 10.197 ops/s
Iteration   3: 10.704 ops/s
Iteration   4: 10.417 ops/s
Iteration   5: 10.204 ops/s
Iteration   6: 10.105 ops/s
Iteration   7: 10.468 ops/s
Iteration   8: 10.141 ops/s
Iteration   9: 10.359 ops/s
Iteration  10: 10.255 ops/s

# Run progress: 30.00% complete, ETA 00:10:31
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
12.112 ops/s
# Warmup Iteration   2: 11.720 ops/s
# Warmup Iteration   3: 11.803 ops/s
# Warmup Iteration   4: 12.538 ops/s
# Warmup Iteration   5: 12.060 ops/s
Iteration   1: 11.379 ops/s
Iteration   2: 12.659 ops/s
Iteration   3: 10.640 ops/s
Iteration   4: 12.048 ops/s
Iteration   5: 10.874 ops/s
Iteration   6: 11.250 ops/s
Iteration   7: 11.665 ops/s
Iteration   8: 11.881 ops/s
Iteration   9: 11.411 ops/s
Iteration  10: 11.432 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  10.920 ±(99.9%) 0.649 ops/s [Average]
  (min, avg, max) = (10.105, 10.920, 12.659), stdev = 0.747
  CI (99.9%): [10.271, 11.569] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:55
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8.639 ops/s
# Warmup Iteration   2: 8.400 ops/s
# Warmup Iteration   3: 9.135 ops/s
# Warmup Iteration   4: 8.670 ops/s
# Warmup Iteration   5: 8.762 ops/s
Iteration   1: 8.298 ops/s
Iteration   2: 9.340 ops/s
Iteration   3: 8.234 ops/s
Iteration   4: 8.955 ops/s
Iteration   5: 9.043 ops/s
Iteration   6: 9.790 ops/s
Iteration   7: 8.809 ops/s
Iteration   8: 7.980 ops/s
Iteration   9: 8.571 ops/s
Iteration  10: 7.281 ops/s

# Run progress: 50.00% complete, ETA 00:07:28
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8.811 ops/s
# Warmup Iteration   2: 8.548 ops/s
# Warmup Iteration   3: 8.981 ops/s
# Warmup Iteration   4: 9.105 ops/s
# Warmup Iteration   5: 9.253 ops/s
Iteration   1: 9.700 ops/s
Iteration   2: 9.087 ops/s
Iteration   3: 7.609 ops/s
Iteration   4: 8.478 ops/s
Iteration   5: 7.139 ops/s
Iteration   6: 9.287 ops/s
Iteration   7: 8.726 ops/s
Iteration   8: 8.625 ops/s
Iteration   9: 8.981 ops/s
Iteration  10: 8.463 ops/s


Result "com.meylism.databind.Deserialization.gson":
  8.620 ±(99.9%) 0.627 ops/s [Average]
  (min, avg, max) = (7.139, 8.620, 9.790), stdev = 0.722
  CI (99.9%): [7.993, 9.247] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:06:01
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
10.427 ops/s
# Warmup Iteration   2: 10.700 ops/s
# Warmup Iteration   3: 10.576 ops/s
# Warmup Iteration   4: 10.393 ops/s
# Warmup Iteration   5: 10.375 ops/s
Iteration   1: 9.324 ops/s
Iteration   2: 10.470 ops/s
Iteration   3: 10.790 ops/s
Iteration   4: 10.607 ops/s
Iteration   5: 10.744 ops/s
Iteration   6: 10.573 ops/s
Iteration   7: 10.988 ops/s
Iteration   8: 9.684 ops/s
Iteration   9: 11.906 ops/s
Iteration  10: 11.422 ops/s

# Run progress: 70.00% complete, ETA 00:04:32
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
10.701 ops/s
# Warmup Iteration   2: 10.591 ops/s
# Warmup Iteration   3: 10.527 ops/s
# Warmup Iteration   4: 10.505 ops/s
# Warmup Iteration   5: 10.176 ops/s
Iteration   1: 9.530 ops/s
Iteration   2: 10.391 ops/s
Iteration   3: 11.096 ops/s
Iteration   4: 10.433 ops/s
Iteration   5: 10.243 ops/s
Iteration   6: 10.604 ops/s
Iteration   7: 11.140 ops/s
Iteration   8: 10.217 ops/s
Iteration   9: 9.466 ops/s
Iteration  10: 9.735 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  10.468 ±(99.9%) 0.591 ops/s [Average]
  (min, avg, max) = (9.324, 10.468, 11.906), stdev = 0.680
  CI (99.9%): [9.878, 11.059] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:03:02
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
11.103 ops/s
# Warmup Iteration   2: 11.112 ops/s
# Warmup Iteration   3: 10.657 ops/s
# Warmup Iteration   4: 10.608 ops/s
# Warmup Iteration   5: 10.735 ops/s
Iteration   1: 9.745 ops/s
Iteration   2: 10.189 ops/s
Iteration   3: 9.880 ops/s
Iteration   4: 10.432 ops/s
Iteration   5: 10.439 ops/s
Iteration   6: 10.119 ops/s
Iteration   7: 10.640 ops/s
Iteration   8: 10.380 ops/s
Iteration   9: 10.176 ops/s
Iteration  10: 11.521 ops/s

# Run progress: 90.00% complete, ETA 00:01:31
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
11.148 ops/s
# Warmup Iteration   2: 11.038 ops/s
# Warmup Iteration   3: 10.431 ops/s
# Warmup Iteration   4: 10.667 ops/s
# Warmup Iteration   5: 10.629 ops/s
Iteration   1: 9.701 ops/s
Iteration   2: 10.409 ops/s
Iteration   3: 11.527 ops/s
Iteration   4: 10.937 ops/s
Iteration   5: 11.823 ops/s
Iteration   6: 10.284 ops/s
Iteration   7: 10.307 ops/s
Iteration   8: 11.885 ops/s
Iteration   9: 10.639 ops/s
Iteration  10: 9.730 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  10.538 ±(99.9%) 0.585 ops/s [Average]
  (min, avg, max) = (9.701, 10.538, 11.885), stdev = 0.673
  CI (99.9%): [9.953, 11.123] (assumes normal distribution)


# Run complete. Total time: 00:15:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt   Score   Error  Units
Deserialization.dsljson              thrpt   20  10.775 ± 0.834  ops/s
Deserialization.dsljson_reflection   thrpt   20  10.920 ± 0.649  ops/s
Deserialization.gson                 thrpt   20   8.620 ± 0.627  ops/s
Deserialization.jackson              thrpt   20  10.468 ± 0.591  ops/s
Deserialization.jackson_afterburner  thrpt   20  10.538 ± 0.585  ops/s
