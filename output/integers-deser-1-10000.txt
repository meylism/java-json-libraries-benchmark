# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
59.195 ops/s
# Warmup Iteration   2: 63.334 ops/s
# Warmup Iteration   3: 63.641 ops/s
# Warmup Iteration   4: 63.503 ops/s
# Warmup Iteration   5: 64.481 ops/s
Iteration   1: 64.752 ops/s
Iteration   2: 64.629 ops/s
Iteration   3: 67.163 ops/s
Iteration   4: 63.017 ops/s
Iteration   5: 65.063 ops/s
Iteration   6: 64.232 ops/s
Iteration   7: 65.830 ops/s
Iteration   8: 65.930 ops/s
Iteration   9: 66.796 ops/s
Iteration  10: 64.685 ops/s

# Run progress: 10.00% complete, ETA 00:13:12
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
44.667 ops/s
# Warmup Iteration   2: 45.107 ops/s
# Warmup Iteration   3: 47.407 ops/s
# Warmup Iteration   4: 44.898 ops/s
# Warmup Iteration   5: 46.951 ops/s
Iteration   1: 46.743 ops/s
Iteration   2: 46.368 ops/s
Iteration   3: 44.129 ops/s
Iteration   4: 45.138 ops/s
Iteration   5: 43.575 ops/s
Iteration   6: 44.407 ops/s
Iteration   7: 46.279 ops/s
Iteration   8: 44.779 ops/s
Iteration   9: 45.530 ops/s
Iteration  10: 45.728 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  55.239 ?(99.9%) 8.936 ops/s [Average]
  (min, avg, max) = (43.575, 55.239, 67.163), stdev = 10.291
  CI (99.9%): [46.302, 64.175] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:12:02
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
58.232 ops/s
# Warmup Iteration   2: 63.894 ops/s
# Warmup Iteration   3: 64.666 ops/s
# Warmup Iteration   4: 65.443 ops/s
# Warmup Iteration   5: 65.299 ops/s
Iteration   1: 71.182 ops/s
Iteration   2: 66.496 ops/s
Iteration   3: 63.507 ops/s
Iteration   4: 63.210 ops/s
Iteration   5: 63.580 ops/s
Iteration   6: 62.408 ops/s
Iteration   7: 64.664 ops/s
Iteration   8: 65.765 ops/s
Iteration   9: 67.744 ops/s
Iteration  10: 65.278 ops/s

# Run progress: 30.00% complete, ETA 00:10:28
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
56.622 ops/s
# Warmup Iteration   2: 64.140 ops/s
# Warmup Iteration   3: 65.774 ops/s
# Warmup Iteration   4: 63.944 ops/s
# Warmup Iteration   5: 65.780 ops/s
Iteration   1: 67.639 ops/s
Iteration   2: 66.028 ops/s
Iteration   3: 63.717 ops/s
Iteration   4: 61.840 ops/s
Iteration   5: 63.589 ops/s
Iteration   6: 63.069 ops/s
Iteration   7: 64.219 ops/s
Iteration   8: 66.137 ops/s
Iteration   9: 65.410 ops/s
Iteration  10: 65.987 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  65.073 ?(99.9%) 1.903 ops/s [Average]
  (min, avg, max) = (61.840, 65.073, 71.182), stdev = 2.191
  CI (99.9%): [63.171, 66.976] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:56
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
45.525 ops/s
# Warmup Iteration   2: 50.181 ops/s
# Warmup Iteration   3: 49.421 ops/s
# Warmup Iteration   4: 50.418 ops/s
# Warmup Iteration   5: 49.644 ops/s
Iteration   1: 47.239 ops/s
Iteration   2: 45.344 ops/s
Iteration   3: 46.049 ops/s
Iteration   4: 47.131 ops/s
Iteration   5: 47.054 ops/s
Iteration   6: 46.362 ops/s
Iteration   7: 47.696 ops/s
Iteration   8: 48.617 ops/s
Iteration   9: 47.363 ops/s
Iteration  10: 48.167 ops/s

# Run progress: 50.00% complete, ETA 00:07:29
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
44.880 ops/s
# Warmup Iteration   2: 48.567 ops/s
# Warmup Iteration   3: 48.155 ops/s
# Warmup Iteration   4: 44.745 ops/s
# Warmup Iteration   5: 46.233 ops/s
Iteration   1: 45.984 ops/s
Iteration   2: 47.263 ops/s
Iteration   3: 45.330 ops/s
Iteration   4: 44.007 ops/s
Iteration   5: 47.483 ops/s
Iteration   6: 46.006 ops/s
Iteration   7: 47.884 ops/s
Iteration   8: 46.022 ops/s
Iteration   9: 48.368 ops/s
Iteration  10: 45.628 ops/s


Result "com.meylism.databind.Deserialization.gson":
  46.750 ?(99.9%) 1.036 ops/s [Average]
  (min, avg, max) = (44.007, 46.750, 48.617), stdev = 1.193
  CI (99.9%): [45.714, 47.786] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:06:00
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
51.481 ops/s
# Warmup Iteration   2: 54.753 ops/s
# Warmup Iteration   3: 55.176 ops/s
# Warmup Iteration   4: 54.506 ops/s
# Warmup Iteration   5: 53.109 ops/s
Iteration   1: 56.821 ops/s
Iteration   2: 56.405 ops/s
Iteration   3: 54.555 ops/s
Iteration   4: 52.425 ops/s
Iteration   5: 55.786 ops/s
Iteration   6: 51.898 ops/s
Iteration   7: 53.677 ops/s
Iteration   8: 53.875 ops/s
Iteration   9: 53.233 ops/s
Iteration  10: 54.758 ops/s

# Run progress: 70.00% complete, ETA 00:04:31
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
52.113 ops/s
# Warmup Iteration   2: 52.671 ops/s
# Warmup Iteration   3: 53.158 ops/s
# Warmup Iteration   4: 53.018 ops/s
# Warmup Iteration   5: 53.511 ops/s
Iteration   1: 50.922 ops/s
Iteration   2: 51.696 ops/s
Iteration   3: 51.191 ops/s
Iteration   4: 50.754 ops/s
Iteration   5: 51.165 ops/s
Iteration   6: 53.273 ops/s
Iteration   7: 50.315 ops/s
Iteration   8: 53.943 ops/s
Iteration   9: 56.390 ops/s
Iteration  10: 52.616 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  53.285 ?(99.9%) 1.762 ops/s [Average]
  (min, avg, max) = (50.315, 53.285, 56.821), stdev = 2.029
  CI (99.9%): [51.524, 55.047] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:03:01
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/projects/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
51.319 ops/s
# Warmup Iteration   2: 54.603 ops/s
# Warmup Iteration   3: 51.996 ops/s
# Warmup Iteration   4: 53.731 ops/s
# Warmup Iteration   5: 52.824 ops/s
Iteration   1: 55.110 ops/s
Iteration   2: 52.232 ops/s
Iteration   3: 51.025 ops/s
Iteration   4: 53.463 ops/s
Iteration   5: 54.561 ops/s
Iteration   6: 54.751 ops/s
Iteration   7: 52.326 ops/s
Iteration   8: 50.874 ops/s
Iteration   9: 52.611 ops/s
Iteration  10: 55.094 ops/s

# Run progress: 90.00% complete, ETA 00:01:30
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/projects/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
50.255 ops/s
# Warmup Iteration   2: 54.125 ops/s
# Warmup Iteration   3: 52.691 ops/s
# Warmup Iteration   4: 51.585 ops/s
# Warmup Iteration   5: 52.197 ops/s
Iteration   1: 53.516 ops/s
Iteration   2: 50.846 ops/s
Iteration   3: 57.748 ops/s
Iteration   4: 50.154 ops/s
Iteration   5: 51.178 ops/s
Iteration   6: 54.768 ops/s
Iteration   7: 51.792 ops/s
Iteration   8: 52.880 ops/s
Iteration   9: 53.659 ops/s
Iteration  10: 51.646 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  53.012 ?(99.9%) 1.666 ops/s [Average]
  (min, avg, max) = (50.154, 53.012, 57.748), stdev = 1.918
  CI (99.9%): [51.346, 54.677] (assumes normal distribution)


# Run complete. Total time: 00:15:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt   Score   Error  Units
Deserialization.dsljson              thrpt   20  55.239 ? 8.936  ops/s
Deserialization.dsljson_reflection   thrpt   20  65.073 ? 1.903  ops/s
Deserialization.gson                 thrpt   20  46.750 ? 1.036  ops/s
Deserialization.jackson              thrpt   20  53.285 ? 1.762  ops/s
Deserialization.jackson_afterburner  thrpt   20  53.012 ? 1.666  ops/s
