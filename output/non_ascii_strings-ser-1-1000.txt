# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 351.316 ops/s
# Warmup Iteration   2: 335.908 ops/s
# Warmup Iteration   3: 327.911 ops/s
# Warmup Iteration   4: 351.096 ops/s
# Warmup Iteration   5: 347.902 ops/s
Iteration   1: 353.709 ops/s
Iteration   2: 353.707 ops/s
Iteration   3: 358.021 ops/s
Iteration   4: 357.695 ops/s
Iteration   5: 356.984 ops/s
Iteration   6: 355.012 ops/s
Iteration   7: 356.470 ops/s
Iteration   8: 355.847 ops/s
Iteration   9: 355.238 ops/s
Iteration  10: 354.872 ops/s

# Run progress: 10.00% complete, ETA 00:08:25
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 340.933 ops/s
# Warmup Iteration   2: 344.173 ops/s
# Warmup Iteration   3: 335.861 ops/s
# Warmup Iteration   4: 344.549 ops/s
# Warmup Iteration   5: 346.590 ops/s
Iteration   1: 347.627 ops/s
Iteration   2: 345.564 ops/s
Iteration   3: 347.445 ops/s
Iteration   4: 347.160 ops/s
Iteration   5: 344.550 ops/s
Iteration   6: 345.906 ops/s
Iteration   7: 347.154 ops/s
Iteration   8: 346.281 ops/s
Iteration   9: 345.416 ops/s
Iteration  10: 346.797 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  351.073 ?(99.9%) 4.313 ops/s [Average]
  (min, avg, max) = (344.550, 351.073, 358.021), stdev = 4.967
  CI (99.9%): [346.760, 355.386] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:29
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 339.690 ops/s
# Warmup Iteration   2: 348.163 ops/s
# Warmup Iteration   3: 348.149 ops/s
# Warmup Iteration   4: 341.751 ops/s
# Warmup Iteration   5: 345.718 ops/s
Iteration   1: 347.815 ops/s
Iteration   2: 349.011 ops/s
Iteration   3: 342.012 ops/s
Iteration   4: 348.222 ops/s
Iteration   5: 349.372 ops/s
Iteration   6: 345.925 ops/s
Iteration   7: 349.199 ops/s
Iteration   8: 350.098 ops/s
Iteration   9: 349.424 ops/s
Iteration  10: 320.773 ops/s

# Run progress: 30.00% complete, ETA 00:06:32
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 319.013 ops/s
# Warmup Iteration   2: 343.374 ops/s
# Warmup Iteration   3: 337.180 ops/s
# Warmup Iteration   4: 332.821 ops/s
# Warmup Iteration   5: 336.362 ops/s
Iteration   1: 312.467 ops/s
Iteration   2: 322.810 ops/s
Iteration   3: 348.072 ops/s
Iteration   4: 353.616 ops/s
Iteration   5: 354.407 ops/s
Iteration   6: 352.675 ops/s
Iteration   7: 355.237 ops/s
Iteration   8: 353.269 ops/s
Iteration   9: 352.897 ops/s
Iteration  10: 354.212 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  345.576 ?(99.9%) 10.558 ops/s [Average]
  (min, avg, max) = (312.467, 345.576, 355.237), stdev = 12.159
  CI (99.9%): [335.017, 356.134] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:37
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 641.483 ops/s
# Warmup Iteration   2: 653.635 ops/s
# Warmup Iteration   3: 637.001 ops/s
# Warmup Iteration   4: 651.278 ops/s
# Warmup Iteration   5: 621.737 ops/s
Iteration   1: 622.353 ops/s
Iteration   2: 645.344 ops/s
Iteration   3: 647.665 ops/s
Iteration   4: 623.643 ops/s
Iteration   5: 682.247 ops/s
Iteration   6: 727.188 ops/s
Iteration   7: 749.602 ops/s
Iteration   8: 761.580 ops/s
Iteration   9: 763.369 ops/s
Iteration  10: 708.978 ops/s

# Run progress: 50.00% complete, ETA 00:04:40
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 618.582 ops/s
# Warmup Iteration   2: 590.198 ops/s
# Warmup Iteration   3: 576.041 ops/s
# Warmup Iteration   4: 589.602 ops/s
# Warmup Iteration   5: 601.411 ops/s
Iteration   1: 600.652 ops/s
Iteration   2: 634.905 ops/s
Iteration   3: 637.231 ops/s
Iteration   4: 636.999 ops/s
Iteration   5: 630.371 ops/s
Iteration   6: 730.582 ops/s
Iteration   7: 732.593 ops/s
Iteration   8: 742.605 ops/s
Iteration   9: 737.310 ops/s
Iteration  10: 741.383 ops/s


Result "com.meylism.databind.Serialization.gson":
  687.830 ?(99.9%) 48.719 ops/s [Average]
  (min, avg, max) = (600.652, 687.830, 763.369), stdev = 56.105
  CI (99.9%): [639.111, 736.549] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 307.291 ops/s
# Warmup Iteration   2: 309.050 ops/s
# Warmup Iteration   3: 309.261 ops/s
# Warmup Iteration   4: 309.513 ops/s
# Warmup Iteration   5: 308.344 ops/s
Iteration   1: 303.029 ops/s
Iteration   2: 309.418 ops/s
Iteration   3: 291.200 ops/s
Iteration   4: 308.497 ops/s
Iteration   5: 308.194 ops/s
Iteration   6: 308.820 ops/s
Iteration   7: 309.071 ops/s
Iteration   8: 310.892 ops/s
Iteration   9: 310.540 ops/s
Iteration  10: 310.273 ops/s

# Run progress: 70.00% complete, ETA 00:02:48
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 323.095 ops/s
# Warmup Iteration   2: 325.446 ops/s
# Warmup Iteration   3: 327.260 ops/s
# Warmup Iteration   4: 326.403 ops/s
# Warmup Iteration   5: 324.499 ops/s
Iteration   1: 327.301 ops/s
Iteration   2: 325.541 ops/s
Iteration   3: 328.147 ops/s
Iteration   4: 303.846 ops/s
Iteration   5: 321.037 ops/s
Iteration   6: 325.721 ops/s
Iteration   7: 327.129 ops/s
Iteration   8: 328.383 ops/s
Iteration   9: 322.246 ops/s
Iteration  10: 328.679 ops/s


Result "com.meylism.databind.Serialization.jackson":
  315.398 ?(99.9%) 9.419 ops/s [Average]
  (min, avg, max) = (291.200, 315.398, 328.679), stdev = 10.847
  CI (99.9%): [305.979, 324.818] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
344.025 ops/s
# Warmup Iteration   2: 348.966 ops/s
# Warmup Iteration   3: 348.703 ops/s
# Warmup Iteration   4: 346.966 ops/s
# Warmup Iteration   5: 342.898 ops/s
Iteration   1: 349.529 ops/s
Iteration   2: 349.168 ops/s
Iteration   3: 348.314 ops/s
Iteration   4: 350.199 ops/s
Iteration   5: 336.360 ops/s
Iteration   6: 344.936 ops/s
Iteration   7: 349.538 ops/s
Iteration   8: 349.930 ops/s
Iteration   9: 348.720 ops/s
Iteration  10: 348.555 ops/s

# Run progress: 90.00% complete, ETA 00:00:56
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
369.901 ops/s
# Warmup Iteration   2: 376.736 ops/s
# Warmup Iteration   3: 376.975 ops/s
# Warmup Iteration   4: 376.426 ops/s
# Warmup Iteration   5: 368.207 ops/s
Iteration   1: 376.760 ops/s
Iteration   2: 376.011 ops/s
Iteration   3: 376.617 ops/s
Iteration   4: 377.019 ops/s
Iteration   5: 375.389 ops/s
Iteration   6: 371.723 ops/s
Iteration   7: 343.527 ops/s
Iteration   8: 370.646 ops/s
Iteration   9: 376.026 ops/s
Iteration  10: 376.620 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  359.779 ?(99.9%) 12.769 ops/s [Average]
  (min, avg, max) = (336.360, 359.779, 377.019), stdev = 14.705
  CI (99.9%): [347.010, 372.549] (assumes normal distribution)


# Run complete. Total time: 00:09:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt    Score    Error  Units
Serialization.dsljson              thrpt   20  351.073 ?  4.313  ops/s
Serialization.dsljson_reflection   thrpt   20  345.576 ? 10.558  ops/s
Serialization.gson                 thrpt   20  687.830 ? 48.719  ops/s
Serialization.jackson              thrpt   20  315.398 ?  9.419  ops/s
Serialization.jackson_afterburner  thrpt   20  359.779 ? 12.769  ops/s
