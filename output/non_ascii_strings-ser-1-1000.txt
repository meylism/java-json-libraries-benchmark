# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 330.825 ops/s
# Warmup Iteration   2: 336.855 ops/s
# Warmup Iteration   3: 364.251 ops/s
# Warmup Iteration   4: 368.702 ops/s
# Warmup Iteration   5: 362.814 ops/s
Iteration   1: 330.680 ops/s
Iteration   2: 355.839 ops/s
Iteration   3: 366.973 ops/s
Iteration   4: 364.037 ops/s
Iteration   5: 368.199 ops/s
Iteration   6: 326.085 ops/s
Iteration   7: 323.942 ops/s
Iteration   8: 326.999 ops/s
Iteration   9: 331.790 ops/s
Iteration  10: 321.089 ops/s

# Run progress: 10.00% complete, ETA 00:12:27
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 348.765 ops/s
# Warmup Iteration   2: 366.556 ops/s
# Warmup Iteration   3: 355.692 ops/s
# Warmup Iteration   4: 344.583 ops/s
# Warmup Iteration   5: 334.908 ops/s
Iteration   1: 334.128 ops/s
Iteration   2: 360.985 ops/s
Iteration   3: 369.948 ops/s
Iteration   4: 367.527 ops/s
Iteration   5: 369.665 ops/s
Iteration   6: 336.868 ops/s
Iteration   7: 343.656 ops/s
Iteration   8: 330.629 ops/s
Iteration   9: 354.497 ops/s
Iteration  10: 340.658 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  346.210 ?(99.9%) 15.487 ops/s [Average]
  (min, avg, max) = (321.089, 346.210, 369.948), stdev = 17.835
  CI (99.9%): [330.723, 361.697] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:03
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 324.169 ops/s
# Warmup Iteration   2: 332.431 ops/s
# Warmup Iteration   3: 332.038 ops/s
# Warmup Iteration   4: 331.227 ops/s
# Warmup Iteration   5: 328.049 ops/s
Iteration   1: 349.723 ops/s
Iteration   2: 337.958 ops/s
Iteration   3: 351.484 ops/s
Iteration   4: 329.334 ops/s
Iteration   5: 335.829 ops/s
Iteration   6: 324.228 ops/s
Iteration   7: 338.416 ops/s
Iteration   8: 335.907 ops/s
Iteration   9: 334.007 ops/s
Iteration  10: 349.576 ops/s

# Run progress: 30.00% complete, ETA 00:09:40
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 342.302 ops/s
# Warmup Iteration   2: 357.174 ops/s
# Warmup Iteration   3: 359.885 ops/s
# Warmup Iteration   4: 333.603 ops/s
# Warmup Iteration   5: 328.397 ops/s
Iteration   1: 313.649 ops/s
Iteration   2: 339.844 ops/s
Iteration   3: 324.290 ops/s
Iteration   4: 315.759 ops/s
Iteration   5: 313.770 ops/s
Iteration   6: 355.981 ops/s
Iteration   7: 359.051 ops/s
Iteration   8: 354.044 ops/s
Iteration   9: 357.946 ops/s
Iteration  10: 358.997 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  338.990 ?(99.9%) 13.293 ops/s [Average]
  (min, avg, max) = (313.649, 338.990, 359.051), stdev = 15.308
  CI (99.9%): [325.697, 352.282] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:17
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 743.587 ops/s
# Warmup Iteration   2: 730.500 ops/s
# Warmup Iteration   3: 695.090 ops/s
# Warmup Iteration   4: 772.953 ops/s
# Warmup Iteration   5: 810.089 ops/s
Iteration   1: 807.829 ops/s
Iteration   2: 805.822 ops/s
Iteration   3: 808.551 ops/s
Iteration   4: 807.549 ops/s
Iteration   5: 806.034 ops/s
Iteration   6: 803.811 ops/s
Iteration   7: 705.784 ops/s
Iteration   8: 732.295 ops/s
Iteration   9: 697.499 ops/s
Iteration  10: 711.118 ops/s

# Run progress: 50.00% complete, ETA 00:06:54
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 658.880 ops/s
# Warmup Iteration   2: 667.758 ops/s
# Warmup Iteration   3: 695.678 ops/s
# Warmup Iteration   4: 742.960 ops/s
# Warmup Iteration   5: 809.852 ops/s
Iteration   1: 815.923 ops/s
Iteration   2: 744.071 ops/s
Iteration   3: 726.895 ops/s
Iteration   4: 712.962 ops/s
Iteration   5: 718.092 ops/s
Iteration   6: 807.316 ops/s
Iteration   7: 798.281 ops/s
Iteration   8: 733.232 ops/s
Iteration   9: 700.672 ops/s
Iteration  10: 718.219 ops/s


Result "com.meylism.databind.Serialization.gson":
  758.098 ?(99.9%) 40.390 ops/s [Average]
  (min, avg, max) = (697.499, 758.098, 815.923), stdev = 46.513
  CI (99.9%): [717.708, 798.488] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:31
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 289.526 ops/s
# Warmup Iteration   2: 292.740 ops/s
# Warmup Iteration   3: 293.384 ops/s
# Warmup Iteration   4: 307.440 ops/s
# Warmup Iteration   5: 300.192 ops/s
Iteration   1: 281.170 ops/s
Iteration   2: 296.023 ops/s
Iteration   3: 287.562 ops/s
Iteration   4: 287.482 ops/s
Iteration   5: 306.731 ops/s
Iteration   6: 307.963 ops/s
Iteration   7: 314.846 ops/s
Iteration   8: 287.211 ops/s
Iteration   9: 287.891 ops/s
Iteration  10: 286.905 ops/s

# Run progress: 70.00% complete, ETA 00:04:08
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 370.230 ops/s
# Warmup Iteration   2: 350.440 ops/s
# Warmup Iteration   3: 348.979 ops/s
# Warmup Iteration   4: 360.925 ops/s
# Warmup Iteration   5: 357.225 ops/s
Iteration   1: 362.542 ops/s
Iteration   2: 354.967 ops/s
Iteration   3: 347.999 ops/s
Iteration   4: 341.637 ops/s
Iteration   5: 343.022 ops/s
Iteration   6: 346.149 ops/s
Iteration   7: 344.816 ops/s
Iteration   8: 342.055 ops/s
Iteration   9: 345.442 ops/s
Iteration  10: 342.272 ops/s


Result "com.meylism.databind.Serialization.jackson":
  320.734 ?(99.9%) 24.781 ops/s [Average]
  (min, avg, max) = (281.170, 320.734, 362.542), stdev = 28.538
  CI (99.9%): [295.953, 345.516] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:45
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
331.108 ops/s
# Warmup Iteration   2: 331.181 ops/s
# Warmup Iteration   3: 337.599 ops/s
# Warmup Iteration   4: 331.492 ops/s
# Warmup Iteration   5: 329.040 ops/s
Iteration   1: 329.050 ops/s
Iteration   2: 327.354 ops/s
Iteration   3: 321.407 ops/s
Iteration   4: 329.018 ops/s
Iteration   5: 334.291 ops/s
Iteration   6: 352.780 ops/s
Iteration   7: 337.496 ops/s
Iteration   8: 342.086 ops/s
Iteration   9: 344.530 ops/s
Iteration  10: 338.633 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
347.637 ops/s
# Warmup Iteration   2: 364.474 ops/s
# Warmup Iteration   3: 339.338 ops/s
# Warmup Iteration   4: 343.546 ops/s
# Warmup Iteration   5: 358.275 ops/s
Iteration   1: 377.611 ops/s
Iteration   2: 366.988 ops/s
Iteration   3: 362.457 ops/s
Iteration   4: 322.593 ops/s
Iteration   5: 328.107 ops/s
Iteration   6: 327.443 ops/s
Iteration   7: 356.977 ops/s
Iteration   8: 375.088 ops/s
Iteration   9: 370.338 ops/s
Iteration  10: 374.725 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  345.949 ?(99.9%) 16.860 ops/s [Average]
  (min, avg, max) = (321.407, 345.949, 377.611), stdev = 19.415
  CI (99.9%): [329.089, 362.808] (assumes normal distribution)


# Run complete. Total time: 00:13:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt    Score    Error  Units
Serialization.dsljson              thrpt   20  346.210 ? 15.487  ops/s
Serialization.dsljson_reflection   thrpt   20  338.990 ? 13.293  ops/s
Serialization.gson                 thrpt   20  758.098 ? 40.390  ops/s
Serialization.jackson              thrpt   20  320.734 ? 24.781  ops/s
Serialization.jackson_afterburner  thrpt   20  345.949 ? 16.860  ops/s
