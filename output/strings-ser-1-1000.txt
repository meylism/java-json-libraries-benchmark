# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 354.825 ops/s
# Warmup Iteration   2: 359.805 ops/s
# Warmup Iteration   3: 358.554 ops/s
# Warmup Iteration   4: 358.171 ops/s
# Warmup Iteration   5: 359.458 ops/s
Iteration   1: 358.747 ops/s
Iteration   2: 359.581 ops/s
Iteration   3: 360.277 ops/s
Iteration   4: 359.787 ops/s
Iteration   5: 360.215 ops/s
Iteration   6: 346.195 ops/s
Iteration   7: 350.820 ops/s
Iteration   8: 341.447 ops/s
Iteration   9: 348.552 ops/s
Iteration  10: 347.521 ops/s

# Run progress: 10.00% complete, ETA 00:08:26
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 331.452 ops/s
# Warmup Iteration   2: 350.173 ops/s
# Warmup Iteration   3: 351.304 ops/s
# Warmup Iteration   4: 351.783 ops/s
# Warmup Iteration   5: 350.957 ops/s
Iteration   1: 353.106 ops/s
Iteration   2: 351.072 ops/s
Iteration   3: 352.887 ops/s
Iteration   4: 344.521 ops/s
Iteration   5: 334.713 ops/s
Iteration   6: 349.668 ops/s
Iteration   7: 329.398 ops/s
Iteration   8: 330.358 ops/s
Iteration   9: 340.250 ops/s
Iteration  10: 348.297 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  348.371 ?(99.9%) 8.235 ops/s [Average]
  (min, avg, max) = (329.398, 348.371, 360.277), stdev = 9.483
  CI (99.9%): [340.136, 356.605] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:29
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 335.625 ops/s
# Warmup Iteration   2: 347.251 ops/s
# Warmup Iteration   3: 348.025 ops/s
# Warmup Iteration   4: 348.320 ops/s
# Warmup Iteration   5: 349.213 ops/s
Iteration   1: 340.526 ops/s
Iteration   2: 323.567 ops/s
Iteration   3: 341.105 ops/s
Iteration   4: 347.358 ops/s
Iteration   5: 348.739 ops/s
Iteration   6: 349.513 ops/s
Iteration   7: 348.583 ops/s
Iteration   8: 348.311 ops/s
Iteration   9: 346.994 ops/s
Iteration  10: 348.091 ops/s

# Run progress: 30.00% complete, ETA 00:06:33
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 336.981 ops/s
# Warmup Iteration   2: 344.707 ops/s
# Warmup Iteration   3: 348.020 ops/s
# Warmup Iteration   4: 347.685 ops/s
# Warmup Iteration   5: 348.041 ops/s
Iteration   1: 347.694 ops/s
Iteration   2: 348.107 ops/s
Iteration   3: 347.829 ops/s
Iteration   4: 348.097 ops/s
Iteration   5: 348.237 ops/s
Iteration   6: 348.374 ops/s
Iteration   7: 348.775 ops/s
Iteration   8: 348.675 ops/s
Iteration   9: 348.376 ops/s
Iteration  10: 329.752 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  345.335 ?(99.9%) 5.968 ops/s [Average]
  (min, avg, max) = (323.567, 345.335, 349.513), stdev = 6.873
  CI (99.9%): [339.367, 351.304] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:37
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 619.719 ops/s
# Warmup Iteration   2: 625.339 ops/s
# Warmup Iteration   3: 633.891 ops/s
# Warmup Iteration   4: 615.773 ops/s
# Warmup Iteration   5: 619.121 ops/s
Iteration   1: 602.343 ops/s
Iteration   2: 606.492 ops/s
Iteration   3: 590.343 ops/s
Iteration   4: 598.313 ops/s
Iteration   5: 612.552 ops/s
Iteration   6: 751.006 ops/s
Iteration   7: 765.250 ops/s
Iteration   8: 769.676 ops/s
Iteration   9: 766.833 ops/s
Iteration  10: 766.176 ops/s

# Run progress: 50.00% complete, ETA 00:04:40
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 523.904 ops/s
# Warmup Iteration   2: 557.169 ops/s
# Warmup Iteration   3: 566.848 ops/s
# Warmup Iteration   4: 574.066 ops/s
# Warmup Iteration   5: 568.354 ops/s
Iteration   1: 559.308 ops/s
Iteration   2: 586.444 ops/s
Iteration   3: 593.492 ops/s
Iteration   4: 594.646 ops/s
Iteration   5: 595.761 ops/s
Iteration   6: 629.880 ops/s
Iteration   7: 691.423 ops/s
Iteration   8: 692.467 ops/s
Iteration   9: 701.359 ops/s
Iteration  10: 702.261 ops/s


Result "com.meylism.databind.Serialization.gson":
  658.801 ?(99.9%) 64.847 ops/s [Average]
  (min, avg, max) = (559.308, 658.801, 769.676), stdev = 74.678
  CI (99.9%): [593.955, 723.648] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 347.969 ops/s
# Warmup Iteration   2: 332.124 ops/s
# Warmup Iteration   3: 343.219 ops/s
# Warmup Iteration   4: 362.042 ops/s
# Warmup Iteration   5: 357.881 ops/s
Iteration   1: 364.388 ops/s
Iteration   2: 359.660 ops/s
Iteration   3: 326.236 ops/s
Iteration   4: 340.119 ops/s
Iteration   5: 363.257 ops/s
Iteration   6: 364.693 ops/s
Iteration   7: 364.369 ops/s
Iteration   8: 362.991 ops/s
Iteration   9: 363.688 ops/s
Iteration  10: 364.939 ops/s

# Run progress: 70.00% complete, ETA 00:02:48
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 317.176 ops/s
# Warmup Iteration   2: 316.363 ops/s
# Warmup Iteration   3: 295.476 ops/s
# Warmup Iteration   4: 301.338 ops/s
# Warmup Iteration   5: 300.931 ops/s
Iteration   1: 309.267 ops/s
Iteration   2: 323.170 ops/s
Iteration   3: 323.398 ops/s
Iteration   4: 322.422 ops/s
Iteration   5: 320.922 ops/s
Iteration   6: 321.736 ops/s
Iteration   7: 321.133 ops/s
Iteration   8: 321.550 ops/s
Iteration   9: 316.428 ops/s
Iteration  10: 322.038 ops/s


Result "com.meylism.databind.Serialization.jackson":
  338.820 ?(99.9%) 18.564 ops/s [Average]
  (min, avg, max) = (309.267, 338.820, 364.939), stdev = 21.378
  CI (99.9%): [320.256, 357.384] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
346.277 ops/s
# Warmup Iteration   2: 352.580 ops/s
# Warmup Iteration   3: 337.234 ops/s
# Warmup Iteration   4: 341.379 ops/s
# Warmup Iteration   5: 347.834 ops/s
Iteration   1: 352.721 ops/s
Iteration   2: 352.002 ops/s
Iteration   3: 353.544 ops/s
Iteration   4: 352.620 ops/s
Iteration   5: 352.565 ops/s
Iteration   6: 353.245 ops/s
Iteration   7: 351.548 ops/s
Iteration   8: 351.872 ops/s
Iteration   9: 341.785 ops/s
Iteration  10: 336.276 ops/s

# Run progress: 90.00% complete, ETA 00:00:56
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
358.829 ops/s
# Warmup Iteration   2: 362.774 ops/s
# Warmup Iteration   3: 360.355 ops/s
# Warmup Iteration   4: 340.537 ops/s
# Warmup Iteration   5: 333.497 ops/s
Iteration   1: 357.095 ops/s
Iteration   2: 354.067 ops/s
Iteration   3: 350.773 ops/s
Iteration   4: 346.475 ops/s
Iteration   5: 351.956 ops/s
Iteration   6: 355.419 ops/s
Iteration   7: 361.576 ops/s
Iteration   8: 362.645 ops/s
Iteration   9: 362.143 ops/s
Iteration  10: 362.658 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  353.149 ?(99.9%) 5.726 ops/s [Average]
  (min, avg, max) = (336.276, 353.149, 362.658), stdev = 6.594
  CI (99.9%): [347.424, 358.875] (assumes normal distribution)


# Run complete. Total time: 00:09:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt    Score    Error  Units
Serialization.dsljson              thrpt   20  348.371 ?  8.235  ops/s
Serialization.dsljson_reflection   thrpt   20  345.335 ?  5.968  ops/s
Serialization.gson                 thrpt   20  658.801 ? 64.847  ops/s
Serialization.jackson              thrpt   20  338.820 ? 18.564  ops/s
Serialization.jackson_afterburner  thrpt   20  353.149 ?  5.726  ops/s
