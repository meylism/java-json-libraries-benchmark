# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5729.581 ops/s
# Warmup Iteration   2: 5839.019 ops/s
# Warmup Iteration   3: 6381.325 ops/s
# Warmup Iteration   4: 6602.648 ops/s
# Warmup Iteration   5: 6612.297 ops/s
Iteration   1: 6414.575 ops/s
Iteration   2: 6610.042 ops/s
Iteration   3: 6650.528 ops/s
Iteration   4: 6639.537 ops/s
Iteration   5: 6630.064 ops/s
Iteration   6: 6633.253 ops/s
Iteration   7: 6603.721 ops/s
Iteration   8: 6648.612 ops/s
Iteration   9: 6649.596 ops/s
Iteration  10: 6608.387 ops/s

# Run progress: 10.00% complete, ETA 00:08:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5553.113 ops/s
# Warmup Iteration   2: 6234.000 ops/s
# Warmup Iteration   3: 6348.794 ops/s
# Warmup Iteration   4: 5956.361 ops/s
# Warmup Iteration   5: 6373.551 ops/s
Iteration   1: 6311.593 ops/s
Iteration   2: 6085.901 ops/s
Iteration   3: 5734.350 ops/s
Iteration   4: 5876.481 ops/s
Iteration   5: 6129.888 ops/s
Iteration   6: 5961.255 ops/s
Iteration   7: 6275.684 ops/s
Iteration   8: 6228.883 ops/s
Iteration   9: 6434.913 ops/s
Iteration  10: 6595.169 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  6386.122 ?(99.9%) 255.906 ops/s [Average]
  (min, avg, max) = (5734.350, 6386.122, 6650.528), stdev = 294.701
  CI (99.9%): [6130.216, 6642.027] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4860.155 ops/s
# Warmup Iteration   2: 5136.233 ops/s
# Warmup Iteration   3: 6263.636 ops/s
# Warmup Iteration   4: 6006.843 ops/s
# Warmup Iteration   5: 6118.213 ops/s
Iteration   1: 6243.080 ops/s
Iteration   2: 6347.888 ops/s
Iteration   3: 6620.807 ops/s
Iteration   4: 6633.504 ops/s
Iteration   5: 6630.783 ops/s
Iteration   6: 6622.430 ops/s
Iteration   7: 6643.311 ops/s
Iteration   8: 6566.753 ops/s
Iteration   9: 5803.424 ops/s
Iteration  10: 5873.127 ops/s

# Run progress: 30.00% complete, ETA 00:06:30
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4890.199 ops/s
# Warmup Iteration   2: 4839.470 ops/s
# Warmup Iteration   3: 5809.099 ops/s
# Warmup Iteration   4: 5902.404 ops/s
# Warmup Iteration   5: 5690.557 ops/s
Iteration   1: 5709.627 ops/s
Iteration   2: 5665.697 ops/s
Iteration   3: 5656.929 ops/s
Iteration   4: 5629.645 ops/s
Iteration   5: 5649.555 ops/s
Iteration   6: 5631.670 ops/s
Iteration   7: 5629.278 ops/s
Iteration   8: 5665.967 ops/s
Iteration   9: 5664.587 ops/s
Iteration  10: 5795.276 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  6034.167 ?(99.9%) 379.630 ops/s [Average]
  (min, avg, max) = (5629.278, 6034.167, 6643.311), stdev = 437.182
  CI (99.9%): [5654.537, 6413.797] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:34
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1988.006 ops/s
# Warmup Iteration   2: 2086.743 ops/s
# Warmup Iteration   3: 2211.642 ops/s
# Warmup Iteration   4: 2251.690 ops/s
# Warmup Iteration   5: 2248.456 ops/s
Iteration   1: 2166.949 ops/s
Iteration   2: 2216.516 ops/s
Iteration   3: 2296.653 ops/s
Iteration   4: 2379.332 ops/s
Iteration   5: 2238.599 ops/s
Iteration   6: 2295.736 ops/s
Iteration   7: 2315.382 ops/s
Iteration   8: 2246.083 ops/s
Iteration   9: 2216.757 ops/s
Iteration  10: 2123.586 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2084.900 ops/s
# Warmup Iteration   2: 2211.486 ops/s
# Warmup Iteration   3: 2245.433 ops/s
# Warmup Iteration   4: 2402.422 ops/s
# Warmup Iteration   5: 2248.055 ops/s
Iteration   1: 2202.435 ops/s
Iteration   2: 2323.546 ops/s
Iteration   3: 2428.245 ops/s
Iteration   4: 2505.469 ops/s
Iteration   5: 2511.890 ops/s
Iteration   6: 2509.702 ops/s
Iteration   7: 2490.964 ops/s
Iteration   8: 2480.046 ops/s
Iteration   9: 2494.602 ops/s
Iteration  10: 2509.101 ops/s


Result "com.meylism.databind.Deserialization.gson":
  2347.580 ?(99.9%) 115.951 ops/s [Average]
  (min, avg, max) = (2123.586, 2347.580, 2511.890), stdev = 133.529
  CI (99.9%): [2231.629, 2463.530] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4667.526 ops/s
# Warmup Iteration   2: 5142.265 ops/s
# Warmup Iteration   3: 5133.345 ops/s
# Warmup Iteration   4: 5148.634 ops/s
# Warmup Iteration   5: 5154.101 ops/s
Iteration   1: 5165.738 ops/s
Iteration   2: 5144.939 ops/s
Iteration   3: 4984.916 ops/s
Iteration   4: 4666.955 ops/s
Iteration   5: 4673.800 ops/s
Iteration   6: 4656.355 ops/s
Iteration   7: 5042.559 ops/s
Iteration   8: 4826.192 ops/s
Iteration   9: 4931.856 ops/s
Iteration  10: 4610.993 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 4510.295 ops/s
# Warmup Iteration   2: 5124.752 ops/s
# Warmup Iteration   3: 5252.451 ops/s
# Warmup Iteration   4: 5261.487 ops/s
# Warmup Iteration   5: 5234.881 ops/s
Iteration   1: 5287.906 ops/s
Iteration   2: 5265.112 ops/s
Iteration   3: 5268.269 ops/s
Iteration   4: 5279.438 ops/s
Iteration   5: 4684.575 ops/s
Iteration   6: 4733.066 ops/s
Iteration   7: 4658.609 ops/s
Iteration   8: 4811.250 ops/s
Iteration   9: 4827.981 ops/s
Iteration  10: 4538.640 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  4902.958 ?(99.9%) 222.939 ops/s [Average]
  (min, avg, max) = (4538.640, 4902.958, 5287.906), stdev = 256.736
  CI (99.9%): [4680.019, 5125.896] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4197.165 ops/s
# Warmup Iteration   2: 4599.830 ops/s
# Warmup Iteration   3: 4522.843 ops/s
# Warmup Iteration   4: 4763.568 ops/s
# Warmup Iteration   5: 5080.318 ops/s
Iteration   1: 4988.600 ops/s
Iteration   2: 4469.870 ops/s
Iteration   3: 4463.374 ops/s
Iteration   4: 4907.704 ops/s
Iteration   5: 4920.538 ops/s
Iteration   6: 4816.271 ops/s
Iteration   7: 4865.619 ops/s
Iteration   8: 4945.933 ops/s
Iteration   9: 4899.078 ops/s
Iteration  10: 5033.187 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4433.578 ops/s
# Warmup Iteration   2: 4858.675 ops/s
# Warmup Iteration   3: 4899.984 ops/s
# Warmup Iteration   4: 4920.324 ops/s
# Warmup Iteration   5: 4644.231 ops/s
Iteration   1: 4803.215 ops/s
Iteration   2: 4658.402 ops/s
Iteration   3: 4298.267 ops/s
Iteration   4: 4448.845 ops/s
Iteration   5: 4638.172 ops/s
Iteration   6: 4710.557 ops/s
Iteration   7: 4697.354 ops/s
Iteration   8: 4317.048 ops/s
Iteration   9: 4602.062 ops/s
Iteration  10: 4658.465 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  4707.128 ?(99.9%) 192.512 ops/s [Average]
  (min, avg, max) = (4298.267, 4707.128, 5033.187), stdev = 221.697
  CI (99.9%): [4514.616, 4899.640] (assumes normal distribution)


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  6386.122 ? 255.906  ops/s
Deserialization.dsljson_reflection   thrpt   20  6034.167 ? 379.630  ops/s
Deserialization.gson                 thrpt   20  2347.580 ? 115.951  ops/s
Deserialization.jackson              thrpt   20  4902.958 ? 222.939  ops/s
Deserialization.jackson_afterburner  thrpt   20  4707.128 ? 192.512  ops/s
