# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8816.188 ops/s
# Warmup Iteration   2: 8899.410 ops/s
# Warmup Iteration   3: 8852.248 ops/s
# Warmup Iteration   4: 8890.671 ops/s
# Warmup Iteration   5: 8901.095 ops/s
Iteration   1: 8872.859 ops/s
Iteration   2: 8920.698 ops/s
Iteration   3: 8902.644 ops/s
Iteration   4: 8895.634 ops/s
Iteration   5: 8897.993 ops/s
Iteration   6: 8879.428 ops/s
Iteration   7: 8891.619 ops/s
Iteration   8: 8903.660 ops/s
Iteration   9: 8906.335 ops/s
Iteration  10: 8902.027 ops/s

# Run progress: 10.00% complete, ETA 00:12:09
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8891.711 ops/s
# Warmup Iteration   2: 8938.072 ops/s
# Warmup Iteration   3: 8950.057 ops/s
# Warmup Iteration   4: 9126.454 ops/s
# Warmup Iteration   5: 8951.133 ops/s
Iteration   1: 8954.314 ops/s
Iteration   2: 8947.063 ops/s
Iteration   3: 8948.899 ops/s
Iteration   4: 8952.751 ops/s
Iteration   5: 8939.581 ops/s
Iteration   6: 9078.498 ops/s
Iteration   7: 8934.121 ops/s
Iteration   8: 8929.658 ops/s
Iteration   9: 8959.139 ops/s
Iteration  10: 8939.914 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  8927.842 ±(99.9%) 38.394 ops/s [Average]
  (min, avg, max) = (8872.859, 8927.842, 9078.498), stdev = 44.215
  CI (99.9%): [8889.447, 8966.236] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:48
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8816.537 ops/s
# Warmup Iteration   2: 8866.589 ops/s
# Warmup Iteration   3: 8874.098 ops/s
# Warmup Iteration   4: 8875.480 ops/s
# Warmup Iteration   5: 8877.946 ops/s
Iteration   1: 8867.076 ops/s
Iteration   2: 8854.351 ops/s
Iteration   3: 8861.341 ops/s
Iteration   4: 8891.049 ops/s
Iteration   5: 8913.746 ops/s
Iteration   6: 8921.961 ops/s
Iteration   7: 8870.358 ops/s
Iteration   8: 8878.220 ops/s
Iteration   9: 9045.776 ops/s
Iteration  10: 8879.269 ops/s

# Run progress: 30.00% complete, ETA 00:09:27
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8843.522 ops/s
# Warmup Iteration   2: 8934.408 ops/s
# Warmup Iteration   3: 8951.967 ops/s
# Warmup Iteration   4: 8942.471 ops/s
# Warmup Iteration   5: 8947.681 ops/s
Iteration   1: 8941.944 ops/s
Iteration   2: 8944.827 ops/s
Iteration   3: 8938.616 ops/s
Iteration   4: 8961.211 ops/s
Iteration   5: 8932.079 ops/s
Iteration   6: 8920.640 ops/s
Iteration   7: 8912.085 ops/s
Iteration   8: 8936.877 ops/s
Iteration   9: 8958.271 ops/s
Iteration  10: 8940.678 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  8918.519 ±(99.9%) 39.143 ops/s [Average]
  (min, avg, max) = (8854.351, 8918.519, 9045.776), stdev = 45.077
  CI (99.9%): [8879.376, 8957.661] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:06
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
2331.089 ops/s
# Warmup Iteration   2: 2450.868 ops/s
# Warmup Iteration   3: 2477.334 ops/s
# Warmup Iteration   4: 2478.343 ops/s
# Warmup Iteration   5: 2473.550 ops/s
Iteration   1: 2413.385 ops/s
Iteration   2: 2411.472 ops/s
Iteration   3: 2415.270 ops/s
Iteration   4: 2413.232 ops/s
Iteration   5: 2413.202 ops/s
Iteration   6: 2411.352 ops/s
Iteration   7: 2415.728 ops/s
Iteration   8: 2410.692 ops/s
Iteration   9: 2412.698 ops/s
Iteration  10: 2415.374 ops/s

# Run progress: 50.00% complete, ETA 00:06:45
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
2151.014 ops/s
# Warmup Iteration   2: 2176.542 ops/s
# Warmup Iteration   3: 2126.314 ops/s
# Warmup Iteration   4: 2129.795 ops/s
# Warmup Iteration   5: 2134.621 ops/s
Iteration   1: 2157.422 ops/s
Iteration   2: 2172.484 ops/s
Iteration   3: 2135.973 ops/s
Iteration   4: 2135.708 ops/s
Iteration   5: 2155.519 ops/s
Iteration   6: 2150.040 ops/s
Iteration   7: 2131.992 ops/s
Iteration   8: 2172.126 ops/s
Iteration   9: 2145.268 ops/s
Iteration  10: 2149.027 ops/s


Result "com.meylism.databind.Serialization.gson":
  2281.898 ±(99.9%) 117.329 ops/s [Average]
  (min, avg, max) = (2131.992, 2281.898, 2415.728), stdev = 135.116
  CI (99.9%): [2164.569, 2399.227] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:24
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8537.623 ops/s
# Warmup Iteration   2: 8602.056 ops/s
# Warmup Iteration   3: 8913.325 ops/s
# Warmup Iteration   4: 8994.732 ops/s
# Warmup Iteration   5: 8996.585 ops/s
Iteration   1: 9009.279 ops/s
Iteration   2: 9007.965 ops/s
Iteration   3: 9009.354 ops/s
Iteration   4: 9011.378 ops/s
Iteration   5: 9001.994 ops/s
Iteration   6: 9002.767 ops/s
Iteration   7: 9005.697 ops/s
Iteration   8: 8989.638 ops/s
Iteration   9: 9009.514 ops/s
Iteration  10: 9008.936 ops/s

# Run progress: 70.00% complete, ETA 00:04:03
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
8520.221 ops/s
# Warmup Iteration   2: 8952.662 ops/s
# Warmup Iteration   3: 9137.753 ops/s
# Warmup Iteration   4: 9208.233 ops/s
# Warmup Iteration   5: 9206.566 ops/s
Iteration   1: 9216.048 ops/s
Iteration   2: 9198.461 ops/s
Iteration   3: 9218.242 ops/s
Iteration   4: 9225.347 ops/s
Iteration   5: 9222.216 ops/s
Iteration   6: 9212.351 ops/s
Iteration   7: 8953.823 ops/s
Iteration   8: 9218.241 ops/s
Iteration   9: 9218.874 ops/s
Iteration  10: 9216.905 ops/s


Result "com.meylism.databind.Serialization.jackson":
  9097.852 ±(99.9%) 96.130 ops/s [Average]
  (min, avg, max) = (8953.823, 9097.852, 9225.347), stdev = 110.704
  CI (99.9%): [9001.721, 9193.982] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:42
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
8501.884 ops/s
# Warmup Iteration   2: 8668.863 ops/s
# Warmup Iteration   3: 9011.418 ops/s
# Warmup Iteration   4: 9081.825 ops/s
# Warmup Iteration   5: 9073.439 ops/s
Iteration   1: 9087.518 ops/s
Iteration   2: 9132.547 ops/s
Iteration   3: 9086.071 ops/s
Iteration   4: 9084.988 ops/s
Iteration   5: 9105.140 ops/s
Iteration   6: 9061.928 ops/s
Iteration   7: 9086.541 ops/s
Iteration   8: 9088.025 ops/s
Iteration   9: 9086.315 ops/s
Iteration  10: 9085.495 ops/s

# Run progress: 90.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
9190.804 ops/s
# Warmup Iteration   2: 9366.894 ops/s
# Warmup Iteration   3: 9858.323 ops/s
# Warmup Iteration   4: 9943.483 ops/s
# Warmup Iteration   5: 9814.371 ops/s
Iteration   1: 9842.464 ops/s
Iteration   2: 9833.199 ops/s
Iteration   3: 9855.241 ops/s
Iteration   4: 9928.317 ops/s
Iteration   5: 9931.289 ops/s
Iteration   6: 9882.446 ops/s
Iteration   7: 9952.377 ops/s
Iteration   8: 9880.679 ops/s
Iteration   9: 9851.725 ops/s
Iteration  10: 9878.832 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  9487.057 ±(99.9%) 354.347 ops/s [Average]
  (min, avg, max) = (9061.928, 9487.057, 9952.377), stdev = 408.066
  CI (99.9%): [9132.710, 9841.404] (assumes normal distribution)


# Run complete. Total time: 00:13:30

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20  8927.842 ±  38.394  ops/s
Serialization.dsljson_reflection   thrpt   20  8918.519 ±  39.143  ops/s
Serialization.gson                 thrpt   20  2281.898 ± 117.329  ops/s
Serialization.jackson              thrpt   20  9097.852 ±  96.130  ops/s
Serialization.jackson_afterburner  thrpt   20  9487.057 ± 354.347  ops/s
