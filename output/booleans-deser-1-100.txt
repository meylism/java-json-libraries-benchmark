# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7498.620 ops/s
# Warmup Iteration   2: 7817.643 ops/s
# Warmup Iteration   3: 7683.640 ops/s
# Warmup Iteration   4: 7957.532 ops/s
# Warmup Iteration   5: 7723.364 ops/s
Iteration   1: 7862.838 ops/s
Iteration   2: 7957.571 ops/s
Iteration   3: 8039.349 ops/s
Iteration   4: 8358.148 ops/s
Iteration   5: 8610.134 ops/s
Iteration   6: 8547.295 ops/s
Iteration   7: 8151.064 ops/s
Iteration   8: 8088.194 ops/s
Iteration   9: 7888.002 ops/s
Iteration  10: 8242.648 ops/s

# Run progress: 10.00% complete, ETA 00:12:16
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7815.450 ops/s
# Warmup Iteration   2: 8804.309 ops/s
# Warmup Iteration   3: 9293.094 ops/s
# Warmup Iteration   4: 9262.779 ops/s
# Warmup Iteration   5: 9070.747 ops/s
Iteration   1: 9245.043 ops/s
Iteration   2: 9237.874 ops/s
Iteration   3: 8124.598 ops/s
Iteration   4: 8366.072 ops/s
Iteration   5: 8277.001 ops/s
Iteration   6: 8146.615 ops/s
Iteration   7: 8268.412 ops/s
Iteration   8: 8568.512 ops/s
Iteration   9: 8284.926 ops/s
Iteration  10: 8555.783 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  8341.004 ?(99.9%) 328.198 ops/s [Average]
  (min, avg, max) = (7862.838, 8341.004, 9245.043), stdev = 377.953
  CI (99.9%): [8012.806, 8669.202] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:55
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7847.528 ops/s
# Warmup Iteration   2: 7927.158 ops/s
# Warmup Iteration   3: 8150.928 ops/s
# Warmup Iteration   4: 8338.922 ops/s
# Warmup Iteration   5: 7785.863 ops/s
Iteration   1: 8525.427 ops/s
Iteration   2: 8479.584 ops/s
Iteration   3: 7918.357 ops/s
Iteration   4: 8025.316 ops/s
Iteration   5: 8024.710 ops/s
Iteration   6: 7757.144 ops/s
Iteration   7: 7720.977 ops/s
Iteration   8: 8064.529 ops/s
Iteration   9: 7847.991 ops/s
Iteration  10: 8022.703 ops/s

# Run progress: 30.00% complete, ETA 00:09:33
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7456.473 ops/s
# Warmup Iteration   2: 7708.174 ops/s
# Warmup Iteration   3: 7574.481 ops/s
# Warmup Iteration   4: 7569.749 ops/s
# Warmup Iteration   5: 7582.220 ops/s
Iteration   1: 8092.607 ops/s
Iteration   2: 7993.220 ops/s
Iteration   3: 8220.017 ops/s
Iteration   4: 7672.760 ops/s
Iteration   5: 7541.517 ops/s
Iteration   6: 7936.047 ops/s
Iteration   7: 8373.378 ops/s
Iteration   8: 7672.924 ops/s
Iteration   9: 7731.179 ops/s
Iteration  10: 7847.411 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  7973.390 ?(99.9%) 234.431 ops/s [Average]
  (min, avg, max) = (7541.517, 7973.390, 8525.427), stdev = 269.971
  CI (99.9%): [7738.959, 8207.821] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:11
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1962.776 ops/s
# Warmup Iteration   2: 2452.957 ops/s
# Warmup Iteration   3: 2274.386 ops/s
# Warmup Iteration   4: 2268.161 ops/s
# Warmup Iteration   5: 2159.140 ops/s
Iteration   1: 2227.859 ops/s
Iteration   2: 2154.784 ops/s
Iteration   3: 2183.269 ops/s
Iteration   4: 2167.231 ops/s
Iteration   5: 2161.307 ops/s
Iteration   6: 2151.923 ops/s
Iteration   7: 2160.914 ops/s
Iteration   8: 2226.682 ops/s
Iteration   9: 2346.577 ops/s
Iteration  10: 2485.437 ops/s

# Run progress: 50.00% complete, ETA 00:06:49
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2204.293 ops/s
# Warmup Iteration   2: 2199.970 ops/s
# Warmup Iteration   3: 2122.393 ops/s
# Warmup Iteration   4: 2114.678 ops/s
# Warmup Iteration   5: 2136.325 ops/s
Iteration   1: 2275.649 ops/s
Iteration   2: 2137.675 ops/s
Iteration   3: 2242.135 ops/s
Iteration   4: 2268.740 ops/s
Iteration   5: 2303.872 ops/s
Iteration   6: 2293.249 ops/s
Iteration   7: 2361.387 ops/s
Iteration   8: 2148.813 ops/s
Iteration   9: 2191.548 ops/s
Iteration  10: 2145.582 ops/s


Result "com.meylism.databind.Deserialization.gson":
  2231.732 ?(99.9%) 79.769 ops/s [Average]
  (min, avg, max) = (2137.675, 2231.732, 2485.437), stdev = 91.862
  CI (99.9%): [2151.962, 2311.501] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:27
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6061.609 ops/s
# Warmup Iteration   2: 6636.517 ops/s
# Warmup Iteration   3: 6198.945 ops/s
# Warmup Iteration   4: 7044.618 ops/s
# Warmup Iteration   5: 6722.991 ops/s
Iteration   1: 6381.997 ops/s
Iteration   2: 6974.631 ops/s
Iteration   3: 6251.842 ops/s
Iteration   4: 6781.594 ops/s
Iteration   5: 7063.593 ops/s
Iteration   6: 7007.543 ops/s
Iteration   7: 6363.315 ops/s
Iteration   8: 6726.724 ops/s
Iteration   9: 7016.910 ops/s
Iteration  10: 6614.723 ops/s

# Run progress: 70.00% complete, ETA 00:04:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6035.526 ops/s
# Warmup Iteration   2: 6338.703 ops/s
# Warmup Iteration   3: 6347.884 ops/s
# Warmup Iteration   4: 6282.974 ops/s
# Warmup Iteration   5: 6345.330 ops/s
Iteration   1: 6487.811 ops/s
Iteration   2: 6884.235 ops/s
Iteration   3: 6217.530 ops/s
Iteration   4: 5995.731 ops/s
Iteration   5: 5959.480 ops/s
Iteration   6: 6242.512 ops/s
Iteration   7: 6181.074 ops/s
Iteration   8: 6238.385 ops/s
Iteration   9: 6442.670 ops/s
Iteration  10: 6153.757 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  6499.303 ?(99.9%) 311.145 ops/s [Average]
  (min, avg, max) = (5959.480, 6499.303, 7063.593), stdev = 358.315
  CI (99.9%): [6188.158, 6810.448] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
6341.551 ops/s
# Warmup Iteration   2: 6479.595 ops/s
# Warmup Iteration   3: 6385.288 ops/s
# Warmup Iteration   4: 6686.320 ops/s
# Warmup Iteration   5: 6408.112 ops/s
Iteration   1: 6170.523 ops/s
Iteration   2: 6319.049 ops/s
Iteration   3: 6355.427 ops/s
Iteration   4: 6335.675 ops/s
Iteration   5: 6475.790 ops/s
Iteration   6: 6790.216 ops/s
Iteration   7: 6297.296 ops/s
Iteration   8: 6433.961 ops/s
Iteration   9: 6348.066 ops/s
Iteration  10: 6343.061 ops/s

# Run progress: 90.00% complete, ETA 00:01:21
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
6026.414 ops/s
# Warmup Iteration   2: 6342.250 ops/s
# Warmup Iteration   3: 6323.157 ops/s
# Warmup Iteration   4: 6275.849 ops/s
# Warmup Iteration   5: 6351.726 ops/s
Iteration   1: 6211.293 ops/s
Iteration   2: 6188.360 ops/s
Iteration   3: 6164.758 ops/s
Iteration   4: 6322.665 ops/s
Iteration   5: 6676.861 ops/s
Iteration   6: 6409.608 ops/s
Iteration   7: 6891.930 ops/s
Iteration   8: 6971.498 ops/s
Iteration   9: 6994.983 ops/s
Iteration  10: 6978.005 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  6483.951 ?(99.9%) 250.028 ops/s [Average]
  (min, avg, max) = (6164.758, 6483.951, 6994.983), stdev = 287.933
  CI (99.9%): [6233.923, 6733.979] (assumes normal distribution)


# Run complete. Total time: 00:13:39

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  8341.004 ? 328.198  ops/s
Deserialization.dsljson_reflection   thrpt   20  7973.390 ? 234.431  ops/s
Deserialization.gson                 thrpt   20  2231.732 ?  79.769  ops/s
Deserialization.jackson              thrpt   20  6499.303 ? 311.145  ops/s
Deserialization.jackson_afterburner  thrpt   20  6483.951 ? 250.028  ops/s
