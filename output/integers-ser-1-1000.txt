# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 957.376 ops/s
# Warmup Iteration   2: 966.129 ops/s
# Warmup Iteration   3: 983.806 ops/s
# Warmup Iteration   4: 979.274 ops/s
# Warmup Iteration   5: 988.290 ops/s
Iteration   1: 992.424 ops/s
Iteration   2: 935.413 ops/s
Iteration   3: 958.088 ops/s
Iteration   4: 992.820 ops/s
Iteration   5: 946.706 ops/s
Iteration   6: 971.578 ops/s
Iteration   7: 978.582 ops/s
Iteration   8: 1012.593 ops/s
Iteration   9: 986.968 ops/s
Iteration  10: 992.200 ops/s

# Run progress: 10.00% complete, ETA 00:08:23
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1263.391 ops/s
# Warmup Iteration   2: 1289.865 ops/s
# Warmup Iteration   3: 1285.355 ops/s
# Warmup Iteration   4: 1281.116 ops/s
# Warmup Iteration   5: 1288.219 ops/s
Iteration   1: 1297.420 ops/s
Iteration   2: 1295.515 ops/s
Iteration   3: 1290.274 ops/s
Iteration   4: 1290.296 ops/s
Iteration   5: 1287.841 ops/s
Iteration   6: 1292.372 ops/s
Iteration   7: 1282.061 ops/s
Iteration   8: 1293.121 ops/s
Iteration   9: 1290.408 ops/s
Iteration  10: 1226.871 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  1130.678 ?(99.9%) 138.442 ops/s [Average]
  (min, avg, max) = (935.413, 1130.678, 1297.420), stdev = 159.430
  CI (99.9%): [992.236, 1269.119] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:27
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1248.844 ops/s
# Warmup Iteration   2: 1287.375 ops/s
# Warmup Iteration   3: 1284.719 ops/s
# Warmup Iteration   4: 1286.114 ops/s
# Warmup Iteration   5: 1288.988 ops/s
Iteration   1: 1168.136 ops/s
Iteration   2: 1142.283 ops/s
Iteration   3: 1216.727 ops/s
Iteration   4: 1285.735 ops/s
Iteration   5: 1283.071 ops/s
Iteration   6: 1289.073 ops/s
Iteration   7: 1280.878 ops/s
Iteration   8: 1283.821 ops/s
Iteration   9: 1277.543 ops/s
Iteration  10: 1284.048 ops/s

# Run progress: 30.00% complete, ETA 00:06:31
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1099.917 ops/s
# Warmup Iteration   2: 1067.812 ops/s
# Warmup Iteration   3: 1102.849 ops/s
# Warmup Iteration   4: 1179.137 ops/s
# Warmup Iteration   5: 1180.660 ops/s
Iteration   1: 1183.523 ops/s
Iteration   2: 1176.146 ops/s
Iteration   3: 1181.427 ops/s
Iteration   4: 1181.010 ops/s
Iteration   5: 1183.322 ops/s
Iteration   6: 1101.671 ops/s
Iteration   7: 1103.508 ops/s
Iteration   8: 1141.383 ops/s
Iteration   9: 1120.601 ops/s
Iteration  10: 1031.721 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  1195.781 ?(99.9%) 66.658 ops/s [Average]
  (min, avg, max) = (1031.721, 1195.781, 1289.073), stdev = 76.764
  CI (99.9%): [1129.123, 1262.440] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:35
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 270.172 ops/s
# Warmup Iteration   2: 242.945 ops/s
# Warmup Iteration   3: 248.493 ops/s
# Warmup Iteration   4: 239.066 ops/s
# Warmup Iteration   5: 231.372 ops/s
Iteration   1: 245.528 ops/s
Iteration   2: 243.695 ops/s
Iteration   3: 244.411 ops/s
Iteration   4: 242.244 ops/s
Iteration   5: 233.115 ops/s
Iteration   6: 241.081 ops/s
Iteration   7: 238.703 ops/s
Iteration   8: 230.923 ops/s
Iteration   9: 231.080 ops/s
Iteration  10: 233.168 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 241.744 ops/s
# Warmup Iteration   2: 243.141 ops/s
# Warmup Iteration   3: 222.230 ops/s
# Warmup Iteration   4: 229.370 ops/s
# Warmup Iteration   5: 221.568 ops/s
Iteration   1: 230.437 ops/s
Iteration   2: 228.552 ops/s
Iteration   3: 247.747 ops/s
Iteration   4: 246.272 ops/s
Iteration   5: 232.929 ops/s
Iteration   6: 232.241 ops/s
Iteration   7: 233.155 ops/s
Iteration   8: 237.340 ops/s
Iteration   9: 243.465 ops/s
Iteration  10: 229.941 ops/s


Result "com.meylism.databind.Serialization.gson":
  237.302 ?(99.9%) 5.568 ops/s [Average]
  (min, avg, max) = (228.552, 237.302, 247.747), stdev = 6.412
  CI (99.9%): [231.734, 242.869] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1052.612 ops/s
# Warmup Iteration   2: 1123.345 ops/s
# Warmup Iteration   3: 1131.827 ops/s
# Warmup Iteration   4: 1222.441 ops/s
# Warmup Iteration   5: 1220.952 ops/s
Iteration   1: 1220.874 ops/s
Iteration   2: 1219.663 ops/s
Iteration   3: 1220.345 ops/s
Iteration   4: 1216.986 ops/s
Iteration   5: 1207.649 ops/s
Iteration   6: 1211.772 ops/s
Iteration   7: 1225.777 ops/s
Iteration   8: 1211.115 ops/s
Iteration   9: 1213.331 ops/s
Iteration  10: 1208.937 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1161.543 ops/s
# Warmup Iteration   2: 1213.864 ops/s
# Warmup Iteration   3: 1246.008 ops/s
# Warmup Iteration   4: 1214.049 ops/s
# Warmup Iteration   5: 1244.961 ops/s
Iteration   1: 1241.437 ops/s
Iteration   2: 1243.567 ops/s
Iteration   3: 1254.910 ops/s
Iteration   4: 1252.109 ops/s
Iteration   5: 1254.251 ops/s
Iteration   6: 1250.905 ops/s
Iteration   7: 1250.850 ops/s
Iteration   8: 1213.836 ops/s
Iteration   9: 1158.088 ops/s
Iteration  10: 1191.681 ops/s


Result "com.meylism.databind.Serialization.jackson":
  1223.404 ?(99.9%) 21.172 ops/s [Average]
  (min, avg, max) = (1158.088, 1223.404, 1254.910), stdev = 24.382
  CI (99.9%): [1202.232, 1244.577] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1149.177 ops/s
# Warmup Iteration   2: 1190.658 ops/s
# Warmup Iteration   3: 1223.692 ops/s
# Warmup Iteration   4: 1158.768 ops/s
# Warmup Iteration   5: 1242.032 ops/s
Iteration   1: 1289.886 ops/s
Iteration   2: 1287.349 ops/s
Iteration   3: 1290.881 ops/s
Iteration   4: 1293.054 ops/s
Iteration   5: 1291.639 ops/s
Iteration   6: 1294.718 ops/s
Iteration   7: 1294.439 ops/s
Iteration   8: 1295.727 ops/s
Iteration   9: 1295.514 ops/s
Iteration  10: 1291.439 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1265.942 ops/s
# Warmup Iteration   2: 1201.957 ops/s
# Warmup Iteration   3: 1252.047 ops/s
# Warmup Iteration   4: 1230.553 ops/s
# Warmup Iteration   5: 1226.428 ops/s
Iteration   1: 1156.998 ops/s
Iteration   2: 1204.313 ops/s
Iteration   3: 1235.565 ops/s
Iteration   4: 1302.066 ops/s
Iteration   5: 1300.474 ops/s
Iteration   6: 1295.947 ops/s
Iteration   7: 1301.009 ops/s
Iteration   8: 1301.662 ops/s
Iteration   9: 1296.416 ops/s
Iteration  10: 1302.848 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  1281.097 ?(99.9%) 32.910 ops/s [Average]
  (min, avg, max) = (1156.998, 1281.097, 1302.848), stdev = 37.899
  CI (99.9%): [1248.187, 1314.007] (assumes normal distribution)


# Run complete. Total time: 00:09:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20  1130.678 ? 138.442  ops/s
Serialization.dsljson_reflection   thrpt   20  1195.781 ?  66.658  ops/s
Serialization.gson                 thrpt   20   237.302 ?   5.568  ops/s
Serialization.jackson              thrpt   20  1223.404 ?  21.172  ops/s
Serialization.jackson_afterburner  thrpt   20  1281.097 ?  32.910  ops/s
