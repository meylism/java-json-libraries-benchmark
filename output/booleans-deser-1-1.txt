# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
# Warmup Iteration   1: 648743.579 ops/s
# Warmup Iteration   2: 880947.099 ops/s
# Warmup Iteration   3: 905596.741 ops/s
# Warmup Iteration   4: 892449.705 ops/s
# Warmup Iteration   5: 907404.130 ops/s
Iteration   1: 905507.467 ops/s
Iteration   2: 910317.807 ops/s
Iteration   3: 898991.914 ops/s
Iteration   4: 906943.111 ops/s
Iteration   5: 906444.780 ops/s
Iteration   6: 906782.057 ops/s
Iteration   7: 902121.440 ops/s
Iteration   8: 892684.732 ops/s
Iteration   9: 873735.791 ops/s
Iteration  10: 873997.117 ops/s

# Run progress: 10.00% complete, ETA 00:08:22
# Fork: 2 of 2
# Warmup Iteration   1: 816502.317 ops/s
# Warmup Iteration   2: 851981.351 ops/s
# Warmup Iteration   3: 829148.896 ops/s
# Warmup Iteration   4: 861713.210 ops/s
# Warmup Iteration   5: 866653.280 ops/s
Iteration   1: 861831.913 ops/s
Iteration   2: 862640.381 ops/s
Iteration   3: 825462.337 ops/s
Iteration   4: 826942.371 ops/s
Iteration   5: 856486.430 ops/s
Iteration   6: 865635.531 ops/s
Iteration   7: 869528.753 ops/s
Iteration   8: 863000.563 ops/s
Iteration   9: 870780.658 ops/s
Iteration  10: 867043.411 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  877343.928 ?(99.9%) 22263.145 ops/s [Average]
  (min, avg, max) = (825462.337, 877343.928, 910317.807), stdev = 25638.271
  CI (99.9%): [855080.783, 899607.073] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:26
# Fork: 1 of 2
# Warmup Iteration   1: 863214.031 ops/s
# Warmup Iteration   2: 843080.173 ops/s
# Warmup Iteration   3: 908577.237 ops/s
# Warmup Iteration   4: 911203.097 ops/s
# Warmup Iteration   5: 916215.519 ops/s
Iteration   1: 892964.315 ops/s
Iteration   2: 917070.388 ops/s
Iteration   3: 922017.821 ops/s
Iteration   4: 921936.195 ops/s
Iteration   5: 920701.416 ops/s
Iteration   6: 914070.895 ops/s
Iteration   7: 912742.120 ops/s
Iteration   8: 912100.938 ops/s
Iteration   9: 919750.511 ops/s
Iteration  10: 916692.917 ops/s

# Run progress: 30.00% complete, ETA 00:06:30
# Fork: 2 of 2
# Warmup Iteration   1: 809512.248 ops/s
# Warmup Iteration   2: 703440.159 ops/s
# Warmup Iteration   3: 517559.867 ops/s
# Warmup Iteration   4: 517728.843 ops/s
# Warmup Iteration   5: 518982.929 ops/s
Iteration   1: 538662.101 ops/s
Iteration   2: 533903.196 ops/s
Iteration   3: 539168.563 ops/s
Iteration   4: 528099.701 ops/s
Iteration   5: 536962.783 ops/s
Iteration   6: 541326.573 ops/s
Iteration   7: 541602.592 ops/s
Iteration   8: 526902.525 ops/s
Iteration   9: 532874.704 ops/s
Iteration  10: 538999.497 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  725427.488 ?(99.9%) 169003.461 ops/s [Average]
  (min, avg, max) = (526902.525, 725427.488, 922017.821), stdev = 194624.637
  CI (99.9%): [556424.027, 894430.948] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:34
# Fork: 1 of 2
# Warmup Iteration   1: 253459.585 ops/s
# Warmup Iteration   2: 273528.250 ops/s
# Warmup Iteration   3: 268189.411 ops/s
# Warmup Iteration   4: 271576.192 ops/s
# Warmup Iteration   5: 269544.811 ops/s
Iteration   1: 262109.546 ops/s
Iteration   2: 270098.485 ops/s
Iteration   3: 272213.140 ops/s
Iteration   4: 273560.297 ops/s
Iteration   5: 273189.591 ops/s
Iteration   6: 270751.510 ops/s
Iteration   7: 273147.889 ops/s
Iteration   8: 272920.500 ops/s
Iteration   9: 272184.337 ops/s
Iteration  10: 271523.495 ops/s

# Run progress: 50.00% complete, ETA 00:04:38
# Fork: 2 of 2
# Warmup Iteration   1: 253368.283 ops/s
# Warmup Iteration   2: 274753.478 ops/s
# Warmup Iteration   3: 276331.033 ops/s
# Warmup Iteration   4: 272915.959 ops/s
# Warmup Iteration   5: 274801.030 ops/s
Iteration   1: 271992.765 ops/s
Iteration   2: 274783.240 ops/s
Iteration   3: 276514.823 ops/s
Iteration   4: 274540.097 ops/s
Iteration   5: 276160.736 ops/s
Iteration   6: 276533.127 ops/s
Iteration   7: 276505.169 ops/s
Iteration   8: 271166.492 ops/s
Iteration   9: 266357.966 ops/s
Iteration  10: 276870.694 ops/s


Result "com.meylism.databind.Deserialization.gson":
  272656.195 ?(99.9%) 3147.939 ops/s [Average]
  (min, avg, max) = (262109.546, 272656.195, 276870.694), stdev = 3625.171
  CI (99.9%): [269508.256, 275804.134] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
# Warmup Iteration   1: 588903.929 ops/s
# Warmup Iteration   2: 630377.140 ops/s
# Warmup Iteration   3: 632531.459 ops/s
# Warmup Iteration   4: 629780.298 ops/s
# Warmup Iteration   5: 611012.323 ops/s
Iteration   1: 634757.665 ops/s
Iteration   2: 618888.187 ops/s
Iteration   3: 631869.389 ops/s
Iteration   4: 637735.000 ops/s
Iteration   5: 635555.008 ops/s
Iteration   6: 632179.407 ops/s
Iteration   7: 598648.323 ops/s
Iteration   8: 601719.448 ops/s
Iteration   9: 628397.829 ops/s
Iteration  10: 635177.736 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
# Warmup Iteration   1: 518731.801 ops/s
# Warmup Iteration   2: 556417.345 ops/s
# Warmup Iteration   3: 564101.646 ops/s
# Warmup Iteration   4: 550991.810 ops/s
# Warmup Iteration   5: 564053.999 ops/s
Iteration   1: 547569.974 ops/s
Iteration   2: 536688.803 ops/s
Iteration   3: 557619.613 ops/s
Iteration   4: 546848.011 ops/s
Iteration   5: 552906.443 ops/s
Iteration   6: 567437.890 ops/s
Iteration   7: 561188.234 ops/s
Iteration   8: 555417.283 ops/s
Iteration   9: 558042.705 ops/s
Iteration  10: 561977.063 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  590031.201 ?(99.9%) 33169.034 ops/s [Average]
  (min, avg, max) = (536688.803, 590031.201, 637735.000), stdev = 38197.509
  CI (99.9%): [556862.166, 623200.235] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
# Warmup Iteration   1: 507358.913 ops/s
# Warmup Iteration   2: 564678.176 ops/s
# Warmup Iteration   3: 571818.680 ops/s
# Warmup Iteration   4: 575794.734 ops/s
# Warmup Iteration   5: 568848.955 ops/s
Iteration   1: 572293.389 ops/s
Iteration   2: 568992.869 ops/s
Iteration   3: 577095.512 ops/s
Iteration   4: 580435.641 ops/s
Iteration   5: 566817.664 ops/s
Iteration   6: 540050.637 ops/s
Iteration   7: 567615.457 ops/s
Iteration   8: 576971.371 ops/s
Iteration   9: 575189.954 ops/s
Iteration  10: 572980.292 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
# Warmup Iteration   1: 581595.627 ops/s
# Warmup Iteration   2: 622048.281 ops/s
# Warmup Iteration   3: 619216.953 ops/s
# Warmup Iteration   4: 620203.489 ops/s
# Warmup Iteration   5: 625790.728 ops/s
Iteration   1: 615207.453 ops/s
Iteration   2: 621898.621 ops/s
Iteration   3: 625382.448 ops/s
Iteration   4: 623463.103 ops/s
Iteration   5: 612261.844 ops/s
Iteration   6: 615209.142 ops/s
Iteration   7: 623290.600 ops/s
Iteration   8: 614369.280 ops/s
Iteration   9: 628128.308 ops/s
Iteration  10: 625723.115 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  595168.835 ?(99.9%) 23804.617 ops/s [Average]
  (min, avg, max) = (540050.637, 595168.835, 628128.308), stdev = 27413.433
  CI (99.9%): [571364.218, 618973.452] (assumes normal distribution)


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                             Mode  Cnt       Score        Error  Units
Deserialization.dsljson              thrpt   20  877343.928 ?  22263.145  ops/s
Deserialization.dsljson_reflection   thrpt   20  725427.488 ? 169003.461  ops/s
Deserialization.gson                 thrpt   20  272656.195 ?   3147.939  ops/s
Deserialization.jackson              thrpt   20  590031.201 ?  33169.034  ops/s
Deserialization.jackson_afterburner  thrpt   20  595168.835 ?  23804.617  ops/s
