# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3571.166 ops/s
# Warmup Iteration   2: 3729.523 ops/s
# Warmup Iteration   3: 3745.547 ops/s
# Warmup Iteration   4: 3695.305 ops/s
# Warmup Iteration   5: 3589.322 ops/s
Iteration   1: 3582.298 ops/s
Iteration   2: 3522.255 ops/s
Iteration   3: 3482.205 ops/s
Iteration   4: 3698.341 ops/s
Iteration   5: 3734.652 ops/s
Iteration   6: 3740.342 ops/s
Iteration   7: 3736.053 ops/s
Iteration   8: 3743.627 ops/s
Iteration   9: 3738.532 ops/s
Iteration  10: 3734.156 ops/s

# Run progress: 10.00% complete, ETA 00:08:23
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3705.402 ops/s
# Warmup Iteration   2: 3764.578 ops/s
# Warmup Iteration   3: 3751.049 ops/s
# Warmup Iteration   4: 3789.923 ops/s
# Warmup Iteration   5: 3640.605 ops/s
Iteration   1: 3643.249 ops/s
Iteration   2: 3767.431 ops/s
Iteration   3: 3791.660 ops/s
Iteration   4: 3781.224 ops/s
Iteration   5: 3787.329 ops/s
Iteration   6: 3778.902 ops/s
Iteration   7: 3795.792 ops/s
Iteration   8: 3788.293 ops/s
Iteration   9: 3786.537 ops/s
Iteration  10: 3783.462 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  3720.817 ?(99.9%) 79.921 ops/s [Average]
  (min, avg, max) = (3482.205, 3720.817, 3795.792), stdev = 92.037
  CI (99.9%): [3640.896, 3800.738] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3716.587 ops/s
# Warmup Iteration   2: 3832.809 ops/s
# Warmup Iteration   3: 3826.043 ops/s
# Warmup Iteration   4: 3802.881 ops/s
# Warmup Iteration   5: 3829.350 ops/s
Iteration   1: 3803.479 ops/s
Iteration   2: 3694.857 ops/s
Iteration   3: 3767.173 ops/s
Iteration   4: 3832.097 ops/s
Iteration   5: 3819.312 ops/s
Iteration   6: 3829.104 ops/s
Iteration   7: 3845.597 ops/s
Iteration   8: 3834.434 ops/s
Iteration   9: 3831.973 ops/s
Iteration  10: 3832.443 ops/s

# Run progress: 30.00% complete, ETA 00:06:30
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3610.956 ops/s
# Warmup Iteration   2: 3720.306 ops/s
# Warmup Iteration   3: 3732.845 ops/s
# Warmup Iteration   4: 3687.412 ops/s
# Warmup Iteration   5: 3527.179 ops/s
Iteration   1: 3718.308 ops/s
Iteration   2: 3728.725 ops/s
Iteration   3: 3276.348 ops/s
Iteration   4: 3529.881 ops/s
Iteration   5: 3615.648 ops/s
Iteration   6: 3712.530 ops/s
Iteration   7: 3692.402 ops/s
Iteration   8: 3627.604 ops/s
Iteration   9: 3454.046 ops/s
Iteration  10: 3466.416 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  3695.619 ?(99.9%) 137.249 ops/s [Average]
  (min, avg, max) = (3276.348, 3695.619, 3845.597), stdev = 158.056
  CI (99.9%): [3558.370, 3832.868] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:34
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7695.388 ops/s
# Warmup Iteration   2: 8159.356 ops/s
# Warmup Iteration   3: 8194.261 ops/s
# Warmup Iteration   4: 8198.305 ops/s
# Warmup Iteration   5: 8226.948 ops/s
Iteration   1: 8166.169 ops/s
Iteration   2: 8267.340 ops/s
Iteration   3: 8278.921 ops/s
Iteration   4: 7922.463 ops/s
Iteration   5: 7495.134 ops/s
Iteration   6: 7832.432 ops/s
Iteration   7: 8248.598 ops/s
Iteration   8: 8237.959 ops/s
Iteration   9: 8250.041 ops/s
Iteration  10: 8264.511 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7675.871 ops/s
# Warmup Iteration   2: 8081.017 ops/s
# Warmup Iteration   3: 8115.128 ops/s
# Warmup Iteration   4: 8085.915 ops/s
# Warmup Iteration   5: 8101.098 ops/s
Iteration   1: 8100.247 ops/s
Iteration   2: 8104.069 ops/s
Iteration   3: 8046.437 ops/s
Iteration   4: 8143.022 ops/s
Iteration   5: 7895.301 ops/s
Iteration   6: 7812.626 ops/s
Iteration   7: 7822.925 ops/s
Iteration   8: 7627.828 ops/s
Iteration   9: 8006.585 ops/s
Iteration  10: 7840.798 ops/s


Result "com.meylism.databind.Serialization.gson":
  8018.170 ?(99.9%) 198.715 ops/s [Average]
  (min, avg, max) = (7495.134, 8018.170, 8278.921), stdev = 228.840
  CI (99.9%): [7819.456, 8216.885] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3977.270 ops/s
# Warmup Iteration   2: 4116.449 ops/s
# Warmup Iteration   3: 4156.706 ops/s
# Warmup Iteration   4: 4180.865 ops/s
# Warmup Iteration   5: 4170.811 ops/s
Iteration   1: 4182.896 ops/s
Iteration   2: 4168.612 ops/s
Iteration   3: 4168.746 ops/s
Iteration   4: 4173.942 ops/s
Iteration   5: 4155.677 ops/s
Iteration   6: 4147.598 ops/s
Iteration   7: 4049.449 ops/s
Iteration   8: 4189.522 ops/s
Iteration   9: 4192.114 ops/s
Iteration  10: 4154.917 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 3080.773 ops/s
# Warmup Iteration   2: 3310.382 ops/s
# Warmup Iteration   3: 3306.428 ops/s
# Warmup Iteration   4: 3314.405 ops/s
# Warmup Iteration   5: 3309.273 ops/s
Iteration   1: 3289.313 ops/s
Iteration   2: 3298.218 ops/s
Iteration   3: 3313.353 ops/s
Iteration   4: 3317.277 ops/s
Iteration   5: 3322.760 ops/s
Iteration   6: 3302.091 ops/s
Iteration   7: 3324.311 ops/s
Iteration   8: 3221.436 ops/s
Iteration   9: 3074.684 ops/s
Iteration  10: 3155.758 ops/s


Result "com.meylism.databind.Serialization.jackson":
  3710.134 ?(99.9%) 403.282 ops/s [Average]
  (min, avg, max) = (3074.684, 3710.134, 4192.114), stdev = 464.420
  CI (99.9%): [3306.852, 4113.415] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
3981.095 ops/s
# Warmup Iteration   2: 3972.328 ops/s
# Warmup Iteration   3: 4028.759 ops/s
# Warmup Iteration   4: 4026.766 ops/s
# Warmup Iteration   5: 4103.072 ops/s
Iteration   1: 3972.965 ops/s
Iteration   2: 3798.533 ops/s
Iteration   3: 3819.792 ops/s
Iteration   4: 4030.685 ops/s
Iteration   5: 4019.396 ops/s
Iteration   6: 4077.358 ops/s
Iteration   7: 4033.041 ops/s
Iteration   8: 3968.073 ops/s
Iteration   9: 3907.821 ops/s
Iteration  10: 3719.693 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4263.271 ops/s
# Warmup Iteration   2: 4392.607 ops/s
# Warmup Iteration   3: 4407.465 ops/s
# Warmup Iteration   4: 4372.510 ops/s
# Warmup Iteration   5: 4414.139 ops/s
Iteration   1: 4383.292 ops/s
Iteration   2: 4407.907 ops/s
Iteration   3: 4422.359 ops/s
Iteration   4: 4379.527 ops/s
Iteration   5: 4407.891 ops/s
Iteration   6: 4402.044 ops/s
Iteration   7: 4422.362 ops/s
Iteration   8: 4407.161 ops/s
Iteration   9: 4421.439 ops/s
Iteration  10: 4398.942 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  4170.014 ?(99.9%) 221.555 ops/s [Average]
  (min, avg, max) = (3719.693, 4170.014, 4422.362), stdev = 255.143
  CI (99.9%): [3948.459, 4391.569] (assumes normal distribution)


# Run complete. Total time: 00:09:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt     Score     Error  Units
Serialization.dsljson              thrpt   20  3720.817 ?  79.921  ops/s
Serialization.dsljson_reflection   thrpt   20  3695.619 ? 137.249  ops/s
Serialization.gson                 thrpt   20  8018.170 ? 198.715  ops/s
Serialization.jackson              thrpt   20  3710.134 ? 403.282  ops/s
Serialization.jackson_afterburner  thrpt   20  4170.014 ? 221.555  ops/s
