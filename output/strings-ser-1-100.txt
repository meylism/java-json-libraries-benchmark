# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
# Warmup Iteration   1: 12654.806 ops/s
# Warmup Iteration   2: 12766.002 ops/s
# Warmup Iteration   3: 12367.966 ops/s
# Warmup Iteration   4: 12454.419 ops/s
# Warmup Iteration   5: 13215.188 ops/s
Iteration   1: 13205.357 ops/s
Iteration   2: 13193.349 ops/s
Iteration   3: 13328.533 ops/s
Iteration   4: 13288.975 ops/s
Iteration   5: 13127.709 ops/s
Iteration   6: 13221.279 ops/s
Iteration   7: 13226.148 ops/s
Iteration   8: 13236.971 ops/s
Iteration   9: 13130.471 ops/s
Iteration  10: 13109.567 ops/s

# Run progress: 10.00% complete, ETA 00:08:22
# Fork: 2 of 2
# Warmup Iteration   1: 13025.156 ops/s
# Warmup Iteration   2: 13212.396 ops/s
# Warmup Iteration   3: 13317.533 ops/s
# Warmup Iteration   4: 13330.387 ops/s
# Warmup Iteration   5: 13216.828 ops/s
Iteration   1: 13310.067 ops/s
Iteration   2: 13210.261 ops/s
Iteration   3: 13085.586 ops/s
Iteration   4: 13344.900 ops/s
Iteration   5: 13425.272 ops/s
Iteration   6: 13244.980 ops/s
Iteration   7: 13200.426 ops/s
Iteration   8: 13330.085 ops/s
Iteration   9: 13317.053 ops/s
Iteration  10: 13346.389 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  13244.169 ?(99.9%) 79.027 ops/s [Average]
  (min, avg, max) = (13085.586, 13244.169, 13425.272), stdev = 91.007
  CI (99.9%): [13165.142, 13323.196] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:26
# Fork: 1 of 2
# Warmup Iteration   1: 13076.218 ops/s
# Warmup Iteration   2: 13212.196 ops/s
# Warmup Iteration   3: 13159.929 ops/s
# Warmup Iteration   4: 13209.898 ops/s
# Warmup Iteration   5: 13232.469 ops/s
Iteration   1: 13264.447 ops/s
Iteration   2: 13310.657 ops/s
Iteration   3: 13340.217 ops/s
Iteration   4: 13093.003 ops/s
Iteration   5: 12878.552 ops/s
Iteration   6: 13384.304 ops/s
Iteration   7: 13344.344 ops/s
Iteration   8: 13113.586 ops/s
Iteration   9: 13295.831 ops/s
Iteration  10: 13333.402 ops/s

# Run progress: 30.00% complete, ETA 00:06:30
# Fork: 2 of 2
# Warmup Iteration   1: 12930.631 ops/s
# Warmup Iteration   2: 13116.626 ops/s
# Warmup Iteration   3: 13126.822 ops/s
# Warmup Iteration   4: 12818.796 ops/s
# Warmup Iteration   5: 12853.060 ops/s
Iteration   1: 13242.199 ops/s
Iteration   2: 13120.506 ops/s
Iteration   3: 13185.010 ops/s
Iteration   4: 13154.931 ops/s
Iteration   5: 13046.856 ops/s
Iteration   6: 13092.569 ops/s
Iteration   7: 13116.987 ops/s
Iteration   8: 13116.084 ops/s
Iteration   9: 13016.121 ops/s
Iteration  10: 12483.496 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  13146.655 ?(99.9%) 177.026 ops/s [Average]
  (min, avg, max) = (12483.496, 13146.655, 13384.304), stdev = 203.863
  CI (99.9%): [12969.629, 13323.681] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:34
# Fork: 1 of 2
# Warmup Iteration   1: 8535.551 ops/s
# Warmup Iteration   2: 9070.834 ops/s
# Warmup Iteration   3: 9062.922 ops/s
# Warmup Iteration   4: 9054.647 ops/s
# Warmup Iteration   5: 8820.588 ops/s
Iteration   1: 8925.430 ops/s
Iteration   2: 8930.329 ops/s
Iteration   3: 8970.887 ops/s
Iteration   4: 8891.478 ops/s
Iteration   5: 8832.827 ops/s
Iteration   6: 8918.127 ops/s
Iteration   7: 8908.962 ops/s
Iteration   8: 8879.040 ops/s
Iteration   9: 8803.621 ops/s
Iteration  10: 8918.524 ops/s

# Run progress: 50.00% complete, ETA 00:04:39
# Fork: 2 of 2
# Warmup Iteration   1: 8056.046 ops/s
# Warmup Iteration   2: 8749.340 ops/s
# Warmup Iteration   3: 8619.819 ops/s
# Warmup Iteration   4: 8757.308 ops/s
# Warmup Iteration   5: 8641.472 ops/s
Iteration   1: 8668.652 ops/s
Iteration   2: 8500.313 ops/s
Iteration   3: 8530.792 ops/s
Iteration   4: 8675.754 ops/s
Iteration   5: 8642.802 ops/s
Iteration   6: 8631.002 ops/s
Iteration   7: 8644.565 ops/s
Iteration   8: 8331.059 ops/s
Iteration   9: 8509.621 ops/s
Iteration  10: 8708.885 ops/s


Result "com.meylism.databind.Serialization.gson":
  8741.134 ?(99.9%) 158.514 ops/s [Average]
  (min, avg, max) = (8331.059, 8741.134, 8970.887), stdev = 182.545
  CI (99.9%): [8582.620, 8899.647] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
# Warmup Iteration   1: 14061.557 ops/s
# Warmup Iteration   2: 14426.501 ops/s
# Warmup Iteration   3: 14411.103 ops/s
# Warmup Iteration   4: 14404.974 ops/s
# Warmup Iteration   5: 14117.873 ops/s
Iteration   1: 14403.603 ops/s
Iteration   2: 14584.259 ops/s
Iteration   3: 14491.409 ops/s
Iteration   4: 14272.279 ops/s
Iteration   5: 14604.957 ops/s
Iteration   6: 14442.991 ops/s
Iteration   7: 14565.008 ops/s
Iteration   8: 14554.118 ops/s
Iteration   9: 14514.858 ops/s
Iteration  10: 14259.317 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
# Warmup Iteration   1: 14139.365 ops/s
# Warmup Iteration   2: 14378.743 ops/s
# Warmup Iteration   3: 14458.609 ops/s
# Warmup Iteration   4: 14448.421 ops/s
# Warmup Iteration   5: 14501.812 ops/s
Iteration   1: 14442.439 ops/s
Iteration   2: 14388.123 ops/s
Iteration   3: 14580.300 ops/s
Iteration   4: 14338.966 ops/s
Iteration   5: 14439.880 ops/s
Iteration   6: 14371.614 ops/s
Iteration   7: 14432.566 ops/s
Iteration   8: 14466.045 ops/s
Iteration   9: 14388.980 ops/s
Iteration  10: 14622.877 ops/s


Result "com.meylism.databind.Serialization.jackson":
  14458.229 ?(99.9%) 92.249 ops/s [Average]
  (min, avg, max) = (14259.317, 14458.229, 14622.877), stdev = 106.234
  CI (99.9%): [14365.980, 14550.479] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /root/jdk-17.0.2/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
# Warmup Iteration   1: 14113.940 ops/s
# Warmup Iteration   2: 14343.230 ops/s
# Warmup Iteration   3: 14224.596 ops/s
# Warmup Iteration   4: 14523.999 ops/s
# Warmup Iteration   5: 14428.263 ops/s
Iteration   1: 14499.274 ops/s
Iteration   2: 14563.203 ops/s
Iteration   3: 14543.221 ops/s
Iteration   4: 14560.056 ops/s
Iteration   5: 14637.700 ops/s
Iteration   6: 14515.529 ops/s
Iteration   7: 14286.001 ops/s
Iteration   8: 14659.658 ops/s
Iteration   9: 14439.844 ops/s
Iteration  10: 14409.196 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
# Warmup Iteration   1: 13976.343 ops/s
# Warmup Iteration   2: 14305.420 ops/s
# Warmup Iteration   3: 14335.458 ops/s
# Warmup Iteration   4: 13917.386 ops/s
# Warmup Iteration   5: 13590.828 ops/s
Iteration   1: 14310.135 ops/s
Iteration   2: 14389.530 ops/s
Iteration   3: 14511.890 ops/s
Iteration   4: 14492.771 ops/s
Iteration   5: 14471.602 ops/s
Iteration   6: 14566.798 ops/s
Iteration   7: 14449.349 ops/s
Iteration   8: 14381.826 ops/s
Iteration   9: 14178.833 ops/s
Iteration  10: 14211.154 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  14453.878 ?(99.9%) 113.762 ops/s [Average]
  (min, avg, max) = (14178.833, 14453.878, 14659.658), stdev = 131.009
  CI (99.9%): [14340.116, 14567.641] (assumes normal distribution)


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                           Mode  Cnt      Score     Error  Units
Serialization.dsljson              thrpt   20  13244.169 ?  79.027  ops/s
Serialization.dsljson_reflection   thrpt   20  13146.655 ? 177.026  ops/s
Serialization.gson                 thrpt   20   8741.134 ? 158.514  ops/s
Serialization.jackson              thrpt   20  14458.229 ?  92.249  ops/s
Serialization.jackson_afterburner  thrpt   20  14453.878 ? 113.762  ops/s
