# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
12.829 ops/s
# Warmup Iteration   2: 13.069 ops/s
# Warmup Iteration   3: 12.447 ops/s
# Warmup Iteration   4: 12.380 ops/s
# Warmup Iteration   5: 13.023 ops/s
Iteration   1: 13.947 ops/s
Iteration   2: 15.002 ops/s
Iteration   3: 13.356 ops/s
Iteration   4: 11.056 ops/s
Iteration   5: 12.932 ops/s
Iteration   6: 12.341 ops/s
Iteration   7: 12.829 ops/s
Iteration   8: 11.107 ops/s
Iteration   9: 13.626 ops/s
Iteration  10: 12.625 ops/s

# Run progress: 10.00% complete, ETA 00:13:53
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
12.963 ops/s
# Warmup Iteration   2: 12.908 ops/s
# Warmup Iteration   3: 12.436 ops/s
# Warmup Iteration   4: 12.857 ops/s
# Warmup Iteration   5: 12.697 ops/s
Iteration   1: 11.840 ops/s
Iteration   2: 12.381 ops/s
Iteration   3: 13.664 ops/s
Iteration   4: 13.033 ops/s
Iteration   5: 13.745 ops/s
Iteration   6: 15.513 ops/s
Iteration   7: 13.956 ops/s
Iteration   8: 14.884 ops/s
Iteration   9: 14.477 ops/s
Iteration  10: 13.793 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  13.305 ±(99.9%) 1.051 ops/s [Average]
  (min, avg, max) = (11.056, 13.305, 15.513), stdev = 1.211
  CI (99.9%): [12.254, 14.356] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:12:28
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
12.703 ops/s
# Warmup Iteration   2: 12.556 ops/s
# Warmup Iteration   3: 12.238 ops/s
# Warmup Iteration   4: 12.532 ops/s
# Warmup Iteration   5: 12.249 ops/s
Iteration   1: 11.157 ops/s
Iteration   2: 13.165 ops/s
Iteration   3: 14.041 ops/s
Iteration   4: 12.402 ops/s
Iteration   5: 12.767 ops/s
Iteration   6: 12.297 ops/s
Iteration   7: 13.481 ops/s
Iteration   8: 12.311 ops/s
Iteration   9: 13.371 ops/s
Iteration  10: 11.321 ops/s

# Run progress: 30.00% complete, ETA 00:10:52
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
12.977 ops/s
# Warmup Iteration   2: 13.064 ops/s
# Warmup Iteration   3: 12.868 ops/s
# Warmup Iteration   4: 12.784 ops/s
# Warmup Iteration   5: 13.290 ops/s
Iteration   1: 14.355 ops/s
Iteration   2: 13.127 ops/s
Iteration   3: 13.982 ops/s
Iteration   4: 14.978 ops/s
Iteration   5: 13.401 ops/s
Iteration   6: 13.658 ops/s
Iteration   7: 13.032 ops/s
Iteration   8: 14.453 ops/s
Iteration   9: 12.381 ops/s
Iteration  10: 13.838 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  13.176 ±(99.9%) 0.868 ops/s [Average]
  (min, avg, max) = (11.157, 13.176, 14.978), stdev = 0.999
  CI (99.9%): [12.308, 14.044] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:09:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
4.366 ops/s
# Warmup Iteration   2: 4.569 ops/s
# Warmup Iteration   3: 4.665 ops/s
# Warmup Iteration   4: 4.494 ops/s
# Warmup Iteration   5: 4.650 ops/s
Iteration   1: 4.570 ops/s
Iteration   2: 4.536 ops/s
Iteration   3: 4.868 ops/s
Iteration   4: 4.685 ops/s
Iteration   5: 4.664 ops/s
Iteration   6: 4.612 ops/s
Iteration   7: 4.463 ops/s
Iteration   8: 4.540 ops/s
Iteration   9: 4.580 ops/s
Iteration  10: 4.505 ops/s

# Run progress: 50.00% complete, ETA 00:07:54
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
4.240 ops/s
# Warmup Iteration   2: 4.425 ops/s
# Warmup Iteration   3: 4.428 ops/s
# Warmup Iteration   4: 4.409 ops/s
# Warmup Iteration   5: 4.479 ops/s
Iteration   1: 4.485 ops/s
Iteration   2: 4.421 ops/s
Iteration   3: 4.323 ops/s
Iteration   4: 4.559 ops/s
Iteration   5: 4.378 ops/s
Iteration   6: 4.506 ops/s
Iteration   7: 4.610 ops/s
Iteration   8: 4.540 ops/s
Iteration   9: 4.460 ops/s
Iteration  10: 4.425 ops/s


Result "com.meylism.databind.Deserialization.gson":
  4.537 ±(99.9%) 0.105 ops/s [Average]
  (min, avg, max) = (4.323, 4.537, 4.868), stdev = 0.120
  CI (99.9%): [4.432, 4.641] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:06:25
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
4.654 ops/s
# Warmup Iteration   2: 4.837 ops/s
# Warmup Iteration   3: 4.947 ops/s
# Warmup Iteration   4: 4.894 ops/s
# Warmup Iteration   5: 4.877 ops/s
Iteration   1: 4.899 ops/s
Iteration   2: 5.053 ops/s
Iteration   3: 4.908 ops/s
Iteration   4: 4.721 ops/s
Iteration   5: 4.837 ops/s
Iteration   6: 4.823 ops/s
Iteration   7: 4.983 ops/s
Iteration   8: 4.951 ops/s
Iteration   9: 4.886 ops/s
Iteration  10: 5.041 ops/s

# Run progress: 70.00% complete, ETA 00:04:49
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
4.593 ops/s
# Warmup Iteration   2: 4.815 ops/s
# Warmup Iteration   3: 4.876 ops/s
# Warmup Iteration   4: 4.891 ops/s
# Warmup Iteration   5: 4.857 ops/s
Iteration   1: 5.020 ops/s
Iteration   2: 4.982 ops/s
Iteration   3: 4.955 ops/s
Iteration   4: 4.814 ops/s
Iteration   5: 4.750 ops/s
Iteration   6: 5.007 ops/s
Iteration   7: 5.074 ops/s
Iteration   8: 4.907 ops/s
Iteration   9: 4.936 ops/s
Iteration  10: 4.789 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  4.917 ±(99.9%) 0.089 ops/s [Average]
  (min, avg, max) = (4.721, 4.917, 5.074), stdev = 0.102
  CI (99.9%): [4.828, 5.006] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:03:14
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4.652 ops/s
# Warmup Iteration   2: 4.774 ops/s
# Warmup Iteration   3: 4.890 ops/s
# Warmup Iteration   4: 4.811 ops/s
# Warmup Iteration   5: 4.753 ops/s
Iteration   1: 4.870 ops/s
Iteration   2: 4.854 ops/s
Iteration   3: 4.835 ops/s
Iteration   4: 4.920 ops/s
Iteration   5: 4.812 ops/s
Iteration   6: 4.781 ops/s
Iteration   7: 4.850 ops/s
Iteration   8: 4.910 ops/s
Iteration   9: 4.720 ops/s
Iteration  10: 4.799 ops/s

# Run progress: 90.00% complete, ETA 00:01:37
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
4.607 ops/s
# Warmup Iteration   2: 4.744 ops/s
# Warmup Iteration   3: 4.865 ops/s
# Warmup Iteration   4: 4.782 ops/s
# Warmup Iteration   5: 4.810 ops/s
Iteration   1: 4.717 ops/s
Iteration   2: 4.670 ops/s
Iteration   3: 4.862 ops/s
Iteration   4: 4.661 ops/s
Iteration   5: 4.726 ops/s
Iteration   6: 4.799 ops/s
Iteration   7: 4.729 ops/s
Iteration   8: 4.949 ops/s
Iteration   9: 4.816 ops/s
Iteration  10: 4.678 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  4.798 ±(99.9%) 0.074 ops/s [Average]
  (min, avg, max) = (4.661, 4.798, 4.949), stdev = 0.086
  CI (99.9%): [4.723, 4.872] (assumes normal distribution)


# Run complete. Total time: 00:16:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt   Score   Error  Units
Deserialization.dsljson              thrpt   20  13.305 ± 1.051  ops/s
Deserialization.dsljson_reflection   thrpt   20  13.176 ± 0.868  ops/s
Deserialization.gson                 thrpt   20   4.537 ± 0.105  ops/s
Deserialization.jackson              thrpt   20   4.917 ± 0.089  ops/s
Deserialization.jackson_afterburner  thrpt   20   4.798 ± 0.074  ops/s
