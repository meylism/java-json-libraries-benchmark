# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 14293.921 ops/s
# Warmup Iteration   2: 14539.968 ops/s
# Warmup Iteration   3: 14554.283 ops/s
# Warmup Iteration   4: 14133.216 ops/s
# Warmup Iteration   5: 14336.145 ops/s
Iteration   1: 14549.417 ops/s
Iteration   2: 14555.118 ops/s
Iteration   3: 14568.790 ops/s
Iteration   4: 14599.769 ops/s
Iteration   5: 14554.168 ops/s
Iteration   6: 14543.956 ops/s
Iteration   7: 14620.586 ops/s
Iteration   8: 14582.477 ops/s
Iteration   9: 14595.801 ops/s
Iteration  10: 14601.982 ops/s

# Run progress: 10.00% complete, ETA 00:08:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 14077.856 ops/s
# Warmup Iteration   2: 14121.098 ops/s
# Warmup Iteration   3: 14151.077 ops/s
# Warmup Iteration   4: 14282.422 ops/s
# Warmup Iteration   5: 13711.347 ops/s
Iteration   1: 14134.125 ops/s
Iteration   2: 14235.973 ops/s
Iteration   3: 14323.855 ops/s
Iteration   4: 14250.501 ops/s
Iteration   5: 14263.705 ops/s
Iteration   6: 14219.774 ops/s
Iteration   7: 14234.399 ops/s
Iteration   8: 14371.136 ops/s
Iteration   9: 14269.282 ops/s
Iteration  10: 14235.191 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  14415.500 ?(99.9%) 149.725 ops/s [Average]
  (min, avg, max) = (14134.125, 14415.500, 14620.586), stdev = 172.424
  CI (99.9%): [14265.775, 14565.225] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:26
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 12810.803 ops/s
# Warmup Iteration   2: 12960.681 ops/s
# Warmup Iteration   3: 13086.043 ops/s
# Warmup Iteration   4: 13041.835 ops/s
# Warmup Iteration   5: 12432.447 ops/s
Iteration   1: 12378.274 ops/s
Iteration   2: 12155.682 ops/s
Iteration   3: 12496.093 ops/s
Iteration   4: 12038.310 ops/s
Iteration   5: 12556.663 ops/s
Iteration   6: 12892.723 ops/s
Iteration   7: 12826.971 ops/s
Iteration   8: 13031.106 ops/s
Iteration   9: 13045.135 ops/s
Iteration  10: 12972.621 ops/s

# Run progress: 30.00% complete, ETA 00:06:30
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5627.945 ops/s
# Warmup Iteration   2: 5787.011 ops/s
# Warmup Iteration   3: 5819.388 ops/s
# Warmup Iteration   4: 5823.788 ops/s
# Warmup Iteration   5: 5832.728 ops/s
Iteration   1: 5852.306 ops/s
Iteration   2: 5661.354 ops/s
Iteration   3: 5809.135 ops/s
Iteration   4: 5762.347 ops/s
Iteration   5: 5851.497 ops/s
Iteration   6: 5754.956 ops/s
Iteration   7: 5270.873 ops/s
Iteration   8: 5106.234 ops/s
Iteration   9: 5135.901 ops/s
Iteration  10: 5389.311 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  9099.375 ?(99.9%) 3166.628 ops/s [Average]
  (min, avg, max) = (5106.234, 9099.375, 13045.135), stdev = 3646.694
  CI (99.9%): [5932.746, 12266.003] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:05:34
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2676.060 ops/s
# Warmup Iteration   2: 2919.241 ops/s
# Warmup Iteration   3: 2913.937 ops/s
# Warmup Iteration   4: 2912.779 ops/s
# Warmup Iteration   5: 2920.646 ops/s
Iteration   1: 2933.846 ops/s
Iteration   2: 2931.596 ops/s
Iteration   3: 2843.041 ops/s
Iteration   4: 2824.284 ops/s
Iteration   5: 2708.204 ops/s
Iteration   6: 2785.738 ops/s
Iteration   7: 2825.550 ops/s
Iteration   8: 2906.897 ops/s
Iteration   9: 2900.743 ops/s
Iteration  10: 2920.126 ops/s

# Run progress: 50.00% complete, ETA 00:04:38
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2377.112 ops/s
# Warmup Iteration   2: 2482.423 ops/s
# Warmup Iteration   3: 2476.561 ops/s
# Warmup Iteration   4: 2490.476 ops/s
# Warmup Iteration   5: 2487.424 ops/s
Iteration   1: 2363.127 ops/s
Iteration   2: 2346.120 ops/s
Iteration   3: 2454.584 ops/s
Iteration   4: 2384.636 ops/s
Iteration   5: 2436.090 ops/s
Iteration   6: 2439.329 ops/s
Iteration   7: 2470.914 ops/s
Iteration   8: 2471.932 ops/s
Iteration   9: 2478.447 ops/s
Iteration  10: 2447.350 ops/s


Result "com.meylism.databind.Serialization.gson":
  2643.628 ?(99.9%) 198.098 ops/s [Average]
  (min, avg, max) = (2346.120, 2643.628, 2933.846), stdev = 228.130
  CI (99.9%): [2445.530, 2841.725] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:03:43
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7878.857 ops/s
# Warmup Iteration   2: 8215.149 ops/s
# Warmup Iteration   3: 8376.146 ops/s
# Warmup Iteration   4: 8349.448 ops/s
# Warmup Iteration   5: 8299.252 ops/s
Iteration   1: 8341.169 ops/s
Iteration   2: 8349.432 ops/s
Iteration   3: 8362.133 ops/s
Iteration   4: 8369.316 ops/s
Iteration   5: 8228.493 ops/s
Iteration   6: 7370.206 ops/s
Iteration   7: 7475.351 ops/s
Iteration   8: 7218.731 ops/s
Iteration   9: 7628.130 ops/s
Iteration  10: 7345.626 ops/s

# Run progress: 70.00% complete, ETA 00:02:47
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 7002.614 ops/s
# Warmup Iteration   2: 7558.145 ops/s
# Warmup Iteration   3: 8010.034 ops/s
# Warmup Iteration   4: 8206.924 ops/s
# Warmup Iteration   5: 8270.082 ops/s
Iteration   1: 8254.818 ops/s
Iteration   2: 8079.197 ops/s
Iteration   3: 7214.121 ops/s
Iteration   4: 7823.392 ops/s
Iteration   5: 7945.176 ops/s
Iteration   6: 7699.335 ops/s
Iteration   7: 7379.222 ops/s
Iteration   8: 7447.089 ops/s
Iteration   9: 7589.499 ops/s
Iteration  10: 8126.380 ops/s


Result "com.meylism.databind.Serialization.jackson":
  7812.341 ?(99.9%) 366.883 ops/s [Average]
  (min, avg, max) = (7214.121, 7812.341, 8369.316), stdev = 422.502
  CI (99.9%): [7445.458, 8179.223] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:51
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7115.648 ops/s
# Warmup Iteration   2: 8256.708 ops/s
# Warmup Iteration   3: 8055.215 ops/s
# Warmup Iteration   4: 8098.728 ops/s
# Warmup Iteration   5: 7865.448 ops/s
Iteration   1: 7722.093 ops/s
Iteration   2: 8093.597 ops/s
Iteration   3: 8275.700 ops/s
Iteration   4: 8274.548 ops/s
Iteration   5: 8263.642 ops/s
Iteration   6: 8233.327 ops/s
Iteration   7: 8272.623 ops/s
Iteration   8: 8243.880 ops/s
Iteration   9: 7802.936 ops/s
Iteration  10: 7806.190 ops/s

# Run progress: 90.00% complete, ETA 00:00:55
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
7389.147 ops/s
# Warmup Iteration   2: 7672.390 ops/s
# Warmup Iteration   3: 8303.760 ops/s
# Warmup Iteration   4: 8401.676 ops/s
# Warmup Iteration   5: 8364.571 ops/s
Iteration   1: 8454.907 ops/s
Iteration   2: 8435.663 ops/s
Iteration   3: 8447.772 ops/s
Iteration   4: 8432.558 ops/s
Iteration   5: 8421.655 ops/s
Iteration   6: 8447.481 ops/s
Iteration   7: 8406.099 ops/s
Iteration   8: 8445.439 ops/s
Iteration   9: 8432.843 ops/s
Iteration  10: 7905.585 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  8240.927 ?(99.9%) 212.010 ops/s [Average]
  (min, avg, max) = (7722.093, 8240.927, 8454.907), stdev = 244.152
  CI (99.9%): [8028.916, 8452.937] (assumes normal distribution)


# Run complete. Total time: 00:09:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt      Score      Error  Units
Serialization.dsljson              thrpt   20  14415.500 ?  149.725  ops/s
Serialization.dsljson_reflection   thrpt   20   9099.375 ? 3166.628  ops/s
Serialization.gson                 thrpt   20   2643.628 ?  198.098  ops/s
Serialization.jackson              thrpt   20   7812.341 ?  366.883  ops/s
Serialization.jackson_afterburner  thrpt   20   8240.927 ?  212.010  ops/s
