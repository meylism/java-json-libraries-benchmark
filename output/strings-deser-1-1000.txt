# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1681.634 ops/s
# Warmup Iteration   2: 1915.476 ops/s
# Warmup Iteration   3: 1957.226 ops/s
# Warmup Iteration   4: 1887.474 ops/s
# Warmup Iteration   5: 1765.625 ops/s
Iteration   1: 1885.976 ops/s
Iteration   2: 1891.472 ops/s
Iteration   3: 1861.486 ops/s
Iteration   4: 1928.930 ops/s
Iteration   5: 1955.963 ops/s
Iteration   6: 1839.736 ops/s
Iteration   7: 1878.922 ops/s
Iteration   8: 1931.081 ops/s
Iteration   9: 1952.934 ops/s
Iteration  10: 1906.696 ops/s

# Run progress: 10.00% complete, ETA 00:08:24
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1866.914 ops/s
# Warmup Iteration   2: 2002.555 ops/s
# Warmup Iteration   3: 2001.197 ops/s
# Warmup Iteration   4: 1997.858 ops/s
# Warmup Iteration   5: 1961.460 ops/s
Iteration   1: 1900.101 ops/s
Iteration   2: 1870.180 ops/s
Iteration   3: 1880.877 ops/s
Iteration   4: 1966.116 ops/s
Iteration   5: 1976.794 ops/s
Iteration   6: 2003.070 ops/s
Iteration   7: 2003.932 ops/s
Iteration   8: 1985.456 ops/s
Iteration   9: 1998.062 ops/s
Iteration  10: 2001.365 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  1930.957 ?(99.9%) 46.544 ops/s [Average]
  (min, avg, max) = (1839.736, 1930.957, 2003.932), stdev = 53.600
  CI (99.9%): [1884.414, 1977.501] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:07:28
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1885.809 ops/s
# Warmup Iteration   2: 1990.011 ops/s
# Warmup Iteration   3: 1978.260 ops/s
# Warmup Iteration   4: 1873.503 ops/s
# Warmup Iteration   5: 1919.732 ops/s
Iteration   1: 1925.458 ops/s
Iteration   2: 1917.689 ops/s
Iteration   3: 1885.940 ops/s
Iteration   4: 1904.936 ops/s
Iteration   5: 1960.328 ops/s
Iteration   6: 1977.605 ops/s
Iteration   7: 1920.097 ops/s
Iteration   8: 1863.262 ops/s
Iteration   9: 1823.245 ops/s
Iteration  10: 1810.561 ops/s

# Run progress: 30.00% complete, ETA 00:06:32
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1622.643 ops/s
# Warmup Iteration   2: 1725.222 ops/s
# Warmup Iteration   3: 1758.000 ops/s
# Warmup Iteration   4: 1793.210 ops/s
# Warmup Iteration   5: 1757.892 ops/s
Iteration   1: 1798.235 ops/s
Iteration   2: 1858.953 ops/s
Iteration   3: 1863.154 ops/s
Iteration   4: 1927.083 ops/s
Iteration   5: 1961.875 ops/s
Iteration   6: 1963.482 ops/s
Iteration   7: 1980.069 ops/s
Iteration   8: 1976.004 ops/s
Iteration   9: 1975.779 ops/s
Iteration  10: 1974.769 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  1913.426 ?(99.9%) 52.099 ops/s [Average]
  (min, avg, max) = (1798.235, 1913.426, 1980.069), stdev = 59.998
  CI (99.9%): [1861.327, 1965.526] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:05:36
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 437.490 ops/s
# Warmup Iteration   2: 503.435 ops/s
# Warmup Iteration   3: 532.998 ops/s
# Warmup Iteration   4: 542.571 ops/s
# Warmup Iteration   5: 544.426 ops/s
Iteration   1: 508.028 ops/s
Iteration   2: 504.859 ops/s
Iteration   3: 539.943 ops/s
Iteration   4: 514.690 ops/s
Iteration   5: 536.482 ops/s
Iteration   6: 541.423 ops/s
Iteration   7: 543.760 ops/s
Iteration   8: 541.251 ops/s
Iteration   9: 542.667 ops/s
Iteration  10: 542.521 ops/s

# Run progress: 50.00% complete, ETA 00:04:40
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1049.594 ops/s
# Warmup Iteration   2: 1109.910 ops/s
# Warmup Iteration   3: 1075.653 ops/s
# Warmup Iteration   4: 1088.298 ops/s
# Warmup Iteration   5: 1081.007 ops/s
Iteration   1: 1098.453 ops/s
Iteration   2: 1066.376 ops/s
Iteration   3: 1081.109 ops/s
Iteration   4: 1120.167 ops/s
Iteration   5: 1007.678 ops/s
Iteration   6: 940.383 ops/s
Iteration   7: 974.602 ops/s
Iteration   8: 1024.530 ops/s
Iteration   9: 992.504 ops/s
Iteration  10: 1064.894 ops/s


Result "com.meylism.databind.Deserialization.gson":
  784.316 ?(99.9%) 228.048 ops/s [Average]
  (min, avg, max) = (504.859, 784.316, 1120.167), stdev = 262.620
  CI (99.9%): [556.268, 1012.364] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:03:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1704.958 ops/s
# Warmup Iteration   2: 1661.896 ops/s
# Warmup Iteration   3: 1710.716 ops/s
# Warmup Iteration   4: 1741.238 ops/s
# Warmup Iteration   5: 1689.969 ops/s
Iteration   1: 1694.310 ops/s
Iteration   2: 1639.912 ops/s
Iteration   3: 1692.131 ops/s
Iteration   4: 1693.982 ops/s
Iteration   5: 1655.848 ops/s
Iteration   6: 1632.221 ops/s
Iteration   7: 1807.447 ops/s
Iteration   8: 1709.193 ops/s
Iteration   9: 1650.869 ops/s
Iteration  10: 1625.338 ops/s

# Run progress: 70.00% complete, ETA 00:02:48
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1484.392 ops/s
# Warmup Iteration   2: 1645.977 ops/s
# Warmup Iteration   3: 1676.954 ops/s
# Warmup Iteration   4: 1602.459 ops/s
# Warmup Iteration   5: 1757.273 ops/s
Iteration   1: 1796.499 ops/s
Iteration   2: 1814.278 ops/s
Iteration   3: 1808.897 ops/s
Iteration   4: 1800.348 ops/s
Iteration   5: 1765.580 ops/s
Iteration   6: 1727.235 ops/s
Iteration   7: 1670.482 ops/s
Iteration   8: 1595.525 ops/s
Iteration   9: 1591.314 ops/s
Iteration  10: 1634.290 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  1700.285 ?(99.9%) 65.213 ops/s [Average]
  (min, avg, max) = (1591.314, 1700.285, 1814.278), stdev = 75.100
  CI (99.9%): [1635.072, 1765.498] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:01:52
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1480.088 ops/s
# Warmup Iteration   2: 1689.460 ops/s
# Warmup Iteration   3: 1718.717 ops/s
# Warmup Iteration   4: 1718.610 ops/s
# Warmup Iteration   5: 1694.026 ops/s
Iteration   1: 1676.839 ops/s
Iteration   2: 1776.574 ops/s
Iteration   3: 1740.485 ops/s
Iteration   4: 1742.273 ops/s
Iteration   5: 1712.642 ops/s
Iteration   6: 1760.011 ops/s
Iteration   7: 1728.245 ops/s
Iteration   8: 1715.566 ops/s
Iteration   9: 1665.978 ops/s
Iteration  10: 1766.457 ops/s

# Run progress: 90.00% complete, ETA 00:00:56
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1484.565 ops/s
# Warmup Iteration   2: 1722.663 ops/s
# Warmup Iteration   3: 1658.151 ops/s
# Warmup Iteration   4: 1631.789 ops/s
# Warmup Iteration   5: 1696.823 ops/s
Iteration   1: 1594.509 ops/s
Iteration   2: 1619.314 ops/s
Iteration   3: 1613.241 ops/s
Iteration   4: 1775.744 ops/s
Iteration   5: 1644.629 ops/s
Iteration   6: 1753.730 ops/s
Iteration   7: 1788.932 ops/s
Iteration   8: 1800.175 ops/s
Iteration   9: 1716.232 ops/s
Iteration  10: 1721.541 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  1715.656 ?(99.9%) 53.017 ops/s [Average]
  (min, avg, max) = (1594.509, 1715.656, 1800.175), stdev = 61.055
  CI (99.9%): [1662.639, 1768.673] (assumes normal distribution)


# Run complete. Total time: 00:09:20

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  1930.957 ?  46.544  ops/s
Deserialization.dsljson_reflection   thrpt   20  1913.426 ?  52.099  ops/s
Deserialization.gson                 thrpt   20   784.316 ? 228.048  ops/s
Deserialization.jackson              thrpt   20  1700.285 ?  65.213  ops/s
Deserialization.jackson_afterburner  thrpt   20  1715.656 ?  53.017  ops/s
