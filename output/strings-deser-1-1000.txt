# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1994.693 ops/s
# Warmup Iteration   2: 2097.020 ops/s
# Warmup Iteration   3: 2096.175 ops/s
# Warmup Iteration   4: 1918.600 ops/s
# Warmup Iteration   5: 1838.914 ops/s
Iteration   1: 1892.529 ops/s
Iteration   2: 1946.371 ops/s
Iteration   3: 2033.366 ops/s
Iteration   4: 1984.311 ops/s
Iteration   5: 2025.506 ops/s
Iteration   6: 1965.952 ops/s
Iteration   7: 1883.798 ops/s
Iteration   8: 1889.979 ops/s
Iteration   9: 2006.500 ops/s
Iteration  10: 1897.928 ops/s

# Run progress: 10.00% complete, ETA 00:12:19
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1840.226 ops/s
# Warmup Iteration   2: 1931.329 ops/s
# Warmup Iteration   3: 1831.811 ops/s
# Warmup Iteration   4: 1828.533 ops/s
# Warmup Iteration   5: 1825.411 ops/s
Iteration   1: 1832.113 ops/s
Iteration   2: 1818.587 ops/s
Iteration   3: 1837.235 ops/s
Iteration   4: 1835.942 ops/s
Iteration   5: 1796.490 ops/s
Iteration   6: 1868.976 ops/s
Iteration   7: 1833.113 ops/s
Iteration   8: 1836.795 ops/s
Iteration   9: 1814.965 ops/s
Iteration  10: 1855.873 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  1892.816 ?(99.9%) 65.007 ops/s [Average]
  (min, avg, max) = (1796.490, 1892.816, 2033.366), stdev = 74.862
  CI (99.9%): [1827.809, 1957.824] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:58
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1768.044 ops/s
# Warmup Iteration   2: 1873.018 ops/s
# Warmup Iteration   3: 1816.595 ops/s
# Warmup Iteration   4: 1904.634 ops/s
# Warmup Iteration   5: 1881.030 ops/s
Iteration   1: 1841.302 ops/s
Iteration   2: 1860.205 ops/s
Iteration   3: 1851.550 ops/s
Iteration   4: 1960.203 ops/s
Iteration   5: 2055.657 ops/s
Iteration   6: 2071.471 ops/s
Iteration   7: 2041.358 ops/s
Iteration   8: 2046.753 ops/s
Iteration   9: 2041.890 ops/s
Iteration  10: 2043.054 ops/s

# Run progress: 30.00% complete, ETA 00:09:35
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1856.998 ops/s
# Warmup Iteration   2: 1963.191 ops/s
# Warmup Iteration   3: 1998.826 ops/s
# Warmup Iteration   4: 2024.678 ops/s
# Warmup Iteration   5: 1945.046 ops/s
Iteration   1: 1997.106 ops/s
Iteration   2: 1994.271 ops/s
Iteration   3: 2009.035 ops/s
Iteration   4: 1967.902 ops/s
Iteration   5: 2029.179 ops/s
Iteration   6: 2103.995 ops/s
Iteration   7: 2102.765 ops/s
Iteration   8: 2083.810 ops/s
Iteration   9: 2114.948 ops/s
Iteration  10: 2108.722 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  2016.259 ?(99.9%) 72.982 ops/s [Average]
  (min, avg, max) = (1841.302, 2016.259, 2114.948), stdev = 84.046
  CI (99.9%): [1943.277, 2089.240] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:13
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 983.110 ops/s
# Warmup Iteration   2: 1232.539 ops/s
# Warmup Iteration   3: 1234.371 ops/s
# Warmup Iteration   4: 1216.772 ops/s
# Warmup Iteration   5: 1153.676 ops/s
Iteration   1: 1166.123 ops/s
Iteration   2: 1140.442 ops/s
Iteration   3: 1148.772 ops/s
Iteration   4: 1142.476 ops/s
Iteration   5: 1178.491 ops/s
Iteration   6: 1143.201 ops/s
Iteration   7: 1162.345 ops/s
Iteration   8: 1117.354 ops/s
Iteration   9: 1191.102 ops/s
Iteration  10: 1210.565 ops/s

# Run progress: 50.00% complete, ETA 00:06:51
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 859.578 ops/s
# Warmup Iteration   2: 1064.902 ops/s
# Warmup Iteration   3: 1020.535 ops/s
# Warmup Iteration   4: 1067.961 ops/s
# Warmup Iteration   5: 1103.773 ops/s
Iteration   1: 1092.375 ops/s
Iteration   2: 1100.160 ops/s
Iteration   3: 1104.545 ops/s
Iteration   4: 1098.692 ops/s
Iteration   5: 1101.601 ops/s
Iteration   6: 1103.990 ops/s
Iteration   7: 1103.077 ops/s
Iteration   8: 1095.917 ops/s
Iteration   9: 1100.947 ops/s
Iteration  10: 1013.907 ops/s


Result "com.meylism.databind.Deserialization.gson":
  1125.804 ?(99.9%) 38.398 ops/s [Average]
  (min, avg, max) = (1013.907, 1125.804, 1210.565), stdev = 44.219
  CI (99.9%): [1087.406, 1164.202] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:28
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 2072.066 ops/s
# Warmup Iteration   2: 2191.676 ops/s
# Warmup Iteration   3: 2057.076 ops/s
# Warmup Iteration   4: 2079.259 ops/s
# Warmup Iteration   5: 2091.459 ops/s
Iteration   1: 2187.326 ops/s
Iteration   2: 2116.145 ops/s
Iteration   3: 1894.675 ops/s
Iteration   4: 1969.082 ops/s
Iteration   5: 1996.132 ops/s
Iteration   6: 2078.580 ops/s
Iteration   7: 2119.423 ops/s
Iteration   8: 2167.441 ops/s
Iteration   9: 2078.773 ops/s
Iteration  10: 2096.285 ops/s

# Run progress: 70.00% complete, ETA 00:04:06
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 1975.053 ops/s
# Warmup Iteration   2: 2105.458 ops/s
# Warmup Iteration   3: 2091.456 ops/s
# Warmup Iteration   4: 2060.962 ops/s
# Warmup Iteration   5: 2077.124 ops/s
Iteration   1: 2159.709 ops/s
Iteration   2: 2133.504 ops/s
Iteration   3: 2147.042 ops/s
Iteration   4: 2174.153 ops/s
Iteration   5: 2139.800 ops/s
Iteration   6: 2108.946 ops/s
Iteration   7: 2219.846 ops/s
Iteration   8: 2291.828 ops/s
Iteration   9: 2111.588 ops/s
Iteration  10: 2096.512 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  2114.339 ?(99.9%) 75.880 ops/s [Average]
  (min, avg, max) = (1894.675, 2114.339, 2291.828), stdev = 87.383
  CI (99.9%): [2038.460, 2190.219] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx2g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:44
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
1739.936 ops/s
# Warmup Iteration   2: 1916.203 ops/s
# Warmup Iteration   3: 1955.183 ops/s
# Warmup Iteration   4: 1858.647 ops/s
# Warmup Iteration   5: 1970.548 ops/s
Iteration   1: 2032.089 ops/s
Iteration   2: 2037.994 ops/s
Iteration   3: 2027.760 ops/s
Iteration   4: 2044.277 ops/s
Iteration   5: 2002.218 ops/s
Iteration   6: 1860.524 ops/s
Iteration   7: 1879.440 ops/s
Iteration   8: 1935.054 ops/s
Iteration   9: 1933.858 ops/s
Iteration  10: 1964.023 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-parser-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
2010.476 ops/s
# Warmup Iteration   2: 2103.951 ops/s
# Warmup Iteration   3: 2175.318 ops/s
# Warmup Iteration   4: 2227.724 ops/s
# Warmup Iteration   5: 2176.388 ops/s
Iteration   1: 2204.797 ops/s
Iteration   2: 2216.518 ops/s
Iteration   3: 2224.352 ops/s
Iteration   4: 2241.044 ops/s
Iteration   5: 2238.295 ops/s
Iteration   6: 2238.582 ops/s
Iteration   7: 2217.555 ops/s
Iteration   8: 2224.680 ops/s
Iteration   9: 2233.750 ops/s
Iteration  10: 2222.684 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  2098.975 ?(99.9%) 120.548 ops/s [Average]
  (min, avg, max) = (1860.524, 2098.975, 2241.044), stdev = 138.823
  CI (99.9%): [1978.427, 2219.523] (assumes normal distribution)


# Run complete. Total time: 00:13:42

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt     Score     Error  Units
Deserialization.dsljson              thrpt   20  1892.816 ?  65.007  ops/s
Deserialization.dsljson_reflection   thrpt   20  2016.259 ?  72.982  ops/s
Deserialization.gson                 thrpt   20  1125.804 ?  38.398  ops/s
Deserialization.jackson              thrpt   20  2114.339 ?  75.880  ops/s
Deserialization.jackson_afterburner  thrpt   20  2098.975 ? 120.548  ops/s
