# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
64.150 ops/s
# Warmup Iteration   2: 69.584 ops/s
# Warmup Iteration   3: 70.015 ops/s
# Warmup Iteration   4: 70.562 ops/s
# Warmup Iteration   5: 71.105 ops/s
Iteration   1: 70.528 ops/s
Iteration   2: 71.865 ops/s
Iteration   3: 66.927 ops/s
Iteration   4: 72.049 ops/s
Iteration   5: 69.143 ops/s
Iteration   6: 67.756 ops/s
Iteration   7: 71.865 ops/s
Iteration   8: 71.549 ops/s
Iteration   9: 70.104 ops/s
Iteration  10: 72.268 ops/s

# Run progress: 10.00% complete, ETA 00:12:32
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
64.734 ops/s
# Warmup Iteration   2: 69.712 ops/s
# Warmup Iteration   3: 69.015 ops/s
# Warmup Iteration   4: 70.390 ops/s
# Warmup Iteration   5: 68.791 ops/s
Iteration   1: 71.600 ops/s
Iteration   2: 66.657 ops/s
Iteration   3: 70.736 ops/s
Iteration   4: 71.195 ops/s
Iteration   5: 66.780 ops/s
Iteration   6: 68.319 ops/s
Iteration   7: 71.808 ops/s
Iteration   8: 69.192 ops/s
Iteration   9: 69.238 ops/s
Iteration  10: 68.308 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  69.894 ±(99.9%) 1.670 ops/s [Average]
  (min, avg, max) = (66.657, 69.894, 72.268), stdev = 1.923
  CI (99.9%): [68.225, 71.564] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:08
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
67.018 ops/s
# Warmup Iteration   2: 72.866 ops/s
# Warmup Iteration   3: 72.833 ops/s
# Warmup Iteration   4: 72.203 ops/s
# Warmup Iteration   5: 73.948 ops/s
Iteration   1: 74.199 ops/s
Iteration   2: 70.712 ops/s
Iteration   3: 76.508 ops/s
Iteration   4: 72.405 ops/s
Iteration   5: 71.176 ops/s
Iteration   6: 77.251 ops/s
Iteration   7: 73.651 ops/s
Iteration   8: 69.796 ops/s
Iteration   9: 75.753 ops/s
Iteration  10: 73.213 ops/s

# Run progress: 30.00% complete, ETA 00:09:45
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
64.783 ops/s
# Warmup Iteration   2: 68.356 ops/s
# Warmup Iteration   3: 68.575 ops/s
# Warmup Iteration   4: 68.618 ops/s
# Warmup Iteration   5: 68.755 ops/s
Iteration   1: 69.341 ops/s
Iteration   2: 69.870 ops/s
Iteration   3: 68.309 ops/s
Iteration   4: 67.242 ops/s
Iteration   5: 69.696 ops/s
Iteration   6: 69.119 ops/s
Iteration   7: 68.767 ops/s
Iteration   8: 66.896 ops/s
Iteration   9: 68.764 ops/s
Iteration  10: 68.124 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  71.040 ±(99.9%) 2.698 ops/s [Average]
  (min, avg, max) = (66.896, 71.040, 77.251), stdev = 3.107
  CI (99.9%): [68.342, 73.737] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:21
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
66.356 ops/s
# Warmup Iteration   2: 68.720 ops/s
# Warmup Iteration   3: 68.649 ops/s
# Warmup Iteration   4: 68.670 ops/s
# Warmup Iteration   5: 68.688 ops/s
Iteration   1: 68.587 ops/s
Iteration   2: 68.521 ops/s
Iteration   3: 68.580 ops/s
Iteration   4: 68.614 ops/s
Iteration   5: 68.612 ops/s
Iteration   6: 68.213 ops/s
Iteration   7: 67.932 ops/s
Iteration   8: 68.894 ops/s
Iteration   9: 68.510 ops/s
Iteration  10: 68.589 ops/s

# Run progress: 50.00% complete, ETA 00:06:57
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
66.866 ops/s
# Warmup Iteration   2: 69.486 ops/s
# Warmup Iteration   3: 69.406 ops/s
# Warmup Iteration   4: 69.480 ops/s
# Warmup Iteration   5: 69.378 ops/s
Iteration   1: 69.801 ops/s
Iteration   2: 69.489 ops/s
Iteration   3: 69.457 ops/s
Iteration   4: 69.403 ops/s
Iteration   5: 69.769 ops/s
Iteration   6: 69.492 ops/s
Iteration   7: 69.853 ops/s
Iteration   8: 69.298 ops/s
Iteration   9: 69.524 ops/s
Iteration  10: 69.846 ops/s


Result "com.meylism.databind.Deserialization.gson":
  69.049 ±(99.9%) 0.523 ops/s [Average]
  (min, avg, max) = (67.932, 69.049, 69.853), stdev = 0.603
  CI (99.9%): [68.526, 69.573] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:33
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
135.108 ops/s
# Warmup Iteration   2: 143.537 ops/s
# Warmup Iteration   3: 145.095 ops/s
# Warmup Iteration   4: 142.855 ops/s
# Warmup Iteration   5: 144.462 ops/s
Iteration   1: 142.973 ops/s
Iteration   2: 143.846 ops/s
Iteration   3: 143.218 ops/s
Iteration   4: 143.513 ops/s
Iteration   5: 143.323 ops/s
Iteration   6: 143.410 ops/s
Iteration   7: 142.656 ops/s
Iteration   8: 144.526 ops/s
Iteration   9: 144.358 ops/s
Iteration  10: 143.611 ops/s

# Run progress: 70.00% complete, ETA 00:04:09
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
138.823 ops/s
# Warmup Iteration   2: 143.262 ops/s
# Warmup Iteration   3: 143.392 ops/s
# Warmup Iteration   4: 142.211 ops/s
# Warmup Iteration   5: 143.931 ops/s
Iteration   1: 145.010 ops/s
Iteration   2: 144.382 ops/s
Iteration   3: 143.295 ops/s
Iteration   4: 143.343 ops/s
Iteration   5: 142.718 ops/s
Iteration   6: 143.089 ops/s
Iteration   7: 144.452 ops/s
Iteration   8: 141.627 ops/s
Iteration   9: 143.020 ops/s
Iteration  10: 143.492 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  143.493 ±(99.9%) 0.678 ops/s [Average]
  (min, avg, max) = (141.627, 143.493, 145.010), stdev = 0.781
  CI (99.9%): [142.815, 144.171] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:46
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
138.527 ops/s
# Warmup Iteration   2: 144.959 ops/s
# Warmup Iteration   3: 143.720 ops/s
# Warmup Iteration   4: 142.631 ops/s
# Warmup Iteration   5: 145.293 ops/s
Iteration   1: 143.249 ops/s
Iteration   2: 143.971 ops/s
Iteration   3: 144.654 ops/s
Iteration   4: 144.628 ops/s
Iteration   5: 143.579 ops/s
Iteration   6: 143.737 ops/s
Iteration   7: 145.057 ops/s
Iteration   8: 143.289 ops/s
Iteration   9: 143.860 ops/s
Iteration  10: 144.354 ops/s

# Run progress: 90.00% complete, ETA 00:01:23
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
139.240 ops/s
# Warmup Iteration   2: 144.986 ops/s
# Warmup Iteration   3: 144.768 ops/s
# Warmup Iteration   4: 144.307 ops/s
# Warmup Iteration   5: 144.574 ops/s
Iteration   1: 145.953 ops/s
Iteration   2: 144.278 ops/s
Iteration   3: 144.111 ops/s
Iteration   4: 142.483 ops/s
Iteration   5: 142.584 ops/s
Iteration   6: 143.653 ops/s
Iteration   7: 143.657 ops/s
Iteration   8: 144.210 ops/s
Iteration   9: 143.503 ops/s
Iteration  10: 143.926 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  143.937 ±(99.9%) 0.692 ops/s [Average]
  (min, avg, max) = (142.483, 143.937, 145.953), stdev = 0.797
  CI (99.9%): [143.245, 144.629] (assumes normal distribution)


# Run complete. Total time: 00:13:49

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score   Error  Units
Deserialization.dsljson              thrpt   20   69.894 ± 1.670  ops/s
Deserialization.dsljson_reflection   thrpt   20   71.040 ± 2.698  ops/s
Deserialization.gson                 thrpt   20   69.049 ± 0.523  ops/s
Deserialization.jackson              thrpt   20  143.493 ± 0.678  ops/s
Deserialization.jackson_afterburner  thrpt   20  143.937 ± 0.692  ops/s
