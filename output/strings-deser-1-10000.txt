# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
301.228 ops/s
# Warmup Iteration   2: 363.778 ops/s
# Warmup Iteration   3: 367.923 ops/s
# Warmup Iteration   4: 375.663 ops/s
# Warmup Iteration   5: 354.129 ops/s
Iteration   1: 339.789 ops/s
Iteration   2: 361.040 ops/s
Iteration   3: 335.613 ops/s
Iteration   4: 352.855 ops/s
Iteration   5: 349.011 ops/s
Iteration   6: 358.721 ops/s
Iteration   7: 359.644 ops/s
Iteration   8: 363.245 ops/s
Iteration   9: 357.724 ops/s
Iteration  10: 357.651 ops/s

# Run progress: 10.00% complete, ETA 00:12:30
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
311.616 ops/s
# Warmup Iteration   2: 319.163 ops/s
# Warmup Iteration   3: 332.224 ops/s
# Warmup Iteration   4: 330.396 ops/s
# Warmup Iteration   5: 339.581 ops/s
Iteration   1: 345.997 ops/s
Iteration   2: 345.188 ops/s
Iteration   3: 358.140 ops/s
Iteration   4: 342.387 ops/s
Iteration   5: 339.091 ops/s
Iteration   6: 340.061 ops/s
Iteration   7: 331.521 ops/s
Iteration   8: 323.800 ops/s
Iteration   9: 321.947 ops/s
Iteration  10: 346.597 ops/s


Result "com.meylism.databind.Deserialization.dsljson":
  346.501 ?(99.9%) 10.668 ops/s [Average]
  (min, avg, max) = (321.947, 346.501, 363.245), stdev = 12.286
  CI (99.9%): [335.833, 357.169] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:11:07
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
297.510 ops/s
# Warmup Iteration   2: 340.279 ops/s
# Warmup Iteration   3: 352.982 ops/s
# Warmup Iteration   4: 345.378 ops/s
# Warmup Iteration   5: 337.448 ops/s
Iteration   1: 327.524 ops/s
Iteration   2: 343.556 ops/s
Iteration   3: 351.615 ops/s
Iteration   4: 354.710 ops/s
Iteration   5: 352.707 ops/s
Iteration   6: 334.722 ops/s
Iteration   7: 342.040 ops/s
Iteration   8: 352.907 ops/s
Iteration   9: 355.899 ops/s
Iteration  10: 338.453 ops/s

# Run progress: 30.00% complete, ETA 00:09:44
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
300.486 ops/s
# Warmup Iteration   2: 341.299 ops/s
# Warmup Iteration   3: 343.421 ops/s
# Warmup Iteration   4: 327.437 ops/s
# Warmup Iteration   5: 332.486 ops/s
Iteration   1: 330.240 ops/s
Iteration   2: 356.964 ops/s
Iteration   3: 339.689 ops/s
Iteration   4: 327.891 ops/s
Iteration   5: 307.386 ops/s
Iteration   6: 308.602 ops/s
Iteration   7: 330.675 ops/s
Iteration   8: 312.443 ops/s
Iteration   9: 325.818 ops/s
Iteration  10: 323.801 ops/s


Result "com.meylism.databind.Deserialization.dsljson_reflection":
  335.882 ?(99.9%) 13.635 ops/s [Average]
  (min, avg, max) = (307.386, 335.882, 356.964), stdev = 15.703
  CI (99.9%): [322.247, 349.517] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.gson

# Run progress: 40.00% complete, ETA 00:08:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
496.974 ops/s
# Warmup Iteration   2: 495.443 ops/s
# Warmup Iteration   3: 530.449 ops/s
# Warmup Iteration   4: 504.754 ops/s
# Warmup Iteration   5: 503.813 ops/s
Iteration   1: 502.434 ops/s
Iteration   2: 498.824 ops/s
Iteration   3: 511.266 ops/s
Iteration   4: 513.101 ops/s
Iteration   5: 491.982 ops/s
Iteration   6: 506.151 ops/s
Iteration   7: 509.938 ops/s
Iteration   8: 497.839 ops/s
Iteration   9: 509.465 ops/s
Iteration  10: 517.393 ops/s

# Run progress: 50.00% complete, ETA 00:06:56
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
422.023 ops/s
# Warmup Iteration   2: 442.441 ops/s
# Warmup Iteration   3: 446.396 ops/s
# Warmup Iteration   4: 455.920 ops/s
# Warmup Iteration   5: 454.319 ops/s
Iteration   1: 414.193 ops/s
Iteration   2: 448.904 ops/s
Iteration   3: 446.772 ops/s
Iteration   4: 452.299 ops/s
Iteration   5: 460.549 ops/s
Iteration   6: 455.485 ops/s
Iteration   7: 440.921 ops/s
Iteration   8: 449.390 ops/s
Iteration   9: 453.989 ops/s
Iteration  10: 438.923 ops/s


Result "com.meylism.databind.Deserialization.gson":
  475.991 ?(99.9%) 28.099 ops/s [Average]
  (min, avg, max) = (414.193, 475.991, 517.393), stdev = 32.358
  CI (99.9%): [447.892, 504.090] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson

# Run progress: 60.00% complete, ETA 00:05:32
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
743.878 ops/s
# Warmup Iteration   2: 771.480 ops/s
# Warmup Iteration   3: 781.672 ops/s
# Warmup Iteration   4: 784.915 ops/s
# Warmup Iteration   5: 796.497 ops/s
Iteration   1: 764.261 ops/s
Iteration   2: 726.160 ops/s
Iteration   3: 755.953 ops/s
Iteration   4: 808.202 ops/s
Iteration   5: 788.194 ops/s
Iteration   6: 765.042 ops/s
Iteration   7: 801.099 ops/s
Iteration   8: 783.391 ops/s
Iteration   9: 774.180 ops/s
Iteration  10: 795.767 ops/s

# Run progress: 70.00% complete, ETA 00:04:09
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
709.586 ops/s
# Warmup Iteration   2: 793.778 ops/s
# Warmup Iteration   3: 801.187 ops/s
# Warmup Iteration   4: 778.133 ops/s
# Warmup Iteration   5: 738.513 ops/s
Iteration   1: 770.371 ops/s
Iteration   2: 767.591 ops/s
Iteration   3: 791.480 ops/s
Iteration   4: 787.025 ops/s
Iteration   5: 767.205 ops/s
Iteration   6: 764.316 ops/s
Iteration   7: 784.260 ops/s
Iteration   8: 772.378 ops/s
Iteration   9: 771.254 ops/s
Iteration  10: 785.849 ops/s


Result "com.meylism.databind.Deserialization.jackson":
  776.199 ?(99.9%) 15.794 ops/s [Average]
  (min, avg, max) = (726.160, 776.199, 808.202), stdev = 18.188
  CI (99.9%): [760.405, 791.993] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Deserialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:46
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/projects/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
729.948 ops/s
# Warmup Iteration   2: 758.380 ops/s
# Warmup Iteration   3: 789.774 ops/s
# Warmup Iteration   4: 783.246 ops/s
# Warmup Iteration   5: 762.968 ops/s
Iteration   1: 771.456 ops/s
Iteration   2: 728.417 ops/s
Iteration   3: 745.162 ops/s
Iteration   4: 781.084 ops/s
Iteration   5: 750.738 ops/s
Iteration   6: 807.924 ops/s
Iteration   7: 772.029 ops/s
Iteration   8: 794.261 ops/s
Iteration   9: 790.964 ops/s
Iteration  10: 796.741 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/projects/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
683.418 ops/s
# Warmup Iteration   2: 762.335 ops/s
# Warmup Iteration   3: 760.162 ops/s
# Warmup Iteration   4: 783.908 ops/s
# Warmup Iteration   5: 792.026 ops/s
Iteration   1: 798.176 ops/s
Iteration   2: 828.318 ops/s
Iteration   3: 796.135 ops/s
Iteration   4: 802.617 ops/s
Iteration   5: 790.324 ops/s
Iteration   6: 799.570 ops/s
Iteration   7: 769.127 ops/s
Iteration   8: 789.148 ops/s
Iteration   9: 763.571 ops/s
Iteration  10: 795.822 ops/s


Result "com.meylism.databind.Deserialization.jackson_afterburner":
  783.579 ?(99.9%) 20.553 ops/s [Average]
  (min, avg, max) = (728.417, 783.579, 828.318), stdev = 23.669
  CI (99.9%): [763.026, 804.132] (assumes normal distribution)


# Run complete. Total time: 00:13:48

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt    Score    Error  Units
Deserialization.dsljson              thrpt   20  346.501 ? 10.668  ops/s
Deserialization.dsljson_reflection   thrpt   20  335.882 ? 13.635  ops/s
Deserialization.gson                 thrpt   20  475.991 ? 28.099  ops/s
Deserialization.jackson              thrpt   20  776.199 ? 15.794  ops/s
Deserialization.jackson_afterburner  thrpt   20  783.579 ? 20.553  ops/s
