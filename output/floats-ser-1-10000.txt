# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
21.191 ops/s
# Warmup Iteration   2: 22.345 ops/s
# Warmup Iteration   3: 22.115 ops/s
# Warmup Iteration   4: 22.282 ops/s
# Warmup Iteration   5: 22.389 ops/s
Iteration   1: 22.778 ops/s
Iteration   2: 22.756 ops/s
Iteration   3: 23.073 ops/s
Iteration   4: 23.310 ops/s
Iteration   5: 21.978 ops/s
Iteration   6: 21.916 ops/s
Iteration   7: 21.945 ops/s
Iteration   8: 22.325 ops/s
Iteration   9: 21.951 ops/s
Iteration  10: 22.668 ops/s

# Run progress: 10.00% complete, ETA 00:15:27
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
21.566 ops/s
# Warmup Iteration   2: 21.041 ops/s
# Warmup Iteration   3: 20.898 ops/s
# Warmup Iteration   4: 20.481 ops/s
# Warmup Iteration   5: 21.067 ops/s
Iteration   1: 21.327 ops/s
Iteration   2: 21.202 ops/s
Iteration   3: 20.203 ops/s
Iteration   4: 20.564 ops/s
Iteration   5: 21.092 ops/s
Iteration   6: 21.034 ops/s
Iteration   7: 21.422 ops/s
Iteration   8: 21.473 ops/s
Iteration   9: 21.036 ops/s
Iteration  10: 21.790 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  21.792 ?(99.9%) 0.731 ops/s [Average]
  (min, avg, max) = (20.203, 21.792, 23.310), stdev = 0.842
  CI (99.9%): [21.061, 22.523] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:14:09
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
18.867 ops/s
# Warmup Iteration   2: 18.549 ops/s
# Warmup Iteration   3: 18.213 ops/s
# Warmup Iteration   4: 18.387 ops/s
# Warmup Iteration   5: 18.608 ops/s
Iteration   1: 18.336 ops/s
Iteration   2: 18.991 ops/s
Iteration   3: 18.936 ops/s
Iteration   4: 18.598 ops/s
Iteration   5: 18.857 ops/s
Iteration   6: 18.616 ops/s
Iteration   7: 18.813 ops/s
Iteration   8: 18.866 ops/s
Iteration   9: 18.813 ops/s
Iteration  10: 19.064 ops/s

# Run progress: 30.00% complete, ETA 00:12:20
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
18.071 ops/s
# Warmup Iteration   2: 17.747 ops/s
# Warmup Iteration   3: 17.687 ops/s
# Warmup Iteration   4: 17.753 ops/s
# Warmup Iteration   5: 17.775 ops/s
Iteration   1: 17.541 ops/s
Iteration   2: 17.961 ops/s
Iteration   3: 17.536 ops/s
Iteration   4: 17.876 ops/s
Iteration   5: 18.079 ops/s
Iteration   6: 17.567 ops/s
Iteration   7: 17.836 ops/s
Iteration   8: 17.834 ops/s
Iteration   9: 17.688 ops/s
Iteration  10: 17.975 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  18.289 ?(99.9%) 0.478 ops/s [Average]
  (min, avg, max) = (17.536, 18.289, 19.064), stdev = 0.551
  CI (99.9%): [17.811, 18.767] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:10:44
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
17.782 ops/s
# Warmup Iteration   2: 17.673 ops/s
# Warmup Iteration   3: 17.774 ops/s
# Warmup Iteration   4: 16.897 ops/s
# Warmup Iteration   5: 17.739 ops/s
Iteration   1: 17.877 ops/s
Iteration   2: 17.949 ops/s
Iteration   3: 17.658 ops/s
Iteration   4: 17.292 ops/s
Iteration   5: 17.950 ops/s
Iteration   6: 18.037 ops/s
Iteration   7: 17.962 ops/s
Iteration   8: 18.007 ops/s
Iteration   9: 17.818 ops/s
Iteration  10: 18.016 ops/s

# Run progress: 50.00% complete, ETA 00:09:01
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
16.927 ops/s
# Warmup Iteration   2: 16.886 ops/s
# Warmup Iteration   3: 16.946 ops/s
# Warmup Iteration   4: 16.910 ops/s
# Warmup Iteration   5: 16.955 ops/s
Iteration   1: 16.630 ops/s
Iteration   2: 17.330 ops/s
Iteration   3: 16.967 ops/s
Iteration   4: 16.929 ops/s
Iteration   5: 16.776 ops/s
Iteration   6: 16.767 ops/s
Iteration   7: 16.855 ops/s
Iteration   8: 16.952 ops/s
Iteration   9: 16.815 ops/s
Iteration  10: 16.996 ops/s


Result "com.meylism.databind.Serialization.gson":
  17.379 ?(99.9%) 0.461 ops/s [Average]
  (min, avg, max) = (16.630, 17.379, 18.037), stdev = 0.531
  CI (99.9%): [16.918, 17.840] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:07:14
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
22.302 ops/s
# Warmup Iteration   2: 23.103 ops/s
# Warmup Iteration   3: 23.332 ops/s
# Warmup Iteration   4: 23.835 ops/s
# Warmup Iteration   5: 23.123 ops/s
Iteration   1: 23.577 ops/s
Iteration   2: 23.783 ops/s
Iteration   3: 23.821 ops/s
Iteration   4: 24.001 ops/s
Iteration   5: 23.299 ops/s
Iteration   6: 22.701 ops/s
Iteration   7: 23.701 ops/s
Iteration   8: 24.172 ops/s
Iteration   9: 24.237 ops/s
Iteration  10: 24.692 ops/s

# Run progress: 70.00% complete, ETA 00:05:23
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
21.079 ops/s
# Warmup Iteration   2: 20.463 ops/s
# Warmup Iteration   3: 21.387 ops/s
# Warmup Iteration   4: 21.434 ops/s
# Warmup Iteration   5: 21.566 ops/s
Iteration   1: 21.309 ops/s
Iteration   2: 21.233 ops/s
Iteration   3: 21.429 ops/s
Iteration   4: 21.007 ops/s
Iteration   5: 20.707 ops/s
Iteration   6: 21.457 ops/s
Iteration   7: 20.579 ops/s
Iteration   8: 21.378 ops/s
Iteration   9: 20.971 ops/s
Iteration  10: 21.518 ops/s


Result "com.meylism.databind.Serialization.jackson":
  22.479 ?(99.9%) 1.236 ops/s [Average]
  (min, avg, max) = (20.579, 22.479, 24.692), stdev = 1.423
  CI (99.9%): [21.243, 23.714] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.8, OpenJDK 64-Bit Server VM, 11.0.8+10-LTS
# VM invoker: /usr/lib/jvm/java-11-openjdk-11.0.8.10-0.el7_8.x86_64/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 16 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:03:35
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/projects/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
21.433 ops/s
# Warmup Iteration   2: 22.644 ops/s
# Warmup Iteration   3: 22.332 ops/s
# Warmup Iteration   4: 22.084 ops/s
# Warmup Iteration   5: 21.888 ops/s
Iteration   1: 22.382 ops/s
Iteration   2: 22.358 ops/s
Iteration   3: 22.139 ops/s
Iteration   4: 22.789 ops/s
Iteration   5: 22.744 ops/s
Iteration   6: 22.299 ops/s
Iteration   7: 22.086 ops/s
Iteration   8: 21.773 ops/s
Iteration   9: 21.467 ops/s
Iteration  10: 21.203 ops/s

# Run progress: 90.00% complete, ETA 00:01:47
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=8678 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/projects/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
19.177 ops/s
# Warmup Iteration   2: 19.306 ops/s
# Warmup Iteration   3: 19.145 ops/s
# Warmup Iteration   4: 18.657 ops/s
# Warmup Iteration   5: 18.909 ops/s
Iteration   1: 19.919 ops/s
Iteration   2: 18.846 ops/s
Iteration   3: 19.400 ops/s
Iteration   4: 18.759 ops/s
Iteration   5: 19.438 ops/s
Iteration   6: 19.264 ops/s
Iteration   7: 20.501 ops/s
Iteration   8: 19.952 ops/s
Iteration   9: 17.782 ops/s
Iteration  10: 19.232 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  20.717 ?(99.9%) 1.367 ops/s [Average]
  (min, avg, max) = (17.782, 20.717, 22.789), stdev = 1.574
  CI (99.9%): [19.350, 22.084] (assumes normal distribution)


# Run complete. Total time: 00:17:56

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt   Score   Error  Units
Serialization.dsljson              thrpt   20  21.792 ? 0.731  ops/s
Serialization.dsljson_reflection   thrpt   20  18.289 ? 0.478  ops/s
Serialization.gson                 thrpt   20  17.379 ? 0.461  ops/s
Serialization.jackson              thrpt   20  22.479 ? 1.236  ops/s
Serialization.jackson_afterburner  thrpt   20  20.717 ? 1.367  ops/s
