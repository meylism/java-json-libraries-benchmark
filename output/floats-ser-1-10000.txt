# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5.787 ops/s
# Warmup Iteration   2: 6.206 ops/s
# Warmup Iteration   3: 6.772 ops/s
# Warmup Iteration   4: 6.786 ops/s
# Warmup Iteration   5: 6.789 ops/s
Iteration   1: 6.785 ops/s
Iteration   2: 6.785 ops/s
Iteration   3: 6.799 ops/s
Iteration   4: 6.747 ops/s
Iteration   5: 6.787 ops/s
Iteration   6: 6.781 ops/s
Iteration   7: 6.567 ops/s
Iteration   8: 6.740 ops/s
Iteration   9: 6.767 ops/s
Iteration  10: 6.785 ops/s

# Run progress: 10.00% complete, ETA 00:10:31
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6.434 ops/s
# Warmup Iteration   2: 6.555 ops/s
# Warmup Iteration   3: 6.556 ops/s
# Warmup Iteration   4: 6.552 ops/s
# Warmup Iteration   5: 6.537 ops/s
Iteration   1: 6.477 ops/s
Iteration   2: 6.501 ops/s
Iteration   3: 6.527 ops/s
Iteration   4: 6.548 ops/s
Iteration   5: 6.483 ops/s
Iteration   6: 6.479 ops/s
Iteration   7: 6.555 ops/s
Iteration   8: 6.525 ops/s
Iteration   9: 6.535 ops/s
Iteration  10: 6.539 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  6.636 ?(99.9%) 0.115 ops/s [Average]
  (min, avg, max) = (6.477, 6.636, 6.799), stdev = 0.132
  CI (99.9%): [6.521, 6.750] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:09:10
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6.523 ops/s
# Warmup Iteration   2: 6.522 ops/s
# Warmup Iteration   3: 6.648 ops/s
# Warmup Iteration   4: 6.649 ops/s
# Warmup Iteration   5: 6.629 ops/s
Iteration   1: 6.647 ops/s
Iteration   2: 6.598 ops/s
Iteration   3: 6.482 ops/s
Iteration   4: 6.291 ops/s
Iteration   5: 6.661 ops/s
Iteration   6: 6.682 ops/s
Iteration   7: 6.642 ops/s
Iteration   8: 6.645 ops/s
Iteration   9: 6.674 ops/s
Iteration  10: 6.620 ops/s

# Run progress: 30.00% complete, ETA 00:08:05
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6.465 ops/s
# Warmup Iteration   2: 6.614 ops/s
# Warmup Iteration   3: 6.587 ops/s
# Warmup Iteration   4: 6.519 ops/s
# Warmup Iteration   5: 6.370 ops/s
Iteration   1: 6.354 ops/s
Iteration   2: 6.444 ops/s
Iteration   3: 6.039 ops/s
Iteration   4: 6.439 ops/s
Iteration   5: 6.617 ops/s
Iteration   6: 6.521 ops/s
Iteration   7: 6.596 ops/s
Iteration   8: 6.527 ops/s
Iteration   9: 6.598 ops/s
Iteration  10: 6.560 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  6.532 ?(99.9%) 0.138 ops/s [Average]
  (min, avg, max) = (6.039, 6.532, 6.682), stdev = 0.159
  CI (99.9%): [6.394, 6.670] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:06:53
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5.945 ops/s
# Warmup Iteration   2: 6.069 ops/s
# Warmup Iteration   3: 5.837 ops/s
# Warmup Iteration   4: 5.298 ops/s
# Warmup Iteration   5: 5.788 ops/s
Iteration   1: 5.785 ops/s
Iteration   2: 5.871 ops/s
Iteration   3: 5.850 ops/s
Iteration   4: 5.878 ops/s
Iteration   5: 5.847 ops/s
Iteration   6: 5.800 ops/s
Iteration   7: 5.871 ops/s
Iteration   8: 5.788 ops/s
Iteration   9: 5.817 ops/s
Iteration  10: 5.807 ops/s

# Run progress: 50.00% complete, ETA 00:05:48
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 5.844 ops/s
# Warmup Iteration   2: 5.757 ops/s
# Warmup Iteration   3: 5.769 ops/s
# Warmup Iteration   4: 5.733 ops/s
# Warmup Iteration   5: 5.809 ops/s
Iteration   1: 5.826 ops/s
Iteration   2: 5.827 ops/s
Iteration   3: 5.830 ops/s
Iteration   4: 5.827 ops/s
Iteration   5: 5.748 ops/s
Iteration   6: 5.844 ops/s
Iteration   7: 5.849 ops/s
Iteration   8: 5.735 ops/s
Iteration   9: 5.807 ops/s
Iteration  10: 5.750 ops/s


Result "com.meylism.databind.Serialization.gson":
  5.818 ?(99.9%) 0.036 ops/s [Average]
  (min, avg, max) = (5.735, 5.818, 5.878), stdev = 0.041
  CI (99.9%): [5.782, 5.854] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:04:40
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6.260 ops/s
# Warmup Iteration   2: 6.398 ops/s
# Warmup Iteration   3: 6.410 ops/s
# Warmup Iteration   4: 6.440 ops/s
# Warmup Iteration   5: 6.419 ops/s
Iteration   1: 6.401 ops/s
Iteration   2: 6.419 ops/s
Iteration   3: 6.395 ops/s
Iteration   4: 6.408 ops/s
Iteration   5: 6.438 ops/s
Iteration   6: 6.363 ops/s
Iteration   7: 6.024 ops/s
Iteration   8: 6.417 ops/s
Iteration   9: 6.423 ops/s
Iteration  10: 6.384 ops/s

# Run progress: 70.00% complete, ETA 00:03:30
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: 6.185 ops/s
# Warmup Iteration   2: 6.328 ops/s
# Warmup Iteration   3: 6.332 ops/s
# Warmup Iteration   4: 5.778 ops/s
# Warmup Iteration   5: 5.905 ops/s
Iteration   1: 6.315 ops/s
Iteration   2: 6.313 ops/s
Iteration   3: 6.339 ops/s
Iteration   4: 6.262 ops/s
Iteration   5: 6.035 ops/s
Iteration   6: 6.243 ops/s
Iteration   7: 6.176 ops/s
Iteration   8: 6.221 ops/s
Iteration   9: 6.260 ops/s
Iteration  10: 6.305 ops/s


Result "com.meylism.databind.Serialization.jackson":
  6.307 ?(99.9%) 0.105 ops/s [Average]
  (min, avg, max) = (6.024, 6.307, 6.438), stdev = 0.121
  CI (99.9%): [6.202, 6.412] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14, OpenJDK 64-Bit Server VM, 11.0.14+9-post-Debian-1deb11u1
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+AggressiveOpts -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 5 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:19
# Fork: 1 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
6.168 ops/s
# Warmup Iteration   2: 6.316 ops/s
# Warmup Iteration   3: 6.331 ops/s
# Warmup Iteration   4: 6.287 ops/s
# Warmup Iteration   5: 6.323 ops/s
Iteration   1: 6.302 ops/s
Iteration   2: 6.325 ops/s
Iteration   3: 5.815 ops/s
Iteration   4: 6.265 ops/s
Iteration   5: 6.308 ops/s
Iteration   6: 6.286 ops/s
Iteration   7: 6.328 ops/s
Iteration   8: 6.307 ops/s
Iteration   9: 6.314 ops/s
Iteration  10: 6.318 ops/s

# Run progress: 90.00% complete, ETA 00:01:09
# Fork: 2 of 2
OpenJDK 64-Bit Server VM warning: Option AggressiveOpts was deprecated in version 11.0 and will likely be removed in a future release.
# Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/root/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
6.310 ops/s
# Warmup Iteration   2: 6.193 ops/s
# Warmup Iteration   3: 6.457 ops/s
# Warmup Iteration   4: 6.478 ops/s
# Warmup Iteration   5: 6.399 ops/s
Iteration   1: 6.410 ops/s
Iteration   2: 6.483 ops/s
Iteration   3: 6.437 ops/s
Iteration   4: 6.465 ops/s
Iteration   5: 6.415 ops/s
Iteration   6: 6.450 ops/s
Iteration   7: 6.478 ops/s
Iteration   8: 6.487 ops/s
Iteration   9: 6.455 ops/s
Iteration  10: 6.458 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  6.355 ?(99.9%) 0.129 ops/s [Average]
  (min, avg, max) = (5.815, 6.355, 6.487), stdev = 0.149
  CI (99.9%): [6.226, 6.484] (assumes normal distribution)


# Run complete. Total time: 00:11:34

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt  Score   Error  Units
Serialization.dsljson              thrpt   20  6.636 ? 0.115  ops/s
Serialization.dsljson_reflection   thrpt   20  6.532 ? 0.138  ops/s
Serialization.gson                 thrpt   20  5.818 ? 0.036  ops/s
Serialization.jackson              thrpt   20  6.307 ? 0.105  ops/s
Serialization.jackson_afterburner  thrpt   20  6.355 ? 0.129  ops/s
