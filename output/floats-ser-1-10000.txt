# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
5.350 ops/s
# Warmup Iteration   2: 5.361 ops/s
# Warmup Iteration   3: 5.384 ops/s
# Warmup Iteration   4: 5.380 ops/s
# Warmup Iteration   5: 5.384 ops/s
Iteration   1: 5.398 ops/s
Iteration   2: 5.384 ops/s
Iteration   3: 5.373 ops/s
Iteration   4: 5.389 ops/s
Iteration   5: 5.387 ops/s
Iteration   6: 5.391 ops/s
Iteration   7: 5.378 ops/s
Iteration   8: 5.382 ops/s
Iteration   9: 5.384 ops/s
Iteration  10: 5.384 ops/s

# Run progress: 10.00% complete, ETA 00:15:32
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
5.567 ops/s
# Warmup Iteration   2: 5.617 ops/s
# Warmup Iteration   3: 5.632 ops/s
# Warmup Iteration   4: 5.646 ops/s
# Warmup Iteration   5: 5.621 ops/s
Iteration   1: 5.625 ops/s
Iteration   2: 5.622 ops/s
Iteration   3: 5.613 ops/s
Iteration   4: 5.638 ops/s
Iteration   5: 5.643 ops/s
Iteration   6: 5.638 ops/s
Iteration   7: 5.632 ops/s
Iteration   8: 5.634 ops/s
Iteration   9: 5.633 ops/s
Iteration  10: 5.641 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  5.508 ±(99.9%) 0.110 ops/s [Average]
  (min, avg, max) = (5.373, 5.508, 5.643), stdev = 0.127
  CI (99.9%): [5.398, 5.619] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:13:41
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
5.618 ops/s
# Warmup Iteration   2: 5.735 ops/s
# Warmup Iteration   3: 5.743 ops/s
# Warmup Iteration   4: 5.741 ops/s
# Warmup Iteration   5: 5.746 ops/s
Iteration   1: 5.737 ops/s
Iteration   2: 5.721 ops/s
Iteration   3: 5.737 ops/s
Iteration   4: 5.748 ops/s
Iteration   5: 5.745 ops/s
Iteration   6: 5.742 ops/s
Iteration   7: 5.751 ops/s
Iteration   8: 5.742 ops/s
Iteration   9: 5.738 ops/s
Iteration  10: 5.753 ops/s

# Run progress: 30.00% complete, ETA 00:11:52
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
5.351 ops/s
# Warmup Iteration   2: 5.416 ops/s
# Warmup Iteration   3: 5.434 ops/s
# Warmup Iteration   4: 5.405 ops/s
# Warmup Iteration   5: 5.420 ops/s
Iteration   1: 5.414 ops/s
Iteration   2: 5.427 ops/s
Iteration   3: 5.420 ops/s
Iteration   4: 5.429 ops/s
Iteration   5: 5.430 ops/s
Iteration   6: 5.417 ops/s
Iteration   7: 5.439 ops/s
Iteration   8: 5.427 ops/s
Iteration   9: 5.431 ops/s
Iteration  10: 5.442 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  5.585 ±(99.9%) 0.140 ops/s [Average]
  (min, avg, max) = (5.414, 5.585, 5.753), stdev = 0.161
  CI (99.9%): [5.445, 5.725] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:10:11
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
4.949 ops/s
# Warmup Iteration   2: 5.041 ops/s
# Warmup Iteration   3: 5.088 ops/s
# Warmup Iteration   4: 5.084 ops/s
# Warmup Iteration   5: 5.069 ops/s
Iteration   1: 5.068 ops/s
Iteration   2: 5.084 ops/s
Iteration   3: 5.065 ops/s
Iteration   4: 5.084 ops/s
Iteration   5: 5.095 ops/s
Iteration   6: 5.064 ops/s
Iteration   7: 5.071 ops/s
Iteration   8: 5.096 ops/s
Iteration   9: 5.077 ops/s
Iteration  10: 5.094 ops/s

# Run progress: 50.00% complete, ETA 00:08:25
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
4.719 ops/s
# Warmup Iteration   2: 4.703 ops/s
# Warmup Iteration   3: 4.654 ops/s
# Warmup Iteration   4: 4.657 ops/s
# Warmup Iteration   5: 4.655 ops/s
Iteration   1: 4.655 ops/s
Iteration   2: 4.658 ops/s
Iteration   3: 4.643 ops/s
Iteration   4: 4.662 ops/s
Iteration   5: 4.664 ops/s
Iteration   6: 4.657 ops/s
Iteration   7: 4.651 ops/s
Iteration   8: 4.657 ops/s
Iteration   9: 4.658 ops/s
Iteration  10: 4.652 ops/s


Result "com.meylism.databind.Serialization.gson":
  4.868 ±(99.9%) 0.189 ops/s [Average]
  (min, avg, max) = (4.643, 4.868, 5.096), stdev = 0.218
  CI (99.9%): [4.679, 5.057] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:06:44
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
5.388 ops/s
# Warmup Iteration   2: 5.462 ops/s
# Warmup Iteration   3: 5.457 ops/s
# Warmup Iteration   4: 5.473 ops/s
# Warmup Iteration   5: 5.466 ops/s
Iteration   1: 5.476 ops/s
Iteration   2: 5.450 ops/s
Iteration   3: 5.467 ops/s
Iteration   4: 5.472 ops/s
Iteration   5: 5.456 ops/s
Iteration   6: 5.464 ops/s
Iteration   7: 5.479 ops/s
Iteration   8: 5.459 ops/s
Iteration   9: 5.480 ops/s
Iteration  10: 5.485 ops/s

# Run progress: 70.00% complete, ETA 00:05:03
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
5.223 ops/s
# Warmup Iteration   2: 5.286 ops/s
# Warmup Iteration   3: 5.276 ops/s
# Warmup Iteration   4: 5.262 ops/s
# Warmup Iteration   5: 5.270 ops/s
Iteration   1: 5.265 ops/s
Iteration   2: 5.275 ops/s
Iteration   3: 5.284 ops/s
Iteration   4: 5.267 ops/s
Iteration   5: 5.286 ops/s
Iteration   6: 5.278 ops/s
Iteration   7: 5.210 ops/s
Iteration   8: 5.284 ops/s
Iteration   9: 5.287 ops/s
Iteration  10: 5.290 ops/s


Result "com.meylism.databind.Serialization.jackson":
  5.371 ±(99.9%) 0.089 ops/s [Average]
  (min, avg, max) = (5.210, 5.371, 5.485), stdev = 0.102
  CI (99.9%): [5.282, 5.460] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:03:21
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
5.270 ops/s
# Warmup Iteration   2: 5.324 ops/s
# Warmup Iteration   3: 5.335 ops/s
# Warmup Iteration   4: 5.340 ops/s
# Warmup Iteration   5: 5.337 ops/s
Iteration   1: 5.341 ops/s
Iteration   2: 5.357 ops/s
Iteration   3: 5.345 ops/s
Iteration   4: 5.356 ops/s
Iteration   5: 5.332 ops/s
Iteration   6: 5.338 ops/s
Iteration   7: 5.330 ops/s
Iteration   8: 5.343 ops/s
Iteration   9: 5.361 ops/s
Iteration  10: 5.358 ops/s

# Run progress: 90.00% complete, ETA 00:01:40
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
5.211 ops/s
# Warmup Iteration   2: 5.290 ops/s
# Warmup Iteration   3: 5.288 ops/s
# Warmup Iteration   4: 5.292 ops/s
# Warmup Iteration   5: 5.293 ops/s
Iteration   1: 5.240 ops/s
Iteration   2: 5.255 ops/s
Iteration   3: 5.247 ops/s
Iteration   4: 5.257 ops/s
Iteration   5: 5.246 ops/s
Iteration   6: 5.257 ops/s
Iteration   7: 5.272 ops/s
Iteration   8: 5.270 ops/s
Iteration   9: 5.268 ops/s
Iteration  10: 5.280 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  5.303 ±(99.9%) 0.040 ops/s [Average]
  (min, avg, max) = (5.240, 5.303, 5.361), stdev = 0.046
  CI (99.9%): [5.263, 5.343] (assumes normal distribution)


# Run complete. Total time: 00:16:45

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt  Score   Error  Units
Serialization.dsljson              thrpt   20  5.508 ± 0.110  ops/s
Serialization.dsljson_reflection   thrpt   20  5.585 ± 0.140  ops/s
Serialization.gson                 thrpt   20  4.868 ± 0.189  ops/s
Serialization.jackson              thrpt   20  5.371 ± 0.089  ops/s
Serialization.jackson_afterburner  thrpt   20  5.303 ± 0.040  ops/s
