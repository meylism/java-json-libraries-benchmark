# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson

# Run progress: 0.00% complete, ETA 00:13:20
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
88.218 ops/s
# Warmup Iteration   2: 89.483 ops/s
# Warmup Iteration   3: 89.353 ops/s
# Warmup Iteration   4: 89.515 ops/s
# Warmup Iteration   5: 89.465 ops/s
Iteration   1: 89.558 ops/s
Iteration   2: 89.557 ops/s
Iteration   3: 89.505 ops/s
Iteration   4: 89.634 ops/s
Iteration   5: 89.483 ops/s
Iteration   6: 89.402 ops/s
Iteration   7: 89.480 ops/s
Iteration   8: 89.475 ops/s
Iteration   9: 89.554 ops/s
Iteration  10: 89.520 ops/s

# Run progress: 10.00% complete, ETA 00:12:22
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
87.841 ops/s
# Warmup Iteration   2: 87.769 ops/s
# Warmup Iteration   3: 87.942 ops/s
# Warmup Iteration   4: 87.804 ops/s
# Warmup Iteration   5: 87.776 ops/s
Iteration   1: 87.913 ops/s
Iteration   2: 87.888 ops/s
Iteration   3: 87.864 ops/s
Iteration   4: 88.027 ops/s
Iteration   5: 87.934 ops/s
Iteration   6: 88.085 ops/s
Iteration   7: 87.864 ops/s
Iteration   8: 87.916 ops/s
Iteration   9: 87.898 ops/s
Iteration  10: 87.919 ops/s


Result "com.meylism.databind.Serialization.dsljson":
  88.724 ±(99.9%) 0.709 ops/s [Average]
  (min, avg, max) = (87.864, 88.724, 89.634), stdev = 0.816
  CI (99.9%): [88.015, 89.433] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.dsljson_reflection

# Run progress: 20.00% complete, ETA 00:10:58
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
87.410 ops/s
# Warmup Iteration   2: 87.725 ops/s
# Warmup Iteration   3: 87.739 ops/s
# Warmup Iteration   4: 87.801 ops/s
# Warmup Iteration   5: 87.893 ops/s
Iteration   1: 87.920 ops/s
Iteration   2: 87.896 ops/s
Iteration   3: 87.738 ops/s
Iteration   4: 87.879 ops/s
Iteration   5: 87.914 ops/s
Iteration   6: 87.843 ops/s
Iteration   7: 88.973 ops/s
Iteration   8: 87.870 ops/s
Iteration   9: 87.781 ops/s
Iteration  10: 87.892 ops/s

# Run progress: 30.00% complete, ETA 00:09:36
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
79.850 ops/s
# Warmup Iteration   2: 80.248 ops/s
# Warmup Iteration   3: 80.301 ops/s
# Warmup Iteration   4: 80.293 ops/s
# Warmup Iteration   5: 80.281 ops/s
Iteration   1: 80.334 ops/s
Iteration   2: 80.438 ops/s
Iteration   3: 80.806 ops/s
Iteration   4: 80.433 ops/s
Iteration   5: 80.388 ops/s
Iteration   6: 80.200 ops/s
Iteration   7: 80.060 ops/s
Iteration   8: 80.332 ops/s
Iteration   9: 80.244 ops/s
Iteration  10: 80.347 ops/s


Result "com.meylism.databind.Serialization.dsljson_reflection":
  84.164 ±(99.9%) 3.400 ops/s [Average]
  (min, avg, max) = (80.060, 84.164, 88.973), stdev = 3.915
  CI (99.9%): [80.765, 87.564] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.gson

# Run progress: 40.00% complete, ETA 00:08:14
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
21.338 ops/s
# Warmup Iteration   2: 22.188 ops/s
# Warmup Iteration   3: 22.220 ops/s
# Warmup Iteration   4: 22.231 ops/s
# Warmup Iteration   5: 22.213 ops/s
Iteration   1: 22.277 ops/s
Iteration   2: 22.183 ops/s
Iteration   3: 22.231 ops/s
Iteration   4: 22.272 ops/s
Iteration   5: 22.258 ops/s
Iteration   6: 22.252 ops/s
Iteration   7: 22.287 ops/s
Iteration   8: 22.267 ops/s
Iteration   9: 22.219 ops/s
Iteration  10: 22.253 ops/s

# Run progress: 50.00% complete, ETA 00:06:54
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
22.693 ops/s
# Warmup Iteration   2: 23.443 ops/s
# Warmup Iteration   3: 23.507 ops/s
# Warmup Iteration   4: 23.522 ops/s
# Warmup Iteration   5: 23.543 ops/s
Iteration   1: 23.509 ops/s
Iteration   2: 23.530 ops/s
Iteration   3: 23.521 ops/s
Iteration   4: 23.529 ops/s
Iteration   5: 23.532 ops/s
Iteration   6: 23.525 ops/s
Iteration   7: 23.533 ops/s
Iteration   8: 23.541 ops/s
Iteration   9: 23.533 ops/s
Iteration  10: 23.600 ops/s


Result "com.meylism.databind.Serialization.gson":
  22.893 ±(99.9%) 0.573 ops/s [Average]
  (min, avg, max) = (22.183, 22.893, 23.600), stdev = 0.660
  CI (99.9%): [22.320, 23.466] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson

# Run progress: 60.00% complete, ETA 00:05:32
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
86.665 ops/s
# Warmup Iteration   2: 86.682 ops/s
# Warmup Iteration   3: 86.748 ops/s
# Warmup Iteration   4: 86.759 ops/s
# Warmup Iteration   5: 86.648 ops/s
Iteration   1: 86.762 ops/s
Iteration   2: 86.816 ops/s
Iteration   3: 86.762 ops/s
Iteration   4: 86.803 ops/s
Iteration   5: 86.717 ops/s
Iteration   6: 85.897 ops/s
Iteration   7: 87.468 ops/s
Iteration   8: 87.528 ops/s
Iteration   9: 87.196 ops/s
Iteration  10: 87.596 ops/s

# Run progress: 70.00% complete, ETA 00:04:09
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
90.764 ops/s
# Warmup Iteration   2: 89.047 ops/s
# Warmup Iteration   3: 88.768 ops/s
# Warmup Iteration   4: 94.433 ops/s
# Warmup Iteration   5: 88.871 ops/s
Iteration   1: 88.884 ops/s
Iteration   2: 88.888 ops/s
Iteration   3: 88.898 ops/s
Iteration   4: 89.010 ops/s
Iteration   5: 87.166 ops/s
Iteration   6: 87.937 ops/s
Iteration   7: 87.839 ops/s
Iteration   8: 87.095 ops/s
Iteration   9: 88.560 ops/s
Iteration  10: 88.029 ops/s


Result "com.meylism.databind.Serialization.jackson":
  87.592 ±(99.9%) 0.777 ops/s [Average]
  (min, avg, max) = (85.897, 87.592, 89.010), stdev = 0.895
  CI (99.9%): [86.815, 88.370] (assumes normal distribution)


# JMH version: 1.34
# VM version: JDK 11.0.14.1, OpenJDK 64-Bit Server VM, 11.0.14.1+1
# VM invoker: /usr/lib/jvm/jdk-11.0.14.1+1/bin/java
# VM options: -Xms2g -Xmx5g
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 4 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.meylism.databind.Serialization.jackson_afterburner

# Run progress: 80.00% complete, ETA 00:02:45
# Fork: 1 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
96.163 ops/s
# Warmup Iteration   2: 94.199 ops/s
# Warmup Iteration   3: 94.258 ops/s
# Warmup Iteration   4: 94.331 ops/s
# Warmup Iteration   5: 94.253 ops/s
Iteration   1: 94.468 ops/s
Iteration   2: 94.580 ops/s
Iteration   3: 94.455 ops/s
Iteration   4: 92.571 ops/s
Iteration   5: 91.161 ops/s
Iteration   6: 91.250 ops/s
Iteration   7: 92.616 ops/s
Iteration   8: 94.443 ops/s
Iteration   9: 94.355 ops/s
Iteration  10: 94.319 ops/s

# Run progress: 90.00% complete, ETA 00:01:22
# Fork: 2 of 2
# Warmup Iteration   1: Using SEED=10461 as seed for Random
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/home/meylism/Documents/java-json-libraries-benchmark/target/benchmark-with-dependencies.jar) to method java.lang.ClassLoader.findLoadedClass(java.lang.String)
WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
93.855 ops/s
# Warmup Iteration   2: 94.250 ops/s
# Warmup Iteration   3: 94.223 ops/s
# Warmup Iteration   4: 94.197 ops/s
# Warmup Iteration   5: 94.289 ops/s
Iteration   1: 94.256 ops/s
Iteration   2: 94.265 ops/s
Iteration   3: 94.318 ops/s
Iteration   4: 94.361 ops/s
Iteration   5: 94.548 ops/s
Iteration   6: 94.487 ops/s
Iteration   7: 94.283 ops/s
Iteration   8: 94.313 ops/s
Iteration   9: 94.342 ops/s
Iteration  10: 94.837 ops/s


Result "com.meylism.databind.Serialization.jackson_afterburner":
  93.911 ±(99.9%) 0.945 ops/s [Average]
  (min, avg, max) = (91.161, 93.911, 94.837), stdev = 1.089
  CI (99.9%): [92.966, 94.857] (assumes normal distribution)


# Run complete. Total time: 00:13:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt   Score   Error  Units
Serialization.dsljson              thrpt   20  88.724 ± 0.709  ops/s
Serialization.dsljson_reflection   thrpt   20  84.164 ± 3.400  ops/s
Serialization.gson                 thrpt   20  22.893 ± 0.573  ops/s
Serialization.jackson              thrpt   20  87.592 ± 0.777  ops/s
Serialization.jackson_afterburner  thrpt   20  93.911 ± 0.945  ops/s
